// Generated by GNU Bison 3.3.2.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <http://www.gnu.org/software/bison/>.

digraph "interpreter.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: . program $end\l  1 program: . func\l  2 func: . func stmts\l  3     | . func error\l  4     | . %empty\l"]
  0 -> 1 [style=dashed label="program"]
  0 -> 2 [style=dashed label="func"]
  0 -> "0R4" [style=solid]
 "0R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  1 [label="State 1\n\l  0 $accept: program . $end\l"]
  1 -> 3 [style=solid label="$end"]
  2 [label="State 2\n\l  1 program: func .  [$end]\l  2 func: func . stmts\l  3     | func . error\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 68 callfunction: . '(' return_func ')' DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  2 -> 4 [style=dotted]
  2 -> 5 [style=solid label="BOOL"]
  2 -> 6 [style=solid label="INTEGER"]
  2 -> 7 [style=solid label="VARIABLE"]
  2 -> 8 [style=solid label="VVARIABLE"]
  2 -> 9 [style=solid label="MVARIABLE"]
  2 -> 10 [style=solid label="CINT"]
  2 -> 11 [style=solid label="VINT"]
  2 -> 12 [style=solid label="MINT"]
  2 -> 13 [style=solid label="INT"]
  2 -> 14 [style=solid label="CVINT"]
  2 -> 15 [style=solid label="CMINT"]
  2 -> 16 [style=solid label="BOOLEAN"]
  2 -> 17 [style=solid label="CBOOLEAN"]
  2 -> 18 [style=solid label="VBOOLEAN"]
  2 -> 19 [style=solid label="MBOOLEAN"]
  2 -> 20 [style=solid label="CVBOOLEAN"]
  2 -> 21 [style=solid label="CMBOOLEAN"]
  2 -> 22 [style=solid label="NEWLINE"]
  2 -> 23 [style=solid label="PRINT"]
  2 -> 24 [style=solid label="IF"]
  2 -> 25 [style=solid label="FORR"]
  2 -> 26 [style=solid label="MOVE"]
  2 -> 27 [style=solid label="RIGHT"]
  2 -> 28 [style=solid label="LEFT"]
  2 -> 29 [style=solid label="ROBEX"]
  2 -> 30 [style=solid label="WALL"]
  2 -> 31 [style=solid label="'-'"]
  2 -> 32 [style=solid label="'!'"]
  2 -> 33 [style=solid label="'('"]
  2 -> 34 [style=solid label="'['"]
  2 -> 35 [style=solid label="'{'"]
  2 -> 36 [style=dashed label="stmts"]
  2 -> 37 [style=dashed label="stmt"]
  2 -> 38 [style=dashed label="robotactions"]
  2 -> 39 [style=dashed label="robotmove"]
  2 -> 40 [style=dashed label="robotright"]
  2 -> 41 [style=dashed label="robotleft"]
  2 -> 42 [style=dashed label="robotwall"]
  2 -> 43 [style=dashed label="robotexit"]
  2 -> 44 [style=dashed label="iff"]
  2 -> 45 [style=dashed label="forr"]
  2 -> 46 [style=dashed label="function_head"]
  2 -> 47 [style=dashed label="function"]
  2 -> 48 [style=dashed label="callfunction"]
  2 -> 49 [style=dashed label="matrix"]
  2 -> 50 [style=dashed label="vector"]
  2 -> 51 [style=dashed label="vmdeclaration"]
  2 -> 52 [style=dashed label="declaration"]
  2 -> 53 [style=dashed label="assignment"]
  2 -> 54 [style=dashed label="print"]
  2 -> 55 [style=dashed label="expr"]
  2 -> 56 [style=dashed label="type"]
  2 -> 57 [style=dashed label="const"]
  2 -> "2R1" [label="[$end]", style=solid]
 "2R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  3 [label="State 3\n\l  0 $accept: program $end .\l"]
  3 -> "3R0" [style=solid]
 "3R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  4 [label="State 4\n\l  3 func: func error .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']\l  8 stmts: error .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']\l 23 stmt: error . NEWLINE\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 56 function_head: error .  [B]\l 69 callfunction: error . '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 83       | error . matrix\l 84       | . error vector\l 84       | error . vector\l 85       | . error expr\l 85       | error . expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 98       | error . vector\l 99       | . error expr\l 99       | error . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l136     | error . expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  4 -> 58 [style=dotted]
  4 -> 5 [style=solid label="BOOL"]
  4 -> 6 [style=solid label="INTEGER"]
  4 -> 59 [style=solid label="VARIABLE"]
  4 -> 60 [style=solid label="VVARIABLE"]
  4 -> 61 [style=solid label="MVARIABLE"]
  4 -> 62 [style=solid label="NEWLINE"]
  4 -> 26 [style=solid label="MOVE"]
  4 -> 29 [style=solid label="ROBEX"]
  4 -> 30 [style=solid label="WALL"]
  4 -> 31 [style=solid label="'-'"]
  4 -> 32 [style=solid label="'!'"]
  4 -> 63 [style=solid label="'('"]
  4 -> 64 [style=solid label="'['"]
  4 -> 35 [style=solid label="'{'"]
  4 -> 39 [style=dashed label="robotmove"]
  4 -> 42 [style=dashed label="robotwall"]
  4 -> 43 [style=dashed label="robotexit"]
  4 -> 65 [style=dashed label="matrix"]
  4 -> 66 [style=dashed label="vector"]
  4 -> 67 [style=dashed label="expr"]
  4 -> 57 [style=dashed label="const"]
  4 -> "4R3d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, NEWLINE, MOVE, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "4R3d" [label="R3", fillcolor=5, shape=diamond, style=filled]
  4 -> "4R3" [label="[$end, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, PRINT, IF, FORR, RIGHT, LEFT]", style=solid]
 "4R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  4 -> "4R8d" [label="[$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "4R8d" [label="R8", fillcolor=5, shape=diamond, style=filled]
  4 -> "4R56" [label="[B]", style=solid]
 "4R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  5 [label="State 5\n\l150 const: BOOL .\l"]
  5 -> "5R150" [style=solid]
 "5R150" [label="R150", fillcolor=3, shape=diamond, style=filled]
  6 [label="State 6\n\l149 const: INTEGER .\l"]
  6 -> "6R149" [style=solid]
 "6R149" [label="R149", fillcolor=3, shape=diamond, style=filled]
  7 [label="State 7\n\l114 assignment: VARIABLE . ASSIGN expr\l124 expr: VARIABLE .  [NEWLINE, CONJUNCTION, '<', '>', '+', '-', '/', ')']\l"]
  7 -> 68 [style=solid label="ASSIGN"]
  7 -> "7R124" [style=solid]
 "7R124" [label="R124", fillcolor=3, shape=diamond, style=filled]
  8 [label="State 8\n\l 90 vector: VVARIABLE . '(' vector ',' '[' ']' ')'\l 93       | VVARIABLE .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l103 vmdeclaration: VVARIABLE . '(' expr ')' ASSIGN expr\l104              | VVARIABLE . '(' vector ',' '[' ']' ')' ASSIGN vector\l115 assignment: VVARIABLE . ASSIGN vector\l134 expr: VVARIABLE . '(' expr ')'\l"]
  8 -> 69 [style=solid label="ASSIGN"]
  8 -> 70 [style=solid label="'('"]
  8 -> "8R93" [style=solid]
 "8R93" [label="R93", fillcolor=3, shape=diamond, style=filled]
  9 [label="State 9\n\l 71 matrix: MVARIABLE . '(' vector ',' '[' ']' ')'\l 72       | MVARIABLE . '(' '[' ']' ',' vector ')'\l 73       | MVARIABLE . '(' matrix ')'\l 74       | MVARIABLE .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l 91 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 92       | MVARIABLE . '(' '[' ']' ',' expr ')'\l105 vmdeclaration: MVARIABLE . '(' expr ',' expr ')' ASSIGN expr\l106              | MVARIABLE . '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | MVARIABLE . '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | MVARIABLE . '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | MVARIABLE . '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | MVARIABLE . '(' matrix ')' ASSIGN matrix\l116 assignment: MVARIABLE . ASSIGN matrix\l135 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  9 -> 71 [style=solid label="ASSIGN"]
  9 -> 72 [style=solid label="'('"]
  9 -> "9R74" [style=solid]
 "9R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  10 [label="State 10\n\l138 type: CINT .\l"]
  10 -> "10R138" [style=solid]
 "10R138" [label="R138", fillcolor=3, shape=diamond, style=filled]
  11 [label="State 11\n\l139 type: VINT .\l"]
  11 -> "11R139" [style=solid]
 "11R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
  12 [label="State 12\n\l140 type: MINT .\l"]
  12 -> "12R140" [style=solid]
 "12R140" [label="R140", fillcolor=3, shape=diamond, style=filled]
  13 [label="State 13\n\l137 type: INT .\l"]
  13 -> "13R137" [style=solid]
 "13R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
  14 [label="State 14\n\l141 type: CVINT .\l"]
  14 -> "14R141" [style=solid]
 "14R141" [label="R141", fillcolor=3, shape=diamond, style=filled]
  15 [label="State 15\n\l142 type: CMINT .\l"]
  15 -> "15R142" [style=solid]
 "15R142" [label="R142", fillcolor=3, shape=diamond, style=filled]
  16 [label="State 16\n\l143 type: BOOLEAN .\l"]
  16 -> "16R143" [style=solid]
 "16R143" [label="R143", fillcolor=3, shape=diamond, style=filled]
  17 [label="State 17\n\l144 type: CBOOLEAN .\l"]
  17 -> "17R144" [style=solid]
 "17R144" [label="R144", fillcolor=3, shape=diamond, style=filled]
  18 [label="State 18\n\l145 type: VBOOLEAN .\l"]
  18 -> "18R145" [style=solid]
 "18R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  19 [label="State 19\n\l146 type: MBOOLEAN .\l"]
  19 -> "19R146" [style=solid]
 "19R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  20 [label="State 20\n\l147 type: CVBOOLEAN .\l"]
  20 -> "20R147" [style=solid]
 "20R147" [label="R147", fillcolor=3, shape=diamond, style=filled]
  21 [label="State 21\n\l148 type: CMBOOLEAN .\l"]
  21 -> "21R148" [style=solid]
 "21R148" [label="R148", fillcolor=3, shape=diamond, style=filled]
  22 [label="State 22\n\l  9 stmt: NEWLINE .\l"]
  22 -> "22R9" [style=solid]
 "22R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  23 [label="State 23\n\l117 print: PRINT . '(' expr ')'\l118      | PRINT . '(' VVARIABLE ')'\l119      | PRINT . '(' MVARIABLE ')'\l"]
  23 -> 73 [style=solid label="'('"]
  24 [label="State 24\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: IF . expr NEWLINE begif stmts endif\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  24 -> 74 [style=dotted]
  24 -> 5 [style=solid label="BOOL"]
  24 -> 6 [style=solid label="INTEGER"]
  24 -> 59 [style=solid label="VARIABLE"]
  24 -> 75 [style=solid label="VVARIABLE"]
  24 -> 76 [style=solid label="MVARIABLE"]
  24 -> 26 [style=solid label="MOVE"]
  24 -> 29 [style=solid label="ROBEX"]
  24 -> 30 [style=solid label="WALL"]
  24 -> 31 [style=solid label="'-'"]
  24 -> 32 [style=solid label="'!'"]
  24 -> 63 [style=solid label="'('"]
  24 -> 39 [style=dashed label="robotmove"]
  24 -> 42 [style=dashed label="robotwall"]
  24 -> 43 [style=dashed label="robotexit"]
  24 -> 77 [style=dashed label="expr"]
  24 -> 57 [style=dashed label="const"]
  25 [label="State 25\n\l 40 forr: FORR . declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l"]
  25 -> 10 [style=solid label="CINT"]
  25 -> 11 [style=solid label="VINT"]
  25 -> 12 [style=solid label="MINT"]
  25 -> 13 [style=solid label="INT"]
  25 -> 14 [style=solid label="CVINT"]
  25 -> 15 [style=solid label="CMINT"]
  25 -> 16 [style=solid label="BOOLEAN"]
  25 -> 17 [style=solid label="CBOOLEAN"]
  25 -> 18 [style=solid label="VBOOLEAN"]
  25 -> 19 [style=solid label="MBOOLEAN"]
  25 -> 20 [style=solid label="CVBOOLEAN"]
  25 -> 21 [style=solid label="CMBOOLEAN"]
  25 -> 78 [style=dashed label="declaration"]
  25 -> 56 [style=dashed label="type"]
  26 [label="State 26\n\l 26 robotmove: MOVE . '(' expr ')'\l"]
  26 -> 79 [style=solid label="'('"]
  27 [label="State 27\n\l 27 robotright: RIGHT .\l"]
  27 -> "27R27" [style=solid]
 "27R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  28 [label="State 28\n\l 28 robotleft: LEFT .\l"]
  28 -> "28R28" [style=solid]
 "28R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  29 [label="State 29\n\l 30 robotexit: ROBEX .\l"]
  29 -> "29R30" [style=solid]
 "29R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  30 [label="State 30\n\l 29 robotwall: WALL .\l"]
  30 -> "30R29" [style=solid]
 "30R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  31 [label="State 31\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l125     | '-' . expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  31 -> 74 [style=dotted]
  31 -> 5 [style=solid label="BOOL"]
  31 -> 6 [style=solid label="INTEGER"]
  31 -> 59 [style=solid label="VARIABLE"]
  31 -> 75 [style=solid label="VVARIABLE"]
  31 -> 76 [style=solid label="MVARIABLE"]
  31 -> 26 [style=solid label="MOVE"]
  31 -> 29 [style=solid label="ROBEX"]
  31 -> 30 [style=solid label="WALL"]
  31 -> 31 [style=solid label="'-'"]
  31 -> 32 [style=solid label="'!'"]
  31 -> 63 [style=solid label="'('"]
  31 -> 39 [style=dashed label="robotmove"]
  31 -> 42 [style=dashed label="robotwall"]
  31 -> 43 [style=dashed label="robotexit"]
  31 -> 80 [style=dashed label="expr"]
  31 -> 57 [style=dashed label="const"]
  32 [label="State 32\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l131     | '!' . expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  32 -> 74 [style=dotted]
  32 -> 5 [style=solid label="BOOL"]
  32 -> 6 [style=solid label="INTEGER"]
  32 -> 59 [style=solid label="VARIABLE"]
  32 -> 75 [style=solid label="VVARIABLE"]
  32 -> 76 [style=solid label="MVARIABLE"]
  32 -> 26 [style=solid label="MOVE"]
  32 -> 29 [style=solid label="ROBEX"]
  32 -> 30 [style=solid label="WALL"]
  32 -> 31 [style=solid label="'-'"]
  32 -> 32 [style=solid label="'!'"]
  32 -> 63 [style=solid label="'('"]
  32 -> 39 [style=dashed label="robotmove"]
  32 -> 42 [style=dashed label="robotwall"]
  32 -> 43 [style=dashed label="robotexit"]
  32 -> 81 [style=dashed label="expr"]
  32 -> 57 [style=dashed label="const"]
  33 [label="State 33\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 22     | '(' . stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 41 return_func: . type VAR\l 42            | . return_func ',' type VAR\l 43            | . return_func error\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 68 callfunction: . '(' return_func ')' DECLARE FVARIABLE '[' callfunc_args ']'\l 68             | '(' . return_func ')' DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l133     | '(' . expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  33 -> 82 [style=dotted]
  33 -> 5 [style=solid label="BOOL"]
  33 -> 6 [style=solid label="INTEGER"]
  33 -> 7 [style=solid label="VARIABLE"]
  33 -> 8 [style=solid label="VVARIABLE"]
  33 -> 9 [style=solid label="MVARIABLE"]
  33 -> 10 [style=solid label="CINT"]
  33 -> 11 [style=solid label="VINT"]
  33 -> 12 [style=solid label="MINT"]
  33 -> 13 [style=solid label="INT"]
  33 -> 14 [style=solid label="CVINT"]
  33 -> 15 [style=solid label="CMINT"]
  33 -> 16 [style=solid label="BOOLEAN"]
  33 -> 17 [style=solid label="CBOOLEAN"]
  33 -> 18 [style=solid label="VBOOLEAN"]
  33 -> 19 [style=solid label="MBOOLEAN"]
  33 -> 20 [style=solid label="CVBOOLEAN"]
  33 -> 21 [style=solid label="CMBOOLEAN"]
  33 -> 22 [style=solid label="NEWLINE"]
  33 -> 23 [style=solid label="PRINT"]
  33 -> 24 [style=solid label="IF"]
  33 -> 25 [style=solid label="FORR"]
  33 -> 26 [style=solid label="MOVE"]
  33 -> 27 [style=solid label="RIGHT"]
  33 -> 28 [style=solid label="LEFT"]
  33 -> 29 [style=solid label="ROBEX"]
  33 -> 30 [style=solid label="WALL"]
  33 -> 31 [style=solid label="'-'"]
  33 -> 32 [style=solid label="'!'"]
  33 -> 33 [style=solid label="'('"]
  33 -> 34 [style=solid label="'['"]
  33 -> 35 [style=solid label="'{'"]
  33 -> 83 [style=dashed label="stmts"]
  33 -> 37 [style=dashed label="stmt"]
  33 -> 38 [style=dashed label="robotactions"]
  33 -> 39 [style=dashed label="robotmove"]
  33 -> 40 [style=dashed label="robotright"]
  33 -> 41 [style=dashed label="robotleft"]
  33 -> 42 [style=dashed label="robotwall"]
  33 -> 43 [style=dashed label="robotexit"]
  33 -> 44 [style=dashed label="iff"]
  33 -> 45 [style=dashed label="forr"]
  33 -> 84 [style=dashed label="return_func"]
  33 -> 46 [style=dashed label="function_head"]
  33 -> 47 [style=dashed label="function"]
  33 -> 48 [style=dashed label="callfunction"]
  33 -> 49 [style=dashed label="matrix"]
  33 -> 50 [style=dashed label="vector"]
  33 -> 51 [style=dashed label="vmdeclaration"]
  33 -> 52 [style=dashed label="declaration"]
  33 -> 53 [style=dashed label="assignment"]
  33 -> 54 [style=dashed label="print"]
  33 -> 85 [style=dashed label="expr"]
  33 -> 86 [style=dashed label="type"]
  33 -> 57 [style=dashed label="const"]
  34 [label="State 34\n\l 41 return_func: . type VAR\l 42            | . return_func ',' type VAR\l 43            | . return_func error\l 55 function_head: '[' . return_func ']' DECLARE FUNC VAR '(' args_func ')'\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l"]
  34 -> 10 [style=solid label="CINT"]
  34 -> 11 [style=solid label="VINT"]
  34 -> 12 [style=solid label="MINT"]
  34 -> 13 [style=solid label="INT"]
  34 -> 14 [style=solid label="CVINT"]
  34 -> 15 [style=solid label="CMINT"]
  34 -> 16 [style=solid label="BOOLEAN"]
  34 -> 17 [style=solid label="CBOOLEAN"]
  34 -> 18 [style=solid label="VBOOLEAN"]
  34 -> 19 [style=solid label="MBOOLEAN"]
  34 -> 20 [style=solid label="CVBOOLEAN"]
  34 -> 21 [style=solid label="CMBOOLEAN"]
  34 -> 87 [style=dashed label="return_func"]
  34 -> 88 [style=dashed label="type"]
  35 [label="State 35\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 70 matrix: '{' . listexprs '}'\l 86 listexprs: . vector ',' vector\l 87          | . listexprs ',' vector\l 88          | . listexprs error\l 89 vector: . '{' exprs '}'\l 89       | '{' . exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l100 exprs: . expr ',' expr\l101      | . exprs ',' expr\l102      | . exprs error\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  35 -> 89 [style=dotted]
  35 -> 5 [style=solid label="BOOL"]
  35 -> 6 [style=solid label="INTEGER"]
  35 -> 59 [style=solid label="VARIABLE"]
  35 -> 60 [style=solid label="VVARIABLE"]
  35 -> 90 [style=solid label="MVARIABLE"]
  35 -> 26 [style=solid label="MOVE"]
  35 -> 29 [style=solid label="ROBEX"]
  35 -> 30 [style=solid label="WALL"]
  35 -> 31 [style=solid label="'-'"]
  35 -> 32 [style=solid label="'!'"]
  35 -> 63 [style=solid label="'('"]
  35 -> 91 [style=solid label="'{'"]
  35 -> 39 [style=dashed label="robotmove"]
  35 -> 42 [style=dashed label="robotwall"]
  35 -> 43 [style=dashed label="robotexit"]
  35 -> 92 [style=dashed label="listexprs"]
  35 -> 93 [style=dashed label="vector"]
  35 -> 94 [style=dashed label="exprs"]
  35 -> 95 [style=dashed label="expr"]
  35 -> 57 [style=dashed label="const"]
  36 [label="State 36\n\l  2 func: func stmts .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 68 callfunction: . '(' return_func ')' DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  36 -> 96 [style=dotted]
  36 -> 5 [style=solid label="BOOL"]
  36 -> 6 [style=solid label="INTEGER"]
  36 -> 7 [style=solid label="VARIABLE"]
  36 -> 8 [style=solid label="VVARIABLE"]
  36 -> 9 [style=solid label="MVARIABLE"]
  36 -> 10 [style=solid label="CINT"]
  36 -> 11 [style=solid label="VINT"]
  36 -> 12 [style=solid label="MINT"]
  36 -> 13 [style=solid label="INT"]
  36 -> 14 [style=solid label="CVINT"]
  36 -> 15 [style=solid label="CMINT"]
  36 -> 16 [style=solid label="BOOLEAN"]
  36 -> 17 [style=solid label="CBOOLEAN"]
  36 -> 18 [style=solid label="VBOOLEAN"]
  36 -> 19 [style=solid label="MBOOLEAN"]
  36 -> 20 [style=solid label="CVBOOLEAN"]
  36 -> 21 [style=solid label="CMBOOLEAN"]
  36 -> 22 [style=solid label="NEWLINE"]
  36 -> 23 [style=solid label="PRINT"]
  36 -> 24 [style=solid label="IF"]
  36 -> 25 [style=solid label="FORR"]
  36 -> 26 [style=solid label="MOVE"]
  36 -> 27 [style=solid label="RIGHT"]
  36 -> 28 [style=solid label="LEFT"]
  36 -> 29 [style=solid label="ROBEX"]
  36 -> 30 [style=solid label="WALL"]
  36 -> 31 [style=solid label="'-'"]
  36 -> 32 [style=solid label="'!'"]
  36 -> 33 [style=solid label="'('"]
  36 -> 34 [style=solid label="'['"]
  36 -> 35 [style=solid label="'{'"]
  36 -> 97 [style=dashed label="stmt"]
  36 -> 38 [style=dashed label="robotactions"]
  36 -> 39 [style=dashed label="robotmove"]
  36 -> 40 [style=dashed label="robotright"]
  36 -> 41 [style=dashed label="robotleft"]
  36 -> 42 [style=dashed label="robotwall"]
  36 -> 43 [style=dashed label="robotexit"]
  36 -> 44 [style=dashed label="iff"]
  36 -> 45 [style=dashed label="forr"]
  36 -> 46 [style=dashed label="function_head"]
  36 -> 47 [style=dashed label="function"]
  36 -> 48 [style=dashed label="callfunction"]
  36 -> 49 [style=dashed label="matrix"]
  36 -> 50 [style=dashed label="vector"]
  36 -> 51 [style=dashed label="vmdeclaration"]
  36 -> 52 [style=dashed label="declaration"]
  36 -> 53 [style=dashed label="assignment"]
  36 -> 54 [style=dashed label="print"]
  36 -> 55 [style=dashed label="expr"]
  36 -> 56 [style=dashed label="type"]
  36 -> 57 [style=dashed label="const"]
  36 -> "36R2d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "36R2d" [label="R2", fillcolor=5, shape=diamond, style=filled]
  36 -> "36R2" [label="[$end]", style=solid]
 "36R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  37 [label="State 37\n\l  5 stmts: stmt .\l"]
  37 -> "37R5" [style=solid]
 "37R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  38 [label="State 38\n\l 21 stmt: robotactions . NEWLINE\l"]
  38 -> 98 [style=solid label="NEWLINE"]
  39 [label="State 39\n\l122 expr: robotmove .\l"]
  39 -> "39R122" [style=solid]
 "39R122" [label="R122", fillcolor=3, shape=diamond, style=filled]
  40 [label="State 40\n\l 24 robotactions: robotright .\l"]
  40 -> "40R24" [style=solid]
 "40R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  41 [label="State 41\n\l 25 robotactions: robotleft .\l"]
  41 -> "41R25" [style=solid]
 "41R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  42 [label="State 42\n\l123 expr: robotwall .\l"]
  42 -> "42R123" [style=solid]
 "42R123" [label="R123", fillcolor=3, shape=diamond, style=filled]
  43 [label="State 43\n\l121 expr: robotexit .\l"]
  43 -> "43R121" [style=solid]
 "43R121" [label="R121", fillcolor=3, shape=diamond, style=filled]
  44 [label="State 44\n\l 17 stmt: iff . NEWLINE\l"]
  44 -> 99 [style=solid label="NEWLINE"]
  45 [label="State 45\n\l 18 stmt: forr . NEWLINE\l"]
  45 -> 100 [style=solid label="NEWLINE"]
  46 [label="State 46\n\l 57 function: function_head . B NEWLINE stmts E\l"]
  46 -> 101 [style=solid label="B"]
  47 [label="State 47\n\l 19 stmt: function . NEWLINE\l"]
  47 -> 102 [style=solid label="NEWLINE"]
  48 [label="State 48\n\l 20 stmt: callfunction . NEWLINE\l"]
  48 -> 103 [style=solid label="NEWLINE"]
  49 [label="State 49\n\l 12 stmt: matrix . NEWLINE\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l"]
  49 -> 104 [style=solid label="NEWLINE"]
  49 -> 105 [style=solid label="ELEMMULT"]
  49 -> 106 [style=solid label="'\\''"]
  49 -> 107 [style=solid label="LEFTSHIFT"]
  49 -> 108 [style=solid label="RIGHTSHIFT"]
  49 -> 109 [style=solid label="'*'"]
  50 [label="State 50\n\l 11 stmt: vector . NEWLINE\l 80 matrix: vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  50 -> 110 [style=solid label="NEWLINE"]
  50 -> 111 [style=solid label="ELEMMULT"]
  50 -> 112 [style=solid label="'\\''"]
  50 -> 113 [style=solid label="LEFTSHIFT"]
  50 -> 114 [style=solid label="RIGHTSHIFT"]
  51 [label="State 51\n\l 14 stmt: vmdeclaration . NEWLINE\l"]
  51 -> 115 [style=solid label="NEWLINE"]
  52 [label="State 52\n\l 15 stmt: declaration . NEWLINE\l"]
  52 -> 116 [style=solid label="NEWLINE"]
  53 [label="State 53\n\l 16 stmt: assignment . NEWLINE\l"]
  53 -> 117 [style=solid label="NEWLINE"]
  54 [label="State 54\n\l 13 stmt: print . NEWLINE\l"]
  54 -> 118 [style=solid label="NEWLINE"]
  55 [label="State 55\n\l 10 stmt: expr . NEWLINE\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  55 -> 119 [style=solid label="NEWLINE"]
  55 -> 120 [style=solid label="CONJUNCTION"]
  55 -> 121 [style=solid label="'<'"]
  55 -> 122 [style=solid label="'>'"]
  55 -> 123 [style=solid label="'+'"]
  55 -> 124 [style=solid label="'-'"]
  55 -> 125 [style=solid label="'/'"]
  56 [label="State 56\n\l111 declaration: type . VAR DECLARE expr\l112            | type . VAR DECLARE vector\l113            | type . VAR DECLARE matrix\l"]
  56 -> 126 [style=solid label="VAR"]
  57 [label="State 57\n\l120 expr: const .\l"]
  57 -> "57R120" [style=solid]
 "57R120" [label="R120", fillcolor=3, shape=diamond, style=filled]
  58 [label="State 58\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 83       | error . matrix\l 84       | . error vector\l 84       | error . vector\l 85       | . error expr\l 85       | error . expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 98       | error . vector\l 99       | . error expr\l 99       | error . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l136     | error . expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  58 -> 58 [style=dotted]
  58 -> 5 [style=solid label="BOOL"]
  58 -> 6 [style=solid label="INTEGER"]
  58 -> 59 [style=solid label="VARIABLE"]
  58 -> 60 [style=solid label="VVARIABLE"]
  58 -> 61 [style=solid label="MVARIABLE"]
  58 -> 26 [style=solid label="MOVE"]
  58 -> 29 [style=solid label="ROBEX"]
  58 -> 30 [style=solid label="WALL"]
  58 -> 31 [style=solid label="'-'"]
  58 -> 32 [style=solid label="'!'"]
  58 -> 63 [style=solid label="'('"]
  58 -> 35 [style=solid label="'{'"]
  58 -> 39 [style=dashed label="robotmove"]
  58 -> 42 [style=dashed label="robotwall"]
  58 -> 43 [style=dashed label="robotexit"]
  58 -> 65 [style=dashed label="matrix"]
  58 -> 66 [style=dashed label="vector"]
  58 -> 67 [style=dashed label="expr"]
  58 -> 57 [style=dashed label="const"]
  59 [label="State 59\n\l124 expr: VARIABLE .\l"]
  59 -> "59R124" [style=solid]
 "59R124" [label="R124", fillcolor=3, shape=diamond, style=filled]
  60 [label="State 60\n\l 90 vector: VVARIABLE . '(' vector ',' '[' ']' ')'\l 93       | VVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l134 expr: VVARIABLE . '(' expr ')'\l"]
  60 -> 127 [style=solid label="'('"]
  60 -> "60R93" [style=solid]
 "60R93" [label="R93", fillcolor=3, shape=diamond, style=filled]
  61 [label="State 61\n\l 71 matrix: MVARIABLE . '(' vector ',' '[' ']' ')'\l 72       | MVARIABLE . '(' '[' ']' ',' vector ')'\l 73       | MVARIABLE . '(' matrix ')'\l 74       | MVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 91 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 92       | MVARIABLE . '(' '[' ']' ',' expr ')'\l135 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  61 -> 128 [style=solid label="'('"]
  61 -> "61R74" [style=solid]
 "61R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  62 [label="State 62\n\l 23 stmt: error NEWLINE .\l"]
  62 -> "62R23" [style=solid]
 "62R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  63 [label="State 63\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l133     | '(' . expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  63 -> 74 [style=dotted]
  63 -> 5 [style=solid label="BOOL"]
  63 -> 6 [style=solid label="INTEGER"]
  63 -> 59 [style=solid label="VARIABLE"]
  63 -> 75 [style=solid label="VVARIABLE"]
  63 -> 76 [style=solid label="MVARIABLE"]
  63 -> 26 [style=solid label="MOVE"]
  63 -> 29 [style=solid label="ROBEX"]
  63 -> 30 [style=solid label="WALL"]
  63 -> 31 [style=solid label="'-'"]
  63 -> 32 [style=solid label="'!'"]
  63 -> 63 [style=solid label="'('"]
  63 -> 39 [style=dashed label="robotmove"]
  63 -> 42 [style=dashed label="robotwall"]
  63 -> 43 [style=dashed label="robotexit"]
  63 -> 129 [style=dashed label="expr"]
  63 -> 57 [style=dashed label="const"]
  64 [label="State 64\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 58 callfunc_args: . expr\l 59              | . vector\l 60              | . matrix\l 61              | . DFLT\l 62              | . callfunc_args ',' expr\l 63              | . callfunc_args ',' vector\l 64              | . callfunc_args ',' matrix\l 65              | . callfunc_args ',' DFLT\l 66              | . callfunc_args error\l 67              | . error\l 69 callfunction: error '[' . callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  64 -> 130 [style=dotted]
  64 -> 5 [style=solid label="BOOL"]
  64 -> 6 [style=solid label="INTEGER"]
  64 -> 59 [style=solid label="VARIABLE"]
  64 -> 60 [style=solid label="VVARIABLE"]
  64 -> 61 [style=solid label="MVARIABLE"]
  64 -> 26 [style=solid label="MOVE"]
  64 -> 29 [style=solid label="ROBEX"]
  64 -> 30 [style=solid label="WALL"]
  64 -> 131 [style=solid label="DFLT"]
  64 -> 31 [style=solid label="'-'"]
  64 -> 32 [style=solid label="'!'"]
  64 -> 63 [style=solid label="'('"]
  64 -> 35 [style=solid label="'{'"]
  64 -> 39 [style=dashed label="robotmove"]
  64 -> 42 [style=dashed label="robotwall"]
  64 -> 43 [style=dashed label="robotexit"]
  64 -> 132 [style=dashed label="callfunc_args"]
  64 -> 133 [style=dashed label="matrix"]
  64 -> 134 [style=dashed label="vector"]
  64 -> 135 [style=dashed label="expr"]
  64 -> 57 [style=dashed label="const"]
  65 [label="State 65\n\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l 83       | error matrix .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l"]
  65 -> 105 [style=solid label="ELEMMULT"]
  65 -> 106 [style=solid label="'\\''"]
  65 -> 107 [style=solid label="LEFTSHIFT"]
  65 -> 108 [style=solid label="RIGHTSHIFT"]
  65 -> 109 [style=solid label="'*'"]
  65 -> "65R83d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']", style=solid]
 "65R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  65 -> "65R83" [style=solid]
 "65R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  66 [label="State 66\n\l 80 matrix: vector . '\\''\l 84       | error vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l 98       | error vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l"]
  66 -> 111 [style=solid label="ELEMMULT"]
  66 -> 112 [style=solid label="'\\''"]
  66 -> 113 [style=solid label="LEFTSHIFT"]
  66 -> 114 [style=solid label="RIGHTSHIFT"]
  66 -> "66R84d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "66R84d" [label="R84", fillcolor=5, shape=diamond, style=filled]
  66 -> "66R84" [style=solid]
 "66R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
  66 -> "66R98d" [label="[error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']", style=solid]
 "66R98d" [label="R98", fillcolor=5, shape=diamond, style=filled]
  67 [label="State 67\n\l 85 matrix: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 99 vector: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l136     | error expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']']\l"]
  67 -> 120 [style=solid label="CONJUNCTION"]
  67 -> 121 [style=solid label="'<'"]
  67 -> 122 [style=solid label="'>'"]
  67 -> 123 [style=solid label="'+'"]
  67 -> 124 [style=solid label="'-'"]
  67 -> 125 [style=solid label="'/'"]
  67 -> "67R85" [style=solid]
 "67R85" [label="R85", fillcolor=3, shape=diamond, style=filled]
  67 -> "67R99d" [label="[error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']", style=solid]
 "67R99d" [label="R99", fillcolor=5, shape=diamond, style=filled]
  67 -> "67R136d" [label="[error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']']", style=solid]
 "67R136d" [label="R136", fillcolor=5, shape=diamond, style=filled]
  68 [label="State 68\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l114 assignment: VARIABLE ASSIGN . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  68 -> 74 [style=dotted]
  68 -> 5 [style=solid label="BOOL"]
  68 -> 6 [style=solid label="INTEGER"]
  68 -> 59 [style=solid label="VARIABLE"]
  68 -> 75 [style=solid label="VVARIABLE"]
  68 -> 76 [style=solid label="MVARIABLE"]
  68 -> 26 [style=solid label="MOVE"]
  68 -> 29 [style=solid label="ROBEX"]
  68 -> 30 [style=solid label="WALL"]
  68 -> 31 [style=solid label="'-'"]
  68 -> 32 [style=solid label="'!'"]
  68 -> 63 [style=solid label="'('"]
  68 -> 39 [style=dashed label="robotmove"]
  68 -> 42 [style=dashed label="robotwall"]
  68 -> 43 [style=dashed label="robotexit"]
  68 -> 136 [style=dashed label="expr"]
  68 -> 57 [style=dashed label="const"]
  69 [label="State 69\n\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l115 assignment: VVARIABLE ASSIGN . vector\l"]
  69 -> 137 [style=dotted]
  69 -> 138 [style=solid label="VVARIABLE"]
  69 -> 139 [style=solid label="MVARIABLE"]
  69 -> 91 [style=solid label="'{'"]
  69 -> 140 [style=dashed label="vector"]
  70 [label="State 70\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 90       | VVARIABLE '(' . vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: VVARIABLE '(' . expr ')' ASSIGN expr\l104              | VVARIABLE '(' . vector ',' '[' ']' ')' ASSIGN vector\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l134     | VVARIABLE '(' . expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  70 -> 89 [style=dotted]
  70 -> 5 [style=solid label="BOOL"]
  70 -> 6 [style=solid label="INTEGER"]
  70 -> 59 [style=solid label="VARIABLE"]
  70 -> 60 [style=solid label="VVARIABLE"]
  70 -> 90 [style=solid label="MVARIABLE"]
  70 -> 26 [style=solid label="MOVE"]
  70 -> 29 [style=solid label="ROBEX"]
  70 -> 30 [style=solid label="WALL"]
  70 -> 31 [style=solid label="'-'"]
  70 -> 32 [style=solid label="'!'"]
  70 -> 63 [style=solid label="'('"]
  70 -> 91 [style=solid label="'{'"]
  70 -> 39 [style=dashed label="robotmove"]
  70 -> 42 [style=dashed label="robotwall"]
  70 -> 43 [style=dashed label="robotexit"]
  70 -> 141 [style=dashed label="vector"]
  70 -> 142 [style=dashed label="expr"]
  70 -> 57 [style=dashed label="const"]
  71 [label="State 71\n\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l116 assignment: MVARIABLE ASSIGN . matrix\l"]
  71 -> 143 [style=dotted]
  71 -> 138 [style=solid label="VVARIABLE"]
  71 -> 144 [style=solid label="MVARIABLE"]
  71 -> 35 [style=solid label="'{'"]
  71 -> 145 [style=dashed label="matrix"]
  71 -> 146 [style=dashed label="vector"]
  72 [label="State 72\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 71       | MVARIABLE '(' . vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 72       | MVARIABLE '(' . '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 73       | MVARIABLE '(' . matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 91       | MVARIABLE '(' . expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 92       | MVARIABLE '(' . '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l105 vmdeclaration: MVARIABLE '(' . expr ',' expr ')' ASSIGN expr\l106              | MVARIABLE '(' . expr ',' '[' ']' ')' ASSIGN vector\l107              | MVARIABLE '(' . '[' ']' ',' expr ')' ASSIGN vector\l108              | MVARIABLE '(' . vector ',' '[' ']' ')' ASSIGN matrix\l109              | MVARIABLE '(' . '[' ']' ',' vector ')' ASSIGN matrix\l110              | MVARIABLE '(' . matrix ')' ASSIGN matrix\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l135     | MVARIABLE '(' . expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  72 -> 58 [style=dotted]
  72 -> 5 [style=solid label="BOOL"]
  72 -> 6 [style=solid label="INTEGER"]
  72 -> 59 [style=solid label="VARIABLE"]
  72 -> 60 [style=solid label="VVARIABLE"]
  72 -> 61 [style=solid label="MVARIABLE"]
  72 -> 26 [style=solid label="MOVE"]
  72 -> 29 [style=solid label="ROBEX"]
  72 -> 30 [style=solid label="WALL"]
  72 -> 31 [style=solid label="'-'"]
  72 -> 32 [style=solid label="'!'"]
  72 -> 63 [style=solid label="'('"]
  72 -> 147 [style=solid label="'['"]
  72 -> 35 [style=solid label="'{'"]
  72 -> 39 [style=dashed label="robotmove"]
  72 -> 42 [style=dashed label="robotwall"]
  72 -> 43 [style=dashed label="robotexit"]
  72 -> 148 [style=dashed label="matrix"]
  72 -> 149 [style=dashed label="vector"]
  72 -> 150 [style=dashed label="expr"]
  72 -> 57 [style=dashed label="const"]
  73 [label="State 73\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l117 print: PRINT '(' . expr ')'\l118      | PRINT '(' . VVARIABLE ')'\l119      | PRINT '(' . MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  73 -> 74 [style=dotted]
  73 -> 5 [style=solid label="BOOL"]
  73 -> 6 [style=solid label="INTEGER"]
  73 -> 59 [style=solid label="VARIABLE"]
  73 -> 151 [style=solid label="VVARIABLE"]
  73 -> 152 [style=solid label="MVARIABLE"]
  73 -> 26 [style=solid label="MOVE"]
  73 -> 29 [style=solid label="ROBEX"]
  73 -> 30 [style=solid label="WALL"]
  73 -> 31 [style=solid label="'-'"]
  73 -> 32 [style=solid label="'!'"]
  73 -> 63 [style=solid label="'('"]
  73 -> 39 [style=dashed label="robotmove"]
  73 -> 42 [style=dashed label="robotwall"]
  73 -> 43 [style=dashed label="robotexit"]
  73 -> 153 [style=dashed label="expr"]
  73 -> 57 [style=dashed label="const"]
  74 [label="State 74\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l136     | error . expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  74 -> 74 [style=dotted]
  74 -> 5 [style=solid label="BOOL"]
  74 -> 6 [style=solid label="INTEGER"]
  74 -> 59 [style=solid label="VARIABLE"]
  74 -> 75 [style=solid label="VVARIABLE"]
  74 -> 76 [style=solid label="MVARIABLE"]
  74 -> 26 [style=solid label="MOVE"]
  74 -> 29 [style=solid label="ROBEX"]
  74 -> 30 [style=solid label="WALL"]
  74 -> 31 [style=solid label="'-'"]
  74 -> 32 [style=solid label="'!'"]
  74 -> 63 [style=solid label="'('"]
  74 -> 39 [style=dashed label="robotmove"]
  74 -> 42 [style=dashed label="robotwall"]
  74 -> 43 [style=dashed label="robotexit"]
  74 -> 154 [style=dashed label="expr"]
  74 -> 57 [style=dashed label="const"]
  75 [label="State 75\n\l134 expr: VVARIABLE . '(' expr ')'\l"]
  75 -> 155 [style=solid label="'('"]
  76 [label="State 76\n\l135 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  76 -> 156 [style=solid label="'('"]
  77 [label="State 77\n\l 31 iff: IF expr . NEWLINE begif stmts endif\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  77 -> 157 [style=solid label="NEWLINE"]
  77 -> 120 [style=solid label="CONJUNCTION"]
  77 -> 121 [style=solid label="'<'"]
  77 -> 122 [style=solid label="'>'"]
  77 -> 123 [style=solid label="'+'"]
  77 -> 124 [style=solid label="'-'"]
  77 -> 125 [style=solid label="'/'"]
  78 [label="State 78\n\l 40 forr: FORR declaration . DOUBLEDOT expr NEWLINE begfor stmts endfor\l"]
  78 -> 158 [style=solid label="DOUBLEDOT"]
  79 [label="State 79\n\l 26 robotmove: . MOVE '(' expr ')'\l 26          | MOVE '(' . expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  79 -> 74 [style=dotted]
  79 -> 5 [style=solid label="BOOL"]
  79 -> 6 [style=solid label="INTEGER"]
  79 -> 59 [style=solid label="VARIABLE"]
  79 -> 75 [style=solid label="VVARIABLE"]
  79 -> 76 [style=solid label="MVARIABLE"]
  79 -> 26 [style=solid label="MOVE"]
  79 -> 29 [style=solid label="ROBEX"]
  79 -> 30 [style=solid label="WALL"]
  79 -> 31 [style=solid label="'-'"]
  79 -> 32 [style=solid label="'!'"]
  79 -> 63 [style=solid label="'('"]
  79 -> 39 [style=dashed label="robotmove"]
  79 -> 42 [style=dashed label="robotwall"]
  79 -> 43 [style=dashed label="robotexit"]
  79 -> 159 [style=dashed label="expr"]
  79 -> 57 [style=dashed label="const"]
  80 [label="State 80\n\l125 expr: '-' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l126     | expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  80 -> 120 [style=solid label="CONJUNCTION"]
  80 -> "80R125d" [label="[CONJUNCTION]", style=solid]
 "80R125d" [label="R125", fillcolor=5, shape=diamond, style=filled]
  80 -> "80R125" [style=solid]
 "80R125" [label="R125", fillcolor=3, shape=diamond, style=filled]
  81 [label="State 81\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l131     | '!' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l132     | expr . CONJUNCTION expr\l"]
  81 -> 120 [style=solid label="CONJUNCTION"]
  81 -> "81R131d" [label="[CONJUNCTION]", style=solid]
 "81R131d" [label="R131", fillcolor=5, shape=diamond, style=filled]
  81 -> "81R131" [style=solid]
 "81R131" [label="R131", fillcolor=3, shape=diamond, style=filled]
  82 [label="State 82\n\l  8 stmts: error .  [error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, E, MOVE, RIGHT, LEFT, ROBEX, WALL, ENDIF, ENDFOR, '-', '!', '(', ')', '[', '{']\l 23 stmt: error . NEWLINE\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 56 function_head: error .  [B]\l 69 callfunction: error . '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 83       | error . matrix\l 84       | . error vector\l 84       | error . vector\l 85       | . error expr\l 85       | error . expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 98       | error . vector\l 99       | . error expr\l 99       | error . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l136     | error . expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  82 -> 58 [style=dotted]
  82 -> 5 [style=solid label="BOOL"]
  82 -> 6 [style=solid label="INTEGER"]
  82 -> 59 [style=solid label="VARIABLE"]
  82 -> 60 [style=solid label="VVARIABLE"]
  82 -> 61 [style=solid label="MVARIABLE"]
  82 -> 62 [style=solid label="NEWLINE"]
  82 -> 26 [style=solid label="MOVE"]
  82 -> 29 [style=solid label="ROBEX"]
  82 -> 30 [style=solid label="WALL"]
  82 -> 31 [style=solid label="'-'"]
  82 -> 32 [style=solid label="'!'"]
  82 -> 63 [style=solid label="'('"]
  82 -> 64 [style=solid label="'['"]
  82 -> 35 [style=solid label="'{'"]
  82 -> 39 [style=dashed label="robotmove"]
  82 -> 42 [style=dashed label="robotwall"]
  82 -> 43 [style=dashed label="robotexit"]
  82 -> 65 [style=dashed label="matrix"]
  82 -> 66 [style=dashed label="vector"]
  82 -> 67 [style=dashed label="expr"]
  82 -> 57 [style=dashed label="const"]
  82 -> "82R8d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, NEWLINE, MOVE, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "82R8d" [label="R8", fillcolor=5, shape=diamond, style=filled]
  82 -> "82R8" [label="[CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, PRINT, IF, FORR, E, RIGHT, LEFT, ENDIF, ENDFOR, ')']", style=solid]
 "82R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  82 -> "82R56" [label="[B]", style=solid]
 "82R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  83 [label="State 83\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 22     | '(' stmts . ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 68 callfunction: . '(' return_func ')' DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  83 -> 96 [style=dotted]
  83 -> 5 [style=solid label="BOOL"]
  83 -> 6 [style=solid label="INTEGER"]
  83 -> 7 [style=solid label="VARIABLE"]
  83 -> 8 [style=solid label="VVARIABLE"]
  83 -> 9 [style=solid label="MVARIABLE"]
  83 -> 10 [style=solid label="CINT"]
  83 -> 11 [style=solid label="VINT"]
  83 -> 12 [style=solid label="MINT"]
  83 -> 13 [style=solid label="INT"]
  83 -> 14 [style=solid label="CVINT"]
  83 -> 15 [style=solid label="CMINT"]
  83 -> 16 [style=solid label="BOOLEAN"]
  83 -> 17 [style=solid label="CBOOLEAN"]
  83 -> 18 [style=solid label="VBOOLEAN"]
  83 -> 19 [style=solid label="MBOOLEAN"]
  83 -> 20 [style=solid label="CVBOOLEAN"]
  83 -> 21 [style=solid label="CMBOOLEAN"]
  83 -> 22 [style=solid label="NEWLINE"]
  83 -> 23 [style=solid label="PRINT"]
  83 -> 24 [style=solid label="IF"]
  83 -> 25 [style=solid label="FORR"]
  83 -> 26 [style=solid label="MOVE"]
  83 -> 27 [style=solid label="RIGHT"]
  83 -> 28 [style=solid label="LEFT"]
  83 -> 29 [style=solid label="ROBEX"]
  83 -> 30 [style=solid label="WALL"]
  83 -> 31 [style=solid label="'-'"]
  83 -> 32 [style=solid label="'!'"]
  83 -> 33 [style=solid label="'('"]
  83 -> 160 [style=solid label="')'"]
  83 -> 34 [style=solid label="'['"]
  83 -> 35 [style=solid label="'{'"]
  83 -> 97 [style=dashed label="stmt"]
  83 -> 38 [style=dashed label="robotactions"]
  83 -> 39 [style=dashed label="robotmove"]
  83 -> 40 [style=dashed label="robotright"]
  83 -> 41 [style=dashed label="robotleft"]
  83 -> 42 [style=dashed label="robotwall"]
  83 -> 43 [style=dashed label="robotexit"]
  83 -> 44 [style=dashed label="iff"]
  83 -> 45 [style=dashed label="forr"]
  83 -> 46 [style=dashed label="function_head"]
  83 -> 47 [style=dashed label="function"]
  83 -> 48 [style=dashed label="callfunction"]
  83 -> 49 [style=dashed label="matrix"]
  83 -> 50 [style=dashed label="vector"]
  83 -> 51 [style=dashed label="vmdeclaration"]
  83 -> 52 [style=dashed label="declaration"]
  83 -> 53 [style=dashed label="assignment"]
  83 -> 54 [style=dashed label="print"]
  83 -> 55 [style=dashed label="expr"]
  83 -> 56 [style=dashed label="type"]
  83 -> 57 [style=dashed label="const"]
  84 [label="State 84\n\l 42 return_func: return_func . ',' type VAR\l 43            | return_func . error\l 68 callfunction: '(' return_func . ')' DECLARE FVARIABLE '[' callfunc_args ']'\l"]
  84 -> 161 [style=dotted]
  84 -> 162 [style=solid label="','"]
  84 -> 163 [style=solid label="')'"]
  85 [label="State 85\n\l 10 stmt: expr . NEWLINE\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l133     | '(' expr . ')'\l"]
  85 -> 119 [style=solid label="NEWLINE"]
  85 -> 120 [style=solid label="CONJUNCTION"]
  85 -> 121 [style=solid label="'<'"]
  85 -> 122 [style=solid label="'>'"]
  85 -> 123 [style=solid label="'+'"]
  85 -> 124 [style=solid label="'-'"]
  85 -> 125 [style=solid label="'/'"]
  85 -> 164 [style=solid label="')'"]
  86 [label="State 86\n\l 41 return_func: type . VAR\l111 declaration: type . VAR DECLARE expr\l112            | type . VAR DECLARE vector\l113            | type . VAR DECLARE matrix\l"]
  86 -> 165 [style=solid label="VAR"]
  87 [label="State 87\n\l 42 return_func: return_func . ',' type VAR\l 43            | return_func . error\l 55 function_head: '[' return_func . ']' DECLARE FUNC VAR '(' args_func ')'\l"]
  87 -> 161 [style=dotted]
  87 -> 162 [style=solid label="','"]
  87 -> 166 [style=solid label="']'"]
  88 [label="State 88\n\l 41 return_func: type . VAR\l"]
  88 -> 167 [style=solid label="VAR"]
  89 [label="State 89\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 98       | error . vector\l 99       | . error expr\l 99       | error . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l136     | error . expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  89 -> 89 [style=dotted]
  89 -> 5 [style=solid label="BOOL"]
  89 -> 6 [style=solid label="INTEGER"]
  89 -> 59 [style=solid label="VARIABLE"]
  89 -> 60 [style=solid label="VVARIABLE"]
  89 -> 90 [style=solid label="MVARIABLE"]
  89 -> 26 [style=solid label="MOVE"]
  89 -> 29 [style=solid label="ROBEX"]
  89 -> 30 [style=solid label="WALL"]
  89 -> 31 [style=solid label="'-'"]
  89 -> 32 [style=solid label="'!'"]
  89 -> 63 [style=solid label="'('"]
  89 -> 91 [style=solid label="'{'"]
  89 -> 39 [style=dashed label="robotmove"]
  89 -> 42 [style=dashed label="robotwall"]
  89 -> 43 [style=dashed label="robotexit"]
  89 -> 168 [style=dashed label="vector"]
  89 -> 169 [style=dashed label="expr"]
  89 -> 57 [style=dashed label="const"]
  90 [label="State 90\n\l 91 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 92       | MVARIABLE . '(' '[' ']' ',' expr ')'\l135 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  90 -> 170 [style=solid label="'('"]
  91 [label="State 91\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 89 vector: '{' . exprs '}'\l100 exprs: . expr ',' expr\l101      | . exprs ',' expr\l102      | . exprs error\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  91 -> 74 [style=dotted]
  91 -> 5 [style=solid label="BOOL"]
  91 -> 6 [style=solid label="INTEGER"]
  91 -> 59 [style=solid label="VARIABLE"]
  91 -> 75 [style=solid label="VVARIABLE"]
  91 -> 76 [style=solid label="MVARIABLE"]
  91 -> 26 [style=solid label="MOVE"]
  91 -> 29 [style=solid label="ROBEX"]
  91 -> 30 [style=solid label="WALL"]
  91 -> 31 [style=solid label="'-'"]
  91 -> 32 [style=solid label="'!'"]
  91 -> 63 [style=solid label="'('"]
  91 -> 39 [style=dashed label="robotmove"]
  91 -> 42 [style=dashed label="robotwall"]
  91 -> 43 [style=dashed label="robotexit"]
  91 -> 94 [style=dashed label="exprs"]
  91 -> 95 [style=dashed label="expr"]
  91 -> 57 [style=dashed label="const"]
  92 [label="State 92\n\l 70 matrix: '{' listexprs . '}'\l 87 listexprs: listexprs . ',' vector\l 88          | listexprs . error\l"]
  92 -> 171 [style=dotted]
  92 -> 172 [style=solid label="','"]
  92 -> 173 [style=solid label="'}'"]
  93 [label="State 93\n\l 86 listexprs: vector . ',' vector\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  93 -> 111 [style=solid label="ELEMMULT"]
  93 -> 113 [style=solid label="LEFTSHIFT"]
  93 -> 114 [style=solid label="RIGHTSHIFT"]
  93 -> 174 [style=solid label="','"]
  94 [label="State 94\n\l 89 vector: '{' exprs . '}'\l101 exprs: exprs . ',' expr\l102      | exprs . error\l"]
  94 -> 175 [style=dotted]
  94 -> 176 [style=solid label="','"]
  94 -> 177 [style=solid label="'}'"]
  95 [label="State 95\n\l100 exprs: expr . ',' expr\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  95 -> 120 [style=solid label="CONJUNCTION"]
  95 -> 178 [style=solid label="','"]
  95 -> 121 [style=solid label="'<'"]
  95 -> 122 [style=solid label="'>'"]
  95 -> 123 [style=solid label="'+'"]
  95 -> 124 [style=solid label="'-'"]
  95 -> 125 [style=solid label="'/'"]
  96 [label="State 96\n\l  7 stmts: stmts error .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, E, MOVE, RIGHT, LEFT, ROBEX, WALL, ENDIF, ENDFOR, '-', '!', '(', ')', '[', '{']\l 23 stmt: error . NEWLINE\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 56 function_head: error .  [B]\l 69 callfunction: error . '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 83       | error . matrix\l 84       | . error vector\l 84       | error . vector\l 85       | . error expr\l 85       | error . expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 98       | error . vector\l 99       | . error expr\l 99       | error . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l136     | error . expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  96 -> 58 [style=dotted]
  96 -> 5 [style=solid label="BOOL"]
  96 -> 6 [style=solid label="INTEGER"]
  96 -> 59 [style=solid label="VARIABLE"]
  96 -> 60 [style=solid label="VVARIABLE"]
  96 -> 61 [style=solid label="MVARIABLE"]
  96 -> 62 [style=solid label="NEWLINE"]
  96 -> 26 [style=solid label="MOVE"]
  96 -> 29 [style=solid label="ROBEX"]
  96 -> 30 [style=solid label="WALL"]
  96 -> 31 [style=solid label="'-'"]
  96 -> 32 [style=solid label="'!'"]
  96 -> 63 [style=solid label="'('"]
  96 -> 64 [style=solid label="'['"]
  96 -> 35 [style=solid label="'{'"]
  96 -> 39 [style=dashed label="robotmove"]
  96 -> 42 [style=dashed label="robotwall"]
  96 -> 43 [style=dashed label="robotexit"]
  96 -> 65 [style=dashed label="matrix"]
  96 -> 66 [style=dashed label="vector"]
  96 -> 67 [style=dashed label="expr"]
  96 -> 57 [style=dashed label="const"]
  96 -> "96R7d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, NEWLINE, MOVE, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "96R7d" [label="R7", fillcolor=5, shape=diamond, style=filled]
  96 -> "96R7" [label="[$end, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, PRINT, IF, FORR, E, RIGHT, LEFT, ENDIF, ENDFOR, ')']", style=solid]
 "96R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  96 -> "96R56" [label="[B]", style=solid]
 "96R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  97 [label="State 97\n\l  6 stmts: stmts stmt .\l"]
  97 -> "97R6" [style=solid]
 "97R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  98 [label="State 98\n\l 21 stmt: robotactions NEWLINE .\l"]
  98 -> "98R21" [style=solid]
 "98R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  99 [label="State 99\n\l 17 stmt: iff NEWLINE .\l"]
  99 -> "99R17" [style=solid]
 "99R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  100 [label="State 100\n\l 18 stmt: forr NEWLINE .\l"]
  100 -> "100R18" [style=solid]
 "100R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  101 [label="State 101\n\l 57 function: function_head B . NEWLINE stmts E\l"]
  101 -> 179 [style=solid label="NEWLINE"]
  102 [label="State 102\n\l 19 stmt: function NEWLINE .\l"]
  102 -> "102R19" [style=solid]
 "102R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  103 [label="State 103\n\l 20 stmt: callfunction NEWLINE .\l"]
  103 -> "103R20" [style=solid]
 "103R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  104 [label="State 104\n\l 12 stmt: matrix NEWLINE .\l"]
  104 -> "104R12" [style=solid]
 "104R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  105 [label="State 105\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 76       | matrix ELEMMULT . matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 81       | matrix ELEMMULT . vector\l 82       | . matrix ELEMMULT expr\l 82       | matrix ELEMMULT . expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  105 -> 58 [style=dotted]
  105 -> 5 [style=solid label="BOOL"]
  105 -> 6 [style=solid label="INTEGER"]
  105 -> 59 [style=solid label="VARIABLE"]
  105 -> 60 [style=solid label="VVARIABLE"]
  105 -> 61 [style=solid label="MVARIABLE"]
  105 -> 26 [style=solid label="MOVE"]
  105 -> 29 [style=solid label="ROBEX"]
  105 -> 30 [style=solid label="WALL"]
  105 -> 31 [style=solid label="'-'"]
  105 -> 32 [style=solid label="'!'"]
  105 -> 63 [style=solid label="'('"]
  105 -> 35 [style=solid label="'{'"]
  105 -> 39 [style=dashed label="robotmove"]
  105 -> 42 [style=dashed label="robotwall"]
  105 -> 43 [style=dashed label="robotexit"]
  105 -> 180 [style=dashed label="matrix"]
  105 -> 181 [style=dashed label="vector"]
  105 -> 182 [style=dashed label="expr"]
  105 -> 57 [style=dashed label="const"]
  106 [label="State 106\n\l 77 matrix: matrix '\\'' .\l"]
  106 -> "106R77" [style=solid]
 "106R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  107 [label="State 107\n\l 79 matrix: matrix LEFTSHIFT .\l"]
  107 -> "107R79" [style=solid]
 "107R79" [label="R79", fillcolor=3, shape=diamond, style=filled]
  108 [label="State 108\n\l 78 matrix: matrix RIGHTSHIFT .\l"]
  108 -> "108R78" [style=solid]
 "108R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
  109 [label="State 109\n\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 75       | matrix '*' . matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l"]
  109 -> 143 [style=dotted]
  109 -> 138 [style=solid label="VVARIABLE"]
  109 -> 144 [style=solid label="MVARIABLE"]
  109 -> 35 [style=solid label="'{'"]
  109 -> 183 [style=dashed label="matrix"]
  109 -> 146 [style=dashed label="vector"]
  110 [label="State 110\n\l 11 stmt: vector NEWLINE .\l"]
  110 -> "110R11" [style=solid]
 "110R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  111 [label="State 111\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 94       | vector ELEMMULT . vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 97       | vector ELEMMULT . expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  111 -> 89 [style=dotted]
  111 -> 5 [style=solid label="BOOL"]
  111 -> 6 [style=solid label="INTEGER"]
  111 -> 59 [style=solid label="VARIABLE"]
  111 -> 60 [style=solid label="VVARIABLE"]
  111 -> 90 [style=solid label="MVARIABLE"]
  111 -> 26 [style=solid label="MOVE"]
  111 -> 29 [style=solid label="ROBEX"]
  111 -> 30 [style=solid label="WALL"]
  111 -> 31 [style=solid label="'-'"]
  111 -> 32 [style=solid label="'!'"]
  111 -> 63 [style=solid label="'('"]
  111 -> 91 [style=solid label="'{'"]
  111 -> 39 [style=dashed label="robotmove"]
  111 -> 42 [style=dashed label="robotwall"]
  111 -> 43 [style=dashed label="robotexit"]
  111 -> 184 [style=dashed label="vector"]
  111 -> 185 [style=dashed label="expr"]
  111 -> 57 [style=dashed label="const"]
  112 [label="State 112\n\l 80 matrix: vector '\\'' .\l"]
  112 -> "112R80" [style=solid]
 "112R80" [label="R80", fillcolor=3, shape=diamond, style=filled]
  113 [label="State 113\n\l 96 vector: vector LEFTSHIFT .\l"]
  113 -> "113R96" [style=solid]
 "113R96" [label="R96", fillcolor=3, shape=diamond, style=filled]
  114 [label="State 114\n\l 95 vector: vector RIGHTSHIFT .\l"]
  114 -> "114R95" [style=solid]
 "114R95" [label="R95", fillcolor=3, shape=diamond, style=filled]
  115 [label="State 115\n\l 14 stmt: vmdeclaration NEWLINE .\l"]
  115 -> "115R14" [style=solid]
 "115R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  116 [label="State 116\n\l 15 stmt: declaration NEWLINE .\l"]
  116 -> "116R15" [style=solid]
 "116R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  117 [label="State 117\n\l 16 stmt: assignment NEWLINE .\l"]
  117 -> "117R16" [style=solid]
 "117R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  118 [label="State 118\n\l 13 stmt: print NEWLINE .\l"]
  118 -> "118R13" [style=solid]
 "118R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  119 [label="State 119\n\l 10 stmt: expr NEWLINE .\l"]
  119 -> "119R10" [style=solid]
 "119R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  120 [label="State 120\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l132     | expr CONJUNCTION . expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  120 -> 74 [style=dotted]
  120 -> 5 [style=solid label="BOOL"]
  120 -> 6 [style=solid label="INTEGER"]
  120 -> 59 [style=solid label="VARIABLE"]
  120 -> 75 [style=solid label="VVARIABLE"]
  120 -> 76 [style=solid label="MVARIABLE"]
  120 -> 26 [style=solid label="MOVE"]
  120 -> 29 [style=solid label="ROBEX"]
  120 -> 30 [style=solid label="WALL"]
  120 -> 31 [style=solid label="'-'"]
  120 -> 32 [style=solid label="'!'"]
  120 -> 63 [style=solid label="'('"]
  120 -> 39 [style=dashed label="robotmove"]
  120 -> 42 [style=dashed label="robotwall"]
  120 -> 43 [style=dashed label="robotexit"]
  120 -> 186 [style=dashed label="expr"]
  120 -> 57 [style=dashed label="const"]
  121 [label="State 121\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l129     | expr '<' . expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  121 -> 74 [style=dotted]
  121 -> 5 [style=solid label="BOOL"]
  121 -> 6 [style=solid label="INTEGER"]
  121 -> 59 [style=solid label="VARIABLE"]
  121 -> 75 [style=solid label="VVARIABLE"]
  121 -> 76 [style=solid label="MVARIABLE"]
  121 -> 26 [style=solid label="MOVE"]
  121 -> 29 [style=solid label="ROBEX"]
  121 -> 30 [style=solid label="WALL"]
  121 -> 31 [style=solid label="'-'"]
  121 -> 32 [style=solid label="'!'"]
  121 -> 63 [style=solid label="'('"]
  121 -> 39 [style=dashed label="robotmove"]
  121 -> 42 [style=dashed label="robotwall"]
  121 -> 43 [style=dashed label="robotexit"]
  121 -> 187 [style=dashed label="expr"]
  121 -> 57 [style=dashed label="const"]
  122 [label="State 122\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l130     | expr '>' . expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  122 -> 74 [style=dotted]
  122 -> 5 [style=solid label="BOOL"]
  122 -> 6 [style=solid label="INTEGER"]
  122 -> 59 [style=solid label="VARIABLE"]
  122 -> 75 [style=solid label="VVARIABLE"]
  122 -> 76 [style=solid label="MVARIABLE"]
  122 -> 26 [style=solid label="MOVE"]
  122 -> 29 [style=solid label="ROBEX"]
  122 -> 30 [style=solid label="WALL"]
  122 -> 31 [style=solid label="'-'"]
  122 -> 32 [style=solid label="'!'"]
  122 -> 63 [style=solid label="'('"]
  122 -> 39 [style=dashed label="robotmove"]
  122 -> 42 [style=dashed label="robotwall"]
  122 -> 43 [style=dashed label="robotexit"]
  122 -> 188 [style=dashed label="expr"]
  122 -> 57 [style=dashed label="const"]
  123 [label="State 123\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l126     | expr '+' . expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  123 -> 74 [style=dotted]
  123 -> 5 [style=solid label="BOOL"]
  123 -> 6 [style=solid label="INTEGER"]
  123 -> 59 [style=solid label="VARIABLE"]
  123 -> 75 [style=solid label="VVARIABLE"]
  123 -> 76 [style=solid label="MVARIABLE"]
  123 -> 26 [style=solid label="MOVE"]
  123 -> 29 [style=solid label="ROBEX"]
  123 -> 30 [style=solid label="WALL"]
  123 -> 31 [style=solid label="'-'"]
  123 -> 32 [style=solid label="'!'"]
  123 -> 63 [style=solid label="'('"]
  123 -> 39 [style=dashed label="robotmove"]
  123 -> 42 [style=dashed label="robotwall"]
  123 -> 43 [style=dashed label="robotexit"]
  123 -> 189 [style=dashed label="expr"]
  123 -> 57 [style=dashed label="const"]
  124 [label="State 124\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l127     | expr '-' . expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  124 -> 74 [style=dotted]
  124 -> 5 [style=solid label="BOOL"]
  124 -> 6 [style=solid label="INTEGER"]
  124 -> 59 [style=solid label="VARIABLE"]
  124 -> 75 [style=solid label="VVARIABLE"]
  124 -> 76 [style=solid label="MVARIABLE"]
  124 -> 26 [style=solid label="MOVE"]
  124 -> 29 [style=solid label="ROBEX"]
  124 -> 30 [style=solid label="WALL"]
  124 -> 31 [style=solid label="'-'"]
  124 -> 32 [style=solid label="'!'"]
  124 -> 63 [style=solid label="'('"]
  124 -> 39 [style=dashed label="robotmove"]
  124 -> 42 [style=dashed label="robotwall"]
  124 -> 43 [style=dashed label="robotexit"]
  124 -> 190 [style=dashed label="expr"]
  124 -> 57 [style=dashed label="const"]
  125 [label="State 125\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l128     | expr '/' . expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  125 -> 74 [style=dotted]
  125 -> 5 [style=solid label="BOOL"]
  125 -> 6 [style=solid label="INTEGER"]
  125 -> 59 [style=solid label="VARIABLE"]
  125 -> 75 [style=solid label="VVARIABLE"]
  125 -> 76 [style=solid label="MVARIABLE"]
  125 -> 26 [style=solid label="MOVE"]
  125 -> 29 [style=solid label="ROBEX"]
  125 -> 30 [style=solid label="WALL"]
  125 -> 31 [style=solid label="'-'"]
  125 -> 32 [style=solid label="'!'"]
  125 -> 63 [style=solid label="'('"]
  125 -> 39 [style=dashed label="robotmove"]
  125 -> 42 [style=dashed label="robotwall"]
  125 -> 43 [style=dashed label="robotexit"]
  125 -> 191 [style=dashed label="expr"]
  125 -> 57 [style=dashed label="const"]
  126 [label="State 126\n\l111 declaration: type VAR . DECLARE expr\l112            | type VAR . DECLARE vector\l113            | type VAR . DECLARE matrix\l"]
  126 -> 192 [style=solid label="DECLARE"]
  127 [label="State 127\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 90       | VVARIABLE '(' . vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l134     | VVARIABLE '(' . expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  127 -> 89 [style=dotted]
  127 -> 5 [style=solid label="BOOL"]
  127 -> 6 [style=solid label="INTEGER"]
  127 -> 59 [style=solid label="VARIABLE"]
  127 -> 60 [style=solid label="VVARIABLE"]
  127 -> 90 [style=solid label="MVARIABLE"]
  127 -> 26 [style=solid label="MOVE"]
  127 -> 29 [style=solid label="ROBEX"]
  127 -> 30 [style=solid label="WALL"]
  127 -> 31 [style=solid label="'-'"]
  127 -> 32 [style=solid label="'!'"]
  127 -> 63 [style=solid label="'('"]
  127 -> 91 [style=solid label="'{'"]
  127 -> 39 [style=dashed label="robotmove"]
  127 -> 42 [style=dashed label="robotwall"]
  127 -> 43 [style=dashed label="robotexit"]
  127 -> 193 [style=dashed label="vector"]
  127 -> 194 [style=dashed label="expr"]
  127 -> 57 [style=dashed label="const"]
  128 [label="State 128\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 71       | MVARIABLE '(' . vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 72       | MVARIABLE '(' . '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 73       | MVARIABLE '(' . matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 91       | MVARIABLE '(' . expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 92       | MVARIABLE '(' . '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l135     | MVARIABLE '(' . expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  128 -> 58 [style=dotted]
  128 -> 5 [style=solid label="BOOL"]
  128 -> 6 [style=solid label="INTEGER"]
  128 -> 59 [style=solid label="VARIABLE"]
  128 -> 60 [style=solid label="VVARIABLE"]
  128 -> 61 [style=solid label="MVARIABLE"]
  128 -> 26 [style=solid label="MOVE"]
  128 -> 29 [style=solid label="ROBEX"]
  128 -> 30 [style=solid label="WALL"]
  128 -> 31 [style=solid label="'-'"]
  128 -> 32 [style=solid label="'!'"]
  128 -> 63 [style=solid label="'('"]
  128 -> 195 [style=solid label="'['"]
  128 -> 35 [style=solid label="'{'"]
  128 -> 39 [style=dashed label="robotmove"]
  128 -> 42 [style=dashed label="robotwall"]
  128 -> 43 [style=dashed label="robotexit"]
  128 -> 196 [style=dashed label="matrix"]
  128 -> 197 [style=dashed label="vector"]
  128 -> 198 [style=dashed label="expr"]
  128 -> 57 [style=dashed label="const"]
  129 [label="State 129\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l133     | '(' expr . ')'\l"]
  129 -> 120 [style=solid label="CONJUNCTION"]
  129 -> 121 [style=solid label="'<'"]
  129 -> 122 [style=solid label="'>'"]
  129 -> 123 [style=solid label="'+'"]
  129 -> 124 [style=solid label="'-'"]
  129 -> 125 [style=solid label="'/'"]
  129 -> 164 [style=solid label="')'"]
  130 [label="State 130\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 67 callfunc_args: error .  [error, ',', ']']\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 83       | error . matrix\l 84       | . error vector\l 84       | error . vector\l 85       | . error expr\l 85       | error . expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 98       | error . vector\l 99       | . error expr\l 99       | error . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l136     | error . expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  130 -> 58 [style=dotted]
  130 -> 5 [style=solid label="BOOL"]
  130 -> 6 [style=solid label="INTEGER"]
  130 -> 59 [style=solid label="VARIABLE"]
  130 -> 60 [style=solid label="VVARIABLE"]
  130 -> 61 [style=solid label="MVARIABLE"]
  130 -> 26 [style=solid label="MOVE"]
  130 -> 29 [style=solid label="ROBEX"]
  130 -> 30 [style=solid label="WALL"]
  130 -> 31 [style=solid label="'-'"]
  130 -> 32 [style=solid label="'!'"]
  130 -> 63 [style=solid label="'('"]
  130 -> 35 [style=solid label="'{'"]
  130 -> 39 [style=dashed label="robotmove"]
  130 -> 42 [style=dashed label="robotwall"]
  130 -> 43 [style=dashed label="robotexit"]
  130 -> 65 [style=dashed label="matrix"]
  130 -> 66 [style=dashed label="vector"]
  130 -> 67 [style=dashed label="expr"]
  130 -> 57 [style=dashed label="const"]
  130 -> "130R67d" [label="[error]", style=solid]
 "130R67d" [label="R67", fillcolor=5, shape=diamond, style=filled]
  130 -> "130R67" [label="[',', ']']", style=solid]
 "130R67" [label="R67", fillcolor=3, shape=diamond, style=filled]
  131 [label="State 131\n\l 61 callfunc_args: DFLT .\l"]
  131 -> "131R61" [style=solid]
 "131R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
  132 [label="State 132\n\l 62 callfunc_args: callfunc_args . ',' expr\l 63              | callfunc_args . ',' vector\l 64              | callfunc_args . ',' matrix\l 65              | callfunc_args . ',' DFLT\l 66              | callfunc_args . error\l 69 callfunction: error '[' callfunc_args . ']'\l"]
  132 -> 199 [style=dotted]
  132 -> 200 [style=solid label="','"]
  132 -> 201 [style=solid label="']'"]
  133 [label="State 133\n\l 60 callfunc_args: matrix .  [error, ',', ']']\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l"]
  133 -> 105 [style=solid label="ELEMMULT"]
  133 -> 106 [style=solid label="'\\''"]
  133 -> 107 [style=solid label="LEFTSHIFT"]
  133 -> 108 [style=solid label="RIGHTSHIFT"]
  133 -> 109 [style=solid label="'*'"]
  133 -> "133R60" [style=solid]
 "133R60" [label="R60", fillcolor=3, shape=diamond, style=filled]
  134 [label="State 134\n\l 59 callfunc_args: vector .  [error, ',', ']']\l 80 matrix: vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  134 -> 111 [style=solid label="ELEMMULT"]
  134 -> 112 [style=solid label="'\\''"]
  134 -> 113 [style=solid label="LEFTSHIFT"]
  134 -> 114 [style=solid label="RIGHTSHIFT"]
  134 -> "134R59" [style=solid]
 "134R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
  135 [label="State 135\n\l 58 callfunc_args: expr .  [error, ',', ']']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  135 -> 120 [style=solid label="CONJUNCTION"]
  135 -> 121 [style=solid label="'<'"]
  135 -> 122 [style=solid label="'>'"]
  135 -> 123 [style=solid label="'+'"]
  135 -> 124 [style=solid label="'-'"]
  135 -> 125 [style=solid label="'/'"]
  135 -> "135R58" [style=solid]
 "135R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  136 [label="State 136\n\l114 assignment: VARIABLE ASSIGN expr .  [NEWLINE]\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  136 -> 120 [style=solid label="CONJUNCTION"]
  136 -> 121 [style=solid label="'<'"]
  136 -> 122 [style=solid label="'>'"]
  136 -> 123 [style=solid label="'+'"]
  136 -> 124 [style=solid label="'-'"]
  136 -> 125 [style=solid label="'/'"]
  136 -> "136R114" [style=solid]
 "136R114" [label="R114", fillcolor=3, shape=diamond, style=filled]
  137 [label="State 137\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 98       | error . vector\l 99       | . error expr\l 99       | error . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  137 -> 89 [style=dotted]
  137 -> 5 [style=solid label="BOOL"]
  137 -> 6 [style=solid label="INTEGER"]
  137 -> 59 [style=solid label="VARIABLE"]
  137 -> 60 [style=solid label="VVARIABLE"]
  137 -> 90 [style=solid label="MVARIABLE"]
  137 -> 26 [style=solid label="MOVE"]
  137 -> 29 [style=solid label="ROBEX"]
  137 -> 30 [style=solid label="WALL"]
  137 -> 31 [style=solid label="'-'"]
  137 -> 32 [style=solid label="'!'"]
  137 -> 63 [style=solid label="'('"]
  137 -> 91 [style=solid label="'{'"]
  137 -> 39 [style=dashed label="robotmove"]
  137 -> 42 [style=dashed label="robotwall"]
  137 -> 43 [style=dashed label="robotexit"]
  137 -> 168 [style=dashed label="vector"]
  137 -> 202 [style=dashed label="expr"]
  137 -> 57 [style=dashed label="const"]
  138 [label="State 138\n\l 90 vector: VVARIABLE . '(' vector ',' '[' ']' ')'\l 93       | VVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', '}']\l"]
  138 -> 203 [style=solid label="'('"]
  138 -> "138R93" [style=solid]
 "138R93" [label="R93", fillcolor=3, shape=diamond, style=filled]
  139 [label="State 139\n\l 91 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 92       | MVARIABLE . '(' '[' ']' ',' expr ')'\l"]
  139 -> 204 [style=solid label="'('"]
  140 [label="State 140\n\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l115 assignment: VVARIABLE ASSIGN vector .  [NEWLINE]\l"]
  140 -> 111 [style=solid label="ELEMMULT"]
  140 -> 113 [style=solid label="LEFTSHIFT"]
  140 -> 114 [style=solid label="RIGHTSHIFT"]
  140 -> "140R115" [style=solid]
 "140R115" [label="R115", fillcolor=3, shape=diamond, style=filled]
  141 [label="State 141\n\l 90 vector: VVARIABLE '(' vector . ',' '[' ']' ')'\l 94       | vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l104 vmdeclaration: VVARIABLE '(' vector . ',' '[' ']' ')' ASSIGN vector\l"]
  141 -> 111 [style=solid label="ELEMMULT"]
  141 -> 113 [style=solid label="LEFTSHIFT"]
  141 -> 114 [style=solid label="RIGHTSHIFT"]
  141 -> 205 [style=solid label="','"]
  142 [label="State 142\n\l103 vmdeclaration: VVARIABLE '(' expr . ')' ASSIGN expr\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l134     | VVARIABLE '(' expr . ')'\l"]
  142 -> 120 [style=solid label="CONJUNCTION"]
  142 -> 121 [style=solid label="'<'"]
  142 -> 122 [style=solid label="'>'"]
  142 -> 123 [style=solid label="'+'"]
  142 -> 124 [style=solid label="'-'"]
  142 -> 125 [style=solid label="'/'"]
  142 -> 206 [style=solid label="')'"]
  143 [label="State 143\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 83       | error . matrix\l 84       | . error vector\l 84       | error . vector\l 85       | . error expr\l 85       | error . expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 98       | error . vector\l 99       | . error expr\l 99       | error . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  143 -> 58 [style=dotted]
  143 -> 5 [style=solid label="BOOL"]
  143 -> 6 [style=solid label="INTEGER"]
  143 -> 59 [style=solid label="VARIABLE"]
  143 -> 60 [style=solid label="VVARIABLE"]
  143 -> 61 [style=solid label="MVARIABLE"]
  143 -> 26 [style=solid label="MOVE"]
  143 -> 29 [style=solid label="ROBEX"]
  143 -> 30 [style=solid label="WALL"]
  143 -> 31 [style=solid label="'-'"]
  143 -> 32 [style=solid label="'!'"]
  143 -> 63 [style=solid label="'('"]
  143 -> 35 [style=solid label="'{'"]
  143 -> 39 [style=dashed label="robotmove"]
  143 -> 42 [style=dashed label="robotwall"]
  143 -> 43 [style=dashed label="robotexit"]
  143 -> 65 [style=dashed label="matrix"]
  143 -> 66 [style=dashed label="vector"]
  143 -> 207 [style=dashed label="expr"]
  143 -> 57 [style=dashed label="const"]
  144 [label="State 144\n\l 71 matrix: MVARIABLE . '(' vector ',' '[' ']' ')'\l 72       | MVARIABLE . '(' '[' ']' ',' vector ')'\l 73       | MVARIABLE . '(' matrix ')'\l 74       | MVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 91 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 92       | MVARIABLE . '(' '[' ']' ',' expr ')'\l"]
  144 -> 208 [style=solid label="'('"]
  144 -> "144R74" [style=solid]
 "144R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  145 [label="State 145\n\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l116 assignment: MVARIABLE ASSIGN matrix .  [NEWLINE]\l"]
  145 -> 105 [style=solid label="ELEMMULT"]
  145 -> 106 [style=solid label="'\\''"]
  145 -> 107 [style=solid label="LEFTSHIFT"]
  145 -> 108 [style=solid label="RIGHTSHIFT"]
  145 -> 109 [style=solid label="'*'"]
  145 -> "145R116" [style=solid]
 "145R116" [label="R116", fillcolor=3, shape=diamond, style=filled]
  146 [label="State 146\n\l 80 matrix: vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  146 -> 111 [style=solid label="ELEMMULT"]
  146 -> 112 [style=solid label="'\\''"]
  146 -> 113 [style=solid label="LEFTSHIFT"]
  146 -> 114 [style=solid label="RIGHTSHIFT"]
  147 [label="State 147\n\l 72 matrix: MVARIABLE '(' '[' . ']' ',' vector ')'\l 92 vector: MVARIABLE '(' '[' . ']' ',' expr ')'\l107 vmdeclaration: MVARIABLE '(' '[' . ']' ',' expr ')' ASSIGN vector\l109              | MVARIABLE '(' '[' . ']' ',' vector ')' ASSIGN matrix\l"]
  147 -> 209 [style=solid label="']'"]
  148 [label="State 148\n\l 73 matrix: MVARIABLE '(' matrix . ')'\l 75       | matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l110 vmdeclaration: MVARIABLE '(' matrix . ')' ASSIGN matrix\l"]
  148 -> 105 [style=solid label="ELEMMULT"]
  148 -> 106 [style=solid label="'\\''"]
  148 -> 107 [style=solid label="LEFTSHIFT"]
  148 -> 108 [style=solid label="RIGHTSHIFT"]
  148 -> 109 [style=solid label="'*'"]
  148 -> 210 [style=solid label="')'"]
  149 [label="State 149\n\l 71 matrix: MVARIABLE '(' vector . ',' '[' ']' ')'\l 80       | vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l108 vmdeclaration: MVARIABLE '(' vector . ',' '[' ']' ')' ASSIGN matrix\l"]
  149 -> 111 [style=solid label="ELEMMULT"]
  149 -> 112 [style=solid label="'\\''"]
  149 -> 113 [style=solid label="LEFTSHIFT"]
  149 -> 114 [style=solid label="RIGHTSHIFT"]
  149 -> 211 [style=solid label="','"]
  150 [label="State 150\n\l 91 vector: MVARIABLE '(' expr . ',' '[' ']' ')'\l105 vmdeclaration: MVARIABLE '(' expr . ',' expr ')' ASSIGN expr\l106              | MVARIABLE '(' expr . ',' '[' ']' ')' ASSIGN vector\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l135     | MVARIABLE '(' expr . ',' expr ')'\l"]
  150 -> 120 [style=solid label="CONJUNCTION"]
  150 -> 212 [style=solid label="','"]
  150 -> 121 [style=solid label="'<'"]
  150 -> 122 [style=solid label="'>'"]
  150 -> 123 [style=solid label="'+'"]
  150 -> 124 [style=solid label="'-'"]
  150 -> 125 [style=solid label="'/'"]
  151 [label="State 151\n\l118 print: PRINT '(' VVARIABLE . ')'\l134 expr: VVARIABLE . '(' expr ')'\l"]
  151 -> 155 [style=solid label="'('"]
  151 -> 213 [style=solid label="')'"]
  152 [label="State 152\n\l119 print: PRINT '(' MVARIABLE . ')'\l135 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  152 -> 156 [style=solid label="'('"]
  152 -> 214 [style=solid label="')'"]
  153 [label="State 153\n\l117 print: PRINT '(' expr . ')'\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  153 -> 120 [style=solid label="CONJUNCTION"]
  153 -> 121 [style=solid label="'<'"]
  153 -> 122 [style=solid label="'>'"]
  153 -> 123 [style=solid label="'+'"]
  153 -> 124 [style=solid label="'-'"]
  153 -> 125 [style=solid label="'/'"]
  153 -> 215 [style=solid label="')'"]
  154 [label="State 154\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l136     | error expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l"]
  154 -> 120 [style=solid label="CONJUNCTION"]
  154 -> 121 [style=solid label="'<'"]
  154 -> 122 [style=solid label="'>'"]
  154 -> 123 [style=solid label="'+'"]
  154 -> 124 [style=solid label="'-'"]
  154 -> 125 [style=solid label="'/'"]
  154 -> "154R136d" [label="[CONJUNCTION, '<', '>', '+', '-', '/']", style=solid]
 "154R136d" [label="R136", fillcolor=5, shape=diamond, style=filled]
  154 -> "154R136" [style=solid]
 "154R136" [label="R136", fillcolor=3, shape=diamond, style=filled]
  155 [label="State 155\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l134     | VVARIABLE '(' . expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  155 -> 74 [style=dotted]
  155 -> 5 [style=solid label="BOOL"]
  155 -> 6 [style=solid label="INTEGER"]
  155 -> 59 [style=solid label="VARIABLE"]
  155 -> 75 [style=solid label="VVARIABLE"]
  155 -> 76 [style=solid label="MVARIABLE"]
  155 -> 26 [style=solid label="MOVE"]
  155 -> 29 [style=solid label="ROBEX"]
  155 -> 30 [style=solid label="WALL"]
  155 -> 31 [style=solid label="'-'"]
  155 -> 32 [style=solid label="'!'"]
  155 -> 63 [style=solid label="'('"]
  155 -> 39 [style=dashed label="robotmove"]
  155 -> 42 [style=dashed label="robotwall"]
  155 -> 43 [style=dashed label="robotexit"]
  155 -> 194 [style=dashed label="expr"]
  155 -> 57 [style=dashed label="const"]
  156 [label="State 156\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l135     | MVARIABLE '(' . expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  156 -> 74 [style=dotted]
  156 -> 5 [style=solid label="BOOL"]
  156 -> 6 [style=solid label="INTEGER"]
  156 -> 59 [style=solid label="VARIABLE"]
  156 -> 75 [style=solid label="VVARIABLE"]
  156 -> 76 [style=solid label="MVARIABLE"]
  156 -> 26 [style=solid label="MOVE"]
  156 -> 29 [style=solid label="ROBEX"]
  156 -> 30 [style=solid label="WALL"]
  156 -> 31 [style=solid label="'-'"]
  156 -> 32 [style=solid label="'!'"]
  156 -> 63 [style=solid label="'('"]
  156 -> 39 [style=dashed label="robotmove"]
  156 -> 42 [style=dashed label="robotwall"]
  156 -> 43 [style=dashed label="robotexit"]
  156 -> 216 [style=dashed label="expr"]
  156 -> 57 [style=dashed label="const"]
  157 [label="State 157\n\l 31 iff: IF expr NEWLINE . begif stmts endif\l 32 begif: . B\l 33      | . BEGIF\l"]
  157 -> 217 [style=solid label="B"]
  157 -> 218 [style=solid label="BEGIF"]
  157 -> 219 [style=dashed label="begif"]
  158 [label="State 158\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 40 forr: FORR declaration DOUBLEDOT . expr NEWLINE begfor stmts endfor\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  158 -> 74 [style=dotted]
  158 -> 5 [style=solid label="BOOL"]
  158 -> 6 [style=solid label="INTEGER"]
  158 -> 59 [style=solid label="VARIABLE"]
  158 -> 75 [style=solid label="VVARIABLE"]
  158 -> 76 [style=solid label="MVARIABLE"]
  158 -> 26 [style=solid label="MOVE"]
  158 -> 29 [style=solid label="ROBEX"]
  158 -> 30 [style=solid label="WALL"]
  158 -> 31 [style=solid label="'-'"]
  158 -> 32 [style=solid label="'!'"]
  158 -> 63 [style=solid label="'('"]
  158 -> 39 [style=dashed label="robotmove"]
  158 -> 42 [style=dashed label="robotwall"]
  158 -> 43 [style=dashed label="robotexit"]
  158 -> 220 [style=dashed label="expr"]
  158 -> 57 [style=dashed label="const"]
  159 [label="State 159\n\l 26 robotmove: MOVE '(' expr . ')'\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  159 -> 120 [style=solid label="CONJUNCTION"]
  159 -> 121 [style=solid label="'<'"]
  159 -> 122 [style=solid label="'>'"]
  159 -> 123 [style=solid label="'+'"]
  159 -> 124 [style=solid label="'-'"]
  159 -> 125 [style=solid label="'/'"]
  159 -> 221 [style=solid label="')'"]
  160 [label="State 160\n\l 22 stmt: '(' stmts ')' .\l"]
  160 -> "160R22" [style=solid]
 "160R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  161 [label="State 161\n\l 43 return_func: return_func error .\l"]
  161 -> "161R43" [style=solid]
 "161R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  162 [label="State 162\n\l 42 return_func: return_func ',' . type VAR\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l"]
  162 -> 10 [style=solid label="CINT"]
  162 -> 11 [style=solid label="VINT"]
  162 -> 12 [style=solid label="MINT"]
  162 -> 13 [style=solid label="INT"]
  162 -> 14 [style=solid label="CVINT"]
  162 -> 15 [style=solid label="CMINT"]
  162 -> 16 [style=solid label="BOOLEAN"]
  162 -> 17 [style=solid label="CBOOLEAN"]
  162 -> 18 [style=solid label="VBOOLEAN"]
  162 -> 19 [style=solid label="MBOOLEAN"]
  162 -> 20 [style=solid label="CVBOOLEAN"]
  162 -> 21 [style=solid label="CMBOOLEAN"]
  162 -> 222 [style=dashed label="type"]
  163 [label="State 163\n\l 68 callfunction: '(' return_func ')' . DECLARE FVARIABLE '[' callfunc_args ']'\l"]
  163 -> 223 [style=solid label="DECLARE"]
  164 [label="State 164\n\l133 expr: '(' expr ')' .\l"]
  164 -> "164R133" [style=solid]
 "164R133" [label="R133", fillcolor=3, shape=diamond, style=filled]
  165 [label="State 165\n\l 41 return_func: type VAR .  [error, ',', ')']\l111 declaration: type VAR . DECLARE expr\l112            | type VAR . DECLARE vector\l113            | type VAR . DECLARE matrix\l"]
  165 -> 192 [style=solid label="DECLARE"]
  165 -> "165R41" [style=solid]
 "165R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  166 [label="State 166\n\l 55 function_head: '[' return_func ']' . DECLARE FUNC VAR '(' args_func ')'\l"]
  166 -> 224 [style=solid label="DECLARE"]
  167 [label="State 167\n\l 41 return_func: type VAR .\l"]
  167 -> "167R41" [style=solid]
 "167R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  168 [label="State 168\n\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l 98       | error vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l"]
  168 -> 111 [style=solid label="ELEMMULT"]
  168 -> 113 [style=solid label="LEFTSHIFT"]
  168 -> 114 [style=solid label="RIGHTSHIFT"]
  168 -> "168R98d" [label="[ELEMMULT, LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "168R98d" [label="R98", fillcolor=5, shape=diamond, style=filled]
  168 -> "168R98" [style=solid]
 "168R98" [label="R98", fillcolor=3, shape=diamond, style=filled]
  169 [label="State 169\n\l 99 vector: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l136     | error expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l"]
  169 -> 120 [style=solid label="CONJUNCTION"]
  169 -> 121 [style=solid label="'<'"]
  169 -> 122 [style=solid label="'>'"]
  169 -> 123 [style=solid label="'+'"]
  169 -> 124 [style=solid label="'-'"]
  169 -> 125 [style=solid label="'/'"]
  169 -> "169R99" [style=solid]
 "169R99" [label="R99", fillcolor=3, shape=diamond, style=filled]
  169 -> "169R136d" [label="[error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']", style=solid]
 "169R136d" [label="R136", fillcolor=5, shape=diamond, style=filled]
  170 [label="State 170\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 91 vector: MVARIABLE '(' . expr ',' '[' ']' ')'\l 92       | MVARIABLE '(' . '[' ']' ',' expr ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l135     | MVARIABLE '(' . expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  170 -> 74 [style=dotted]
  170 -> 5 [style=solid label="BOOL"]
  170 -> 6 [style=solid label="INTEGER"]
  170 -> 59 [style=solid label="VARIABLE"]
  170 -> 75 [style=solid label="VVARIABLE"]
  170 -> 76 [style=solid label="MVARIABLE"]
  170 -> 26 [style=solid label="MOVE"]
  170 -> 29 [style=solid label="ROBEX"]
  170 -> 30 [style=solid label="WALL"]
  170 -> 31 [style=solid label="'-'"]
  170 -> 32 [style=solid label="'!'"]
  170 -> 63 [style=solid label="'('"]
  170 -> 225 [style=solid label="'['"]
  170 -> 39 [style=dashed label="robotmove"]
  170 -> 42 [style=dashed label="robotwall"]
  170 -> 43 [style=dashed label="robotexit"]
  170 -> 198 [style=dashed label="expr"]
  170 -> 57 [style=dashed label="const"]
  171 [label="State 171\n\l 88 listexprs: listexprs error .\l"]
  171 -> "171R88" [style=solid]
 "171R88" [label="R88", fillcolor=3, shape=diamond, style=filled]
  172 [label="State 172\n\l 87 listexprs: listexprs ',' . vector\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l"]
  172 -> 137 [style=dotted]
  172 -> 138 [style=solid label="VVARIABLE"]
  172 -> 139 [style=solid label="MVARIABLE"]
  172 -> 91 [style=solid label="'{'"]
  172 -> 226 [style=dashed label="vector"]
  173 [label="State 173\n\l 70 matrix: '{' listexprs '}' .\l"]
  173 -> "173R70" [style=solid]
 "173R70" [label="R70", fillcolor=3, shape=diamond, style=filled]
  174 [label="State 174\n\l 86 listexprs: vector ',' . vector\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l"]
  174 -> 137 [style=dotted]
  174 -> 138 [style=solid label="VVARIABLE"]
  174 -> 139 [style=solid label="MVARIABLE"]
  174 -> 91 [style=solid label="'{'"]
  174 -> 227 [style=dashed label="vector"]
  175 [label="State 175\n\l102 exprs: exprs error .\l"]
  175 -> "175R102" [style=solid]
 "175R102" [label="R102", fillcolor=3, shape=diamond, style=filled]
  176 [label="State 176\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l101 exprs: exprs ',' . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  176 -> 74 [style=dotted]
  176 -> 5 [style=solid label="BOOL"]
  176 -> 6 [style=solid label="INTEGER"]
  176 -> 59 [style=solid label="VARIABLE"]
  176 -> 75 [style=solid label="VVARIABLE"]
  176 -> 76 [style=solid label="MVARIABLE"]
  176 -> 26 [style=solid label="MOVE"]
  176 -> 29 [style=solid label="ROBEX"]
  176 -> 30 [style=solid label="WALL"]
  176 -> 31 [style=solid label="'-'"]
  176 -> 32 [style=solid label="'!'"]
  176 -> 63 [style=solid label="'('"]
  176 -> 39 [style=dashed label="robotmove"]
  176 -> 42 [style=dashed label="robotwall"]
  176 -> 43 [style=dashed label="robotexit"]
  176 -> 228 [style=dashed label="expr"]
  176 -> 57 [style=dashed label="const"]
  177 [label="State 177\n\l 89 vector: '{' exprs '}' .\l"]
  177 -> "177R89" [style=solid]
 "177R89" [label="R89", fillcolor=3, shape=diamond, style=filled]
  178 [label="State 178\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l100 exprs: expr ',' . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  178 -> 74 [style=dotted]
  178 -> 5 [style=solid label="BOOL"]
  178 -> 6 [style=solid label="INTEGER"]
  178 -> 59 [style=solid label="VARIABLE"]
  178 -> 75 [style=solid label="VVARIABLE"]
  178 -> 76 [style=solid label="MVARIABLE"]
  178 -> 26 [style=solid label="MOVE"]
  178 -> 29 [style=solid label="ROBEX"]
  178 -> 30 [style=solid label="WALL"]
  178 -> 31 [style=solid label="'-'"]
  178 -> 32 [style=solid label="'!'"]
  178 -> 63 [style=solid label="'('"]
  178 -> 39 [style=dashed label="robotmove"]
  178 -> 42 [style=dashed label="robotwall"]
  178 -> 43 [style=dashed label="robotexit"]
  178 -> 229 [style=dashed label="expr"]
  178 -> 57 [style=dashed label="const"]
  179 [label="State 179\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 57         | function_head B NEWLINE . stmts E\l 68 callfunction: . '(' return_func ')' DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  179 -> 82 [style=dotted]
  179 -> 5 [style=solid label="BOOL"]
  179 -> 6 [style=solid label="INTEGER"]
  179 -> 7 [style=solid label="VARIABLE"]
  179 -> 8 [style=solid label="VVARIABLE"]
  179 -> 9 [style=solid label="MVARIABLE"]
  179 -> 10 [style=solid label="CINT"]
  179 -> 11 [style=solid label="VINT"]
  179 -> 12 [style=solid label="MINT"]
  179 -> 13 [style=solid label="INT"]
  179 -> 14 [style=solid label="CVINT"]
  179 -> 15 [style=solid label="CMINT"]
  179 -> 16 [style=solid label="BOOLEAN"]
  179 -> 17 [style=solid label="CBOOLEAN"]
  179 -> 18 [style=solid label="VBOOLEAN"]
  179 -> 19 [style=solid label="MBOOLEAN"]
  179 -> 20 [style=solid label="CVBOOLEAN"]
  179 -> 21 [style=solid label="CMBOOLEAN"]
  179 -> 22 [style=solid label="NEWLINE"]
  179 -> 23 [style=solid label="PRINT"]
  179 -> 24 [style=solid label="IF"]
  179 -> 25 [style=solid label="FORR"]
  179 -> 26 [style=solid label="MOVE"]
  179 -> 27 [style=solid label="RIGHT"]
  179 -> 28 [style=solid label="LEFT"]
  179 -> 29 [style=solid label="ROBEX"]
  179 -> 30 [style=solid label="WALL"]
  179 -> 31 [style=solid label="'-'"]
  179 -> 32 [style=solid label="'!'"]
  179 -> 33 [style=solid label="'('"]
  179 -> 34 [style=solid label="'['"]
  179 -> 35 [style=solid label="'{'"]
  179 -> 230 [style=dashed label="stmts"]
  179 -> 37 [style=dashed label="stmt"]
  179 -> 38 [style=dashed label="robotactions"]
  179 -> 39 [style=dashed label="robotmove"]
  179 -> 40 [style=dashed label="robotright"]
  179 -> 41 [style=dashed label="robotleft"]
  179 -> 42 [style=dashed label="robotwall"]
  179 -> 43 [style=dashed label="robotexit"]
  179 -> 44 [style=dashed label="iff"]
  179 -> 45 [style=dashed label="forr"]
  179 -> 46 [style=dashed label="function_head"]
  179 -> 47 [style=dashed label="function"]
  179 -> 48 [style=dashed label="callfunction"]
  179 -> 49 [style=dashed label="matrix"]
  179 -> 50 [style=dashed label="vector"]
  179 -> 51 [style=dashed label="vmdeclaration"]
  179 -> 52 [style=dashed label="declaration"]
  179 -> 53 [style=dashed label="assignment"]
  179 -> 54 [style=dashed label="print"]
  179 -> 55 [style=dashed label="expr"]
  179 -> 56 [style=dashed label="type"]
  179 -> 57 [style=dashed label="const"]
  180 [label="State 180\n\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 76       | matrix ELEMMULT matrix .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l"]
  180 -> 105 [style=solid label="ELEMMULT"]
  180 -> 106 [style=solid label="'\\''"]
  180 -> 107 [style=solid label="LEFTSHIFT"]
  180 -> 108 [style=solid label="RIGHTSHIFT"]
  180 -> 109 [style=solid label="'*'"]
  180 -> "180R76d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']", style=solid]
 "180R76d" [label="R76", fillcolor=5, shape=diamond, style=filled]
  180 -> "180R76" [style=solid]
 "180R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
  181 [label="State 181\n\l 80 matrix: vector . '\\''\l 81       | matrix ELEMMULT vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  181 -> 111 [style=solid label="ELEMMULT"]
  181 -> 112 [style=solid label="'\\''"]
  181 -> 113 [style=solid label="LEFTSHIFT"]
  181 -> 114 [style=solid label="RIGHTSHIFT"]
  181 -> "181R81d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "181R81d" [label="R81", fillcolor=5, shape=diamond, style=filled]
  181 -> "181R81" [style=solid]
 "181R81" [label="R81", fillcolor=3, shape=diamond, style=filled]
  182 [label="State 182\n\l 82 matrix: matrix ELEMMULT expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  182 -> 120 [style=solid label="CONJUNCTION"]
  182 -> 121 [style=solid label="'<'"]
  182 -> 122 [style=solid label="'>'"]
  182 -> 123 [style=solid label="'+'"]
  182 -> 124 [style=solid label="'-'"]
  182 -> 125 [style=solid label="'/'"]
  182 -> "182R82" [style=solid]
 "182R82" [label="R82", fillcolor=3, shape=diamond, style=filled]
  183 [label="State 183\n\l 75 matrix: matrix . '*' matrix\l 75       | matrix '*' matrix .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l"]
  183 -> 105 [style=solid label="ELEMMULT"]
  183 -> 106 [style=solid label="'\\''"]
  183 -> 107 [style=solid label="LEFTSHIFT"]
  183 -> 108 [style=solid label="RIGHTSHIFT"]
  183 -> "183R75d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "183R75d" [label="R75", fillcolor=5, shape=diamond, style=filled]
  183 -> "183R75" [style=solid]
 "183R75" [label="R75", fillcolor=3, shape=diamond, style=filled]
  184 [label="State 184\n\l 94 vector: vector . ELEMMULT vector\l 94       | vector ELEMMULT vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  184 -> 111 [style=solid label="ELEMMULT"]
  184 -> 113 [style=solid label="LEFTSHIFT"]
  184 -> 114 [style=solid label="RIGHTSHIFT"]
  184 -> "184R94d" [label="[ELEMMULT, LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "184R94d" [label="R94", fillcolor=5, shape=diamond, style=filled]
  184 -> "184R94" [style=solid]
 "184R94" [label="R94", fillcolor=3, shape=diamond, style=filled]
  185 [label="State 185\n\l 97 vector: vector ELEMMULT expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  185 -> 120 [style=solid label="CONJUNCTION"]
  185 -> 121 [style=solid label="'<'"]
  185 -> 122 [style=solid label="'>'"]
  185 -> 123 [style=solid label="'+'"]
  185 -> 124 [style=solid label="'-'"]
  185 -> 125 [style=solid label="'/'"]
  185 -> "185R97" [style=solid]
 "185R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  186 [label="State 186\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l132     | expr CONJUNCTION expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l"]
  186 -> 120 [style=solid label="CONJUNCTION"]
  186 -> 121 [style=solid label="'<'"]
  186 -> 122 [style=solid label="'>'"]
  186 -> 123 [style=solid label="'+'"]
  186 -> 124 [style=solid label="'-'"]
  186 -> 125 [style=solid label="'/'"]
  186 -> "186R132d" [label="[CONJUNCTION, '<', '>', '+', '-', '/']", style=solid]
 "186R132d" [label="R132", fillcolor=5, shape=diamond, style=filled]
  186 -> "186R132" [style=solid]
 "186R132" [label="R132", fillcolor=3, shape=diamond, style=filled]
  187 [label="State 187\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l129     | expr '<' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '*', ')', ']', '}']\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  187 -> 120 [style=solid label="CONJUNCTION"]
  187 -> 123 [style=solid label="'+'"]
  187 -> 124 [style=solid label="'-'"]
  187 -> 125 [style=solid label="'/'"]
  187 -> "187R129d" [label="[CONJUNCTION]", style=solid]
 "187R129d" [label="R129", fillcolor=5, shape=diamond, style=filled]
  187 -> "187R129" [style=solid]
 "187R129" [label="R129", fillcolor=3, shape=diamond, style=filled]
  188 [label="State 188\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l130     | expr '>' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '*', ')', ']', '}']\l132     | expr . CONJUNCTION expr\l"]
  188 -> 120 [style=solid label="CONJUNCTION"]
  188 -> 123 [style=solid label="'+'"]
  188 -> 124 [style=solid label="'-'"]
  188 -> 125 [style=solid label="'/'"]
  188 -> "188R130d" [label="[CONJUNCTION]", style=solid]
 "188R130d" [label="R130", fillcolor=5, shape=diamond, style=filled]
  188 -> "188R130" [style=solid]
 "188R130" [label="R130", fillcolor=3, shape=diamond, style=filled]
  189 [label="State 189\n\l126 expr: expr . '+' expr\l126     | expr '+' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', ')', ']', '}']\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  189 -> 120 [style=solid label="CONJUNCTION"]
  189 -> 125 [style=solid label="'/'"]
  189 -> "189R126d" [label="[CONJUNCTION]", style=solid]
 "189R126d" [label="R126", fillcolor=5, shape=diamond, style=filled]
  189 -> "189R126" [style=solid]
 "189R126" [label="R126", fillcolor=3, shape=diamond, style=filled]
  190 [label="State 190\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l127     | expr '-' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', ')', ']', '}']\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  190 -> 120 [style=solid label="CONJUNCTION"]
  190 -> 125 [style=solid label="'/'"]
  190 -> "190R127d" [label="[CONJUNCTION]", style=solid]
 "190R127d" [label="R127", fillcolor=5, shape=diamond, style=filled]
  190 -> "190R127" [style=solid]
 "190R127" [label="R127", fillcolor=3, shape=diamond, style=filled]
  191 [label="State 191\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l128     | expr '/' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  191 -> 120 [style=solid label="CONJUNCTION"]
  191 -> "191R128d" [label="[CONJUNCTION]", style=solid]
 "191R128d" [label="R128", fillcolor=5, shape=diamond, style=filled]
  191 -> "191R128" [style=solid]
 "191R128" [label="R128", fillcolor=3, shape=diamond, style=filled]
  192 [label="State 192\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l111 declaration: type VAR DECLARE . expr\l112            | type VAR DECLARE . vector\l113            | type VAR DECLARE . matrix\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  192 -> 58 [style=dotted]
  192 -> 5 [style=solid label="BOOL"]
  192 -> 6 [style=solid label="INTEGER"]
  192 -> 59 [style=solid label="VARIABLE"]
  192 -> 60 [style=solid label="VVARIABLE"]
  192 -> 61 [style=solid label="MVARIABLE"]
  192 -> 26 [style=solid label="MOVE"]
  192 -> 29 [style=solid label="ROBEX"]
  192 -> 30 [style=solid label="WALL"]
  192 -> 31 [style=solid label="'-'"]
  192 -> 32 [style=solid label="'!'"]
  192 -> 63 [style=solid label="'('"]
  192 -> 35 [style=solid label="'{'"]
  192 -> 39 [style=dashed label="robotmove"]
  192 -> 42 [style=dashed label="robotwall"]
  192 -> 43 [style=dashed label="robotexit"]
  192 -> 231 [style=dashed label="matrix"]
  192 -> 232 [style=dashed label="vector"]
  192 -> 233 [style=dashed label="expr"]
  192 -> 57 [style=dashed label="const"]
  193 [label="State 193\n\l 90 vector: VVARIABLE '(' vector . ',' '[' ']' ')'\l 94       | vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  193 -> 111 [style=solid label="ELEMMULT"]
  193 -> 113 [style=solid label="LEFTSHIFT"]
  193 -> 114 [style=solid label="RIGHTSHIFT"]
  193 -> 234 [style=solid label="','"]
  194 [label="State 194\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l134     | VVARIABLE '(' expr . ')'\l"]
  194 -> 120 [style=solid label="CONJUNCTION"]
  194 -> 121 [style=solid label="'<'"]
  194 -> 122 [style=solid label="'>'"]
  194 -> 123 [style=solid label="'+'"]
  194 -> 124 [style=solid label="'-'"]
  194 -> 125 [style=solid label="'/'"]
  194 -> 235 [style=solid label="')'"]
  195 [label="State 195\n\l 72 matrix: MVARIABLE '(' '[' . ']' ',' vector ')'\l 92 vector: MVARIABLE '(' '[' . ']' ',' expr ')'\l"]
  195 -> 236 [style=solid label="']'"]
  196 [label="State 196\n\l 73 matrix: MVARIABLE '(' matrix . ')'\l 75       | matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l"]
  196 -> 105 [style=solid label="ELEMMULT"]
  196 -> 106 [style=solid label="'\\''"]
  196 -> 107 [style=solid label="LEFTSHIFT"]
  196 -> 108 [style=solid label="RIGHTSHIFT"]
  196 -> 109 [style=solid label="'*'"]
  196 -> 237 [style=solid label="')'"]
  197 [label="State 197\n\l 71 matrix: MVARIABLE '(' vector . ',' '[' ']' ')'\l 80       | vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  197 -> 111 [style=solid label="ELEMMULT"]
  197 -> 112 [style=solid label="'\\''"]
  197 -> 113 [style=solid label="LEFTSHIFT"]
  197 -> 114 [style=solid label="RIGHTSHIFT"]
  197 -> 238 [style=solid label="','"]
  198 [label="State 198\n\l 91 vector: MVARIABLE '(' expr . ',' '[' ']' ')'\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l135     | MVARIABLE '(' expr . ',' expr ')'\l"]
  198 -> 120 [style=solid label="CONJUNCTION"]
  198 -> 239 [style=solid label="','"]
  198 -> 121 [style=solid label="'<'"]
  198 -> 122 [style=solid label="'>'"]
  198 -> 123 [style=solid label="'+'"]
  198 -> 124 [style=solid label="'-'"]
  198 -> 125 [style=solid label="'/'"]
  199 [label="State 199\n\l 66 callfunc_args: callfunc_args error .\l"]
  199 -> "199R66" [style=solid]
 "199R66" [label="R66", fillcolor=3, shape=diamond, style=filled]
  200 [label="State 200\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 62 callfunc_args: callfunc_args ',' . expr\l 63              | callfunc_args ',' . vector\l 64              | callfunc_args ',' . matrix\l 65              | callfunc_args ',' . DFLT\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  200 -> 58 [style=dotted]
  200 -> 5 [style=solid label="BOOL"]
  200 -> 6 [style=solid label="INTEGER"]
  200 -> 59 [style=solid label="VARIABLE"]
  200 -> 60 [style=solid label="VVARIABLE"]
  200 -> 61 [style=solid label="MVARIABLE"]
  200 -> 26 [style=solid label="MOVE"]
  200 -> 29 [style=solid label="ROBEX"]
  200 -> 30 [style=solid label="WALL"]
  200 -> 240 [style=solid label="DFLT"]
  200 -> 31 [style=solid label="'-'"]
  200 -> 32 [style=solid label="'!'"]
  200 -> 63 [style=solid label="'('"]
  200 -> 35 [style=solid label="'{'"]
  200 -> 39 [style=dashed label="robotmove"]
  200 -> 42 [style=dashed label="robotwall"]
  200 -> 43 [style=dashed label="robotexit"]
  200 -> 241 [style=dashed label="matrix"]
  200 -> 242 [style=dashed label="vector"]
  200 -> 243 [style=dashed label="expr"]
  200 -> 57 [style=dashed label="const"]
  201 [label="State 201\n\l 69 callfunction: error '[' callfunc_args ']' .\l"]
  201 -> "201R69" [style=solid]
 "201R69" [label="R69", fillcolor=3, shape=diamond, style=filled]
  202 [label="State 202\n\l 99 vector: error expr .  [error, NEWLINE, ELEMMULT, LEFTSHIFT, RIGHTSHIFT, ',', '}']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  202 -> 120 [style=solid label="CONJUNCTION"]
  202 -> 121 [style=solid label="'<'"]
  202 -> 122 [style=solid label="'>'"]
  202 -> 123 [style=solid label="'+'"]
  202 -> 124 [style=solid label="'-'"]
  202 -> 125 [style=solid label="'/'"]
  202 -> "202R99" [style=solid]
 "202R99" [label="R99", fillcolor=3, shape=diamond, style=filled]
  203 [label="State 203\n\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 90       | VVARIABLE '(' . vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l"]
  203 -> 137 [style=dotted]
  203 -> 138 [style=solid label="VVARIABLE"]
  203 -> 139 [style=solid label="MVARIABLE"]
  203 -> 91 [style=solid label="'{'"]
  203 -> 193 [style=dashed label="vector"]
  204 [label="State 204\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 91 vector: MVARIABLE '(' . expr ',' '[' ']' ')'\l 92       | MVARIABLE '(' . '[' ']' ',' expr ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  204 -> 74 [style=dotted]
  204 -> 5 [style=solid label="BOOL"]
  204 -> 6 [style=solid label="INTEGER"]
  204 -> 59 [style=solid label="VARIABLE"]
  204 -> 75 [style=solid label="VVARIABLE"]
  204 -> 76 [style=solid label="MVARIABLE"]
  204 -> 26 [style=solid label="MOVE"]
  204 -> 29 [style=solid label="ROBEX"]
  204 -> 30 [style=solid label="WALL"]
  204 -> 31 [style=solid label="'-'"]
  204 -> 32 [style=solid label="'!'"]
  204 -> 63 [style=solid label="'('"]
  204 -> 225 [style=solid label="'['"]
  204 -> 39 [style=dashed label="robotmove"]
  204 -> 42 [style=dashed label="robotwall"]
  204 -> 43 [style=dashed label="robotexit"]
  204 -> 244 [style=dashed label="expr"]
  204 -> 57 [style=dashed label="const"]
  205 [label="State 205\n\l 90 vector: VVARIABLE '(' vector ',' . '[' ']' ')'\l104 vmdeclaration: VVARIABLE '(' vector ',' . '[' ']' ')' ASSIGN vector\l"]
  205 -> 245 [style=solid label="'['"]
  206 [label="State 206\n\l103 vmdeclaration: VVARIABLE '(' expr ')' . ASSIGN expr\l134 expr: VVARIABLE '(' expr ')' .  [NEWLINE, CONJUNCTION, '<', '>', '+', '-', '/', ')']\l"]
  206 -> 246 [style=solid label="ASSIGN"]
  206 -> "206R134" [style=solid]
 "206R134" [label="R134", fillcolor=3, shape=diamond, style=filled]
  207 [label="State 207\n\l 85 matrix: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 99 vector: error expr .  [ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  207 -> 120 [style=solid label="CONJUNCTION"]
  207 -> 121 [style=solid label="'<'"]
  207 -> 122 [style=solid label="'>'"]
  207 -> 123 [style=solid label="'+'"]
  207 -> 124 [style=solid label="'-'"]
  207 -> 125 [style=solid label="'/'"]
  207 -> "207R85" [style=solid]
 "207R85" [label="R85", fillcolor=3, shape=diamond, style=filled]
  207 -> "207R99d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "207R99d" [label="R99", fillcolor=5, shape=diamond, style=filled]
  208 [label="State 208\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 71       | MVARIABLE '(' . vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 72       | MVARIABLE '(' . '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 73       | MVARIABLE '(' . matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 91       | MVARIABLE '(' . expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 92       | MVARIABLE '(' . '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  208 -> 58 [style=dotted]
  208 -> 5 [style=solid label="BOOL"]
  208 -> 6 [style=solid label="INTEGER"]
  208 -> 59 [style=solid label="VARIABLE"]
  208 -> 60 [style=solid label="VVARIABLE"]
  208 -> 61 [style=solid label="MVARIABLE"]
  208 -> 26 [style=solid label="MOVE"]
  208 -> 29 [style=solid label="ROBEX"]
  208 -> 30 [style=solid label="WALL"]
  208 -> 31 [style=solid label="'-'"]
  208 -> 32 [style=solid label="'!'"]
  208 -> 63 [style=solid label="'('"]
  208 -> 195 [style=solid label="'['"]
  208 -> 35 [style=solid label="'{'"]
  208 -> 39 [style=dashed label="robotmove"]
  208 -> 42 [style=dashed label="robotwall"]
  208 -> 43 [style=dashed label="robotexit"]
  208 -> 196 [style=dashed label="matrix"]
  208 -> 197 [style=dashed label="vector"]
  208 -> 244 [style=dashed label="expr"]
  208 -> 57 [style=dashed label="const"]
  209 [label="State 209\n\l 72 matrix: MVARIABLE '(' '[' ']' . ',' vector ')'\l 92 vector: MVARIABLE '(' '[' ']' . ',' expr ')'\l107 vmdeclaration: MVARIABLE '(' '[' ']' . ',' expr ')' ASSIGN vector\l109              | MVARIABLE '(' '[' ']' . ',' vector ')' ASSIGN matrix\l"]
  209 -> 247 [style=solid label="','"]
  210 [label="State 210\n\l 73 matrix: MVARIABLE '(' matrix ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l110 vmdeclaration: MVARIABLE '(' matrix ')' . ASSIGN matrix\l"]
  210 -> 248 [style=solid label="ASSIGN"]
  210 -> "210R73" [style=solid]
 "210R73" [label="R73", fillcolor=3, shape=diamond, style=filled]
  211 [label="State 211\n\l 71 matrix: MVARIABLE '(' vector ',' . '[' ']' ')'\l108 vmdeclaration: MVARIABLE '(' vector ',' . '[' ']' ')' ASSIGN matrix\l"]
  211 -> 249 [style=solid label="'['"]
  212 [label="State 212\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 91 vector: MVARIABLE '(' expr ',' . '[' ']' ')'\l105 vmdeclaration: MVARIABLE '(' expr ',' . expr ')' ASSIGN expr\l106              | MVARIABLE '(' expr ',' . '[' ']' ')' ASSIGN vector\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l135     | MVARIABLE '(' expr ',' . expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  212 -> 74 [style=dotted]
  212 -> 5 [style=solid label="BOOL"]
  212 -> 6 [style=solid label="INTEGER"]
  212 -> 59 [style=solid label="VARIABLE"]
  212 -> 75 [style=solid label="VVARIABLE"]
  212 -> 76 [style=solid label="MVARIABLE"]
  212 -> 26 [style=solid label="MOVE"]
  212 -> 29 [style=solid label="ROBEX"]
  212 -> 30 [style=solid label="WALL"]
  212 -> 31 [style=solid label="'-'"]
  212 -> 32 [style=solid label="'!'"]
  212 -> 63 [style=solid label="'('"]
  212 -> 250 [style=solid label="'['"]
  212 -> 39 [style=dashed label="robotmove"]
  212 -> 42 [style=dashed label="robotwall"]
  212 -> 43 [style=dashed label="robotexit"]
  212 -> 251 [style=dashed label="expr"]
  212 -> 57 [style=dashed label="const"]
  213 [label="State 213\n\l118 print: PRINT '(' VVARIABLE ')' .\l"]
  213 -> "213R118" [style=solid]
 "213R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
  214 [label="State 214\n\l119 print: PRINT '(' MVARIABLE ')' .\l"]
  214 -> "214R119" [style=solid]
 "214R119" [label="R119", fillcolor=3, shape=diamond, style=filled]
  215 [label="State 215\n\l117 print: PRINT '(' expr ')' .\l"]
  215 -> "215R117" [style=solid]
 "215R117" [label="R117", fillcolor=3, shape=diamond, style=filled]
  216 [label="State 216\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l135     | MVARIABLE '(' expr . ',' expr ')'\l"]
  216 -> 120 [style=solid label="CONJUNCTION"]
  216 -> 252 [style=solid label="','"]
  216 -> 121 [style=solid label="'<'"]
  216 -> 122 [style=solid label="'>'"]
  216 -> 123 [style=solid label="'+'"]
  216 -> 124 [style=solid label="'-'"]
  216 -> 125 [style=solid label="'/'"]
  217 [label="State 217\n\l 32 begif: B .\l"]
  217 -> "217R32" [style=solid]
 "217R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  218 [label="State 218\n\l 33 begif: BEGIF .\l"]
  218 -> "218R33" [style=solid]
 "218R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  219 [label="State 219\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 31    | IF expr NEWLINE begif . stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 68 callfunction: . '(' return_func ')' DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  219 -> 82 [style=dotted]
  219 -> 5 [style=solid label="BOOL"]
  219 -> 6 [style=solid label="INTEGER"]
  219 -> 7 [style=solid label="VARIABLE"]
  219 -> 8 [style=solid label="VVARIABLE"]
  219 -> 9 [style=solid label="MVARIABLE"]
  219 -> 10 [style=solid label="CINT"]
  219 -> 11 [style=solid label="VINT"]
  219 -> 12 [style=solid label="MINT"]
  219 -> 13 [style=solid label="INT"]
  219 -> 14 [style=solid label="CVINT"]
  219 -> 15 [style=solid label="CMINT"]
  219 -> 16 [style=solid label="BOOLEAN"]
  219 -> 17 [style=solid label="CBOOLEAN"]
  219 -> 18 [style=solid label="VBOOLEAN"]
  219 -> 19 [style=solid label="MBOOLEAN"]
  219 -> 20 [style=solid label="CVBOOLEAN"]
  219 -> 21 [style=solid label="CMBOOLEAN"]
  219 -> 22 [style=solid label="NEWLINE"]
  219 -> 23 [style=solid label="PRINT"]
  219 -> 24 [style=solid label="IF"]
  219 -> 25 [style=solid label="FORR"]
  219 -> 26 [style=solid label="MOVE"]
  219 -> 27 [style=solid label="RIGHT"]
  219 -> 28 [style=solid label="LEFT"]
  219 -> 29 [style=solid label="ROBEX"]
  219 -> 30 [style=solid label="WALL"]
  219 -> 31 [style=solid label="'-'"]
  219 -> 32 [style=solid label="'!'"]
  219 -> 33 [style=solid label="'('"]
  219 -> 34 [style=solid label="'['"]
  219 -> 35 [style=solid label="'{'"]
  219 -> 253 [style=dashed label="stmts"]
  219 -> 37 [style=dashed label="stmt"]
  219 -> 38 [style=dashed label="robotactions"]
  219 -> 39 [style=dashed label="robotmove"]
  219 -> 40 [style=dashed label="robotright"]
  219 -> 41 [style=dashed label="robotleft"]
  219 -> 42 [style=dashed label="robotwall"]
  219 -> 43 [style=dashed label="robotexit"]
  219 -> 44 [style=dashed label="iff"]
  219 -> 45 [style=dashed label="forr"]
  219 -> 46 [style=dashed label="function_head"]
  219 -> 47 [style=dashed label="function"]
  219 -> 48 [style=dashed label="callfunction"]
  219 -> 49 [style=dashed label="matrix"]
  219 -> 50 [style=dashed label="vector"]
  219 -> 51 [style=dashed label="vmdeclaration"]
  219 -> 52 [style=dashed label="declaration"]
  219 -> 53 [style=dashed label="assignment"]
  219 -> 54 [style=dashed label="print"]
  219 -> 55 [style=dashed label="expr"]
  219 -> 56 [style=dashed label="type"]
  219 -> 57 [style=dashed label="const"]
  220 [label="State 220\n\l 40 forr: FORR declaration DOUBLEDOT expr . NEWLINE begfor stmts endfor\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  220 -> 254 [style=solid label="NEWLINE"]
  220 -> 120 [style=solid label="CONJUNCTION"]
  220 -> 121 [style=solid label="'<'"]
  220 -> 122 [style=solid label="'>'"]
  220 -> 123 [style=solid label="'+'"]
  220 -> 124 [style=solid label="'-'"]
  220 -> 125 [style=solid label="'/'"]
  221 [label="State 221\n\l 26 robotmove: MOVE '(' expr ')' .\l"]
  221 -> "221R26" [style=solid]
 "221R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  222 [label="State 222\n\l 42 return_func: return_func ',' type . VAR\l"]
  222 -> 255 [style=solid label="VAR"]
  223 [label="State 223\n\l 68 callfunction: '(' return_func ')' DECLARE . FVARIABLE '[' callfunc_args ']'\l"]
  223 -> 256 [style=solid label="FVARIABLE"]
  224 [label="State 224\n\l 55 function_head: '[' return_func ']' DECLARE . FUNC VAR '(' args_func ')'\l"]
  224 -> 257 [style=solid label="FUNC"]
  225 [label="State 225\n\l 92 vector: MVARIABLE '(' '[' . ']' ',' expr ')'\l"]
  225 -> 258 [style=solid label="']'"]
  226 [label="State 226\n\l 87 listexprs: listexprs ',' vector .  [error, ',', '}']\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  226 -> 111 [style=solid label="ELEMMULT"]
  226 -> 113 [style=solid label="LEFTSHIFT"]
  226 -> 114 [style=solid label="RIGHTSHIFT"]
  226 -> "226R87" [style=solid]
 "226R87" [label="R87", fillcolor=3, shape=diamond, style=filled]
  227 [label="State 227\n\l 86 listexprs: vector ',' vector .  [error, ',', '}']\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  227 -> 111 [style=solid label="ELEMMULT"]
  227 -> 113 [style=solid label="LEFTSHIFT"]
  227 -> 114 [style=solid label="RIGHTSHIFT"]
  227 -> "227R86" [style=solid]
 "227R86" [label="R86", fillcolor=3, shape=diamond, style=filled]
  228 [label="State 228\n\l101 exprs: exprs ',' expr .  [error, ',', '}']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  228 -> 120 [style=solid label="CONJUNCTION"]
  228 -> 121 [style=solid label="'<'"]
  228 -> 122 [style=solid label="'>'"]
  228 -> 123 [style=solid label="'+'"]
  228 -> 124 [style=solid label="'-'"]
  228 -> 125 [style=solid label="'/'"]
  228 -> "228R101" [style=solid]
 "228R101" [label="R101", fillcolor=3, shape=diamond, style=filled]
  229 [label="State 229\n\l100 exprs: expr ',' expr .  [error, ',', '}']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  229 -> 120 [style=solid label="CONJUNCTION"]
  229 -> 121 [style=solid label="'<'"]
  229 -> 122 [style=solid label="'>'"]
  229 -> 123 [style=solid label="'+'"]
  229 -> 124 [style=solid label="'-'"]
  229 -> 125 [style=solid label="'/'"]
  229 -> "229R100" [style=solid]
 "229R100" [label="R100", fillcolor=3, shape=diamond, style=filled]
  230 [label="State 230\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 57         | function_head B NEWLINE stmts . E\l 68 callfunction: . '(' return_func ')' DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  230 -> 96 [style=dotted]
  230 -> 5 [style=solid label="BOOL"]
  230 -> 6 [style=solid label="INTEGER"]
  230 -> 7 [style=solid label="VARIABLE"]
  230 -> 8 [style=solid label="VVARIABLE"]
  230 -> 9 [style=solid label="MVARIABLE"]
  230 -> 10 [style=solid label="CINT"]
  230 -> 11 [style=solid label="VINT"]
  230 -> 12 [style=solid label="MINT"]
  230 -> 13 [style=solid label="INT"]
  230 -> 14 [style=solid label="CVINT"]
  230 -> 15 [style=solid label="CMINT"]
  230 -> 16 [style=solid label="BOOLEAN"]
  230 -> 17 [style=solid label="CBOOLEAN"]
  230 -> 18 [style=solid label="VBOOLEAN"]
  230 -> 19 [style=solid label="MBOOLEAN"]
  230 -> 20 [style=solid label="CVBOOLEAN"]
  230 -> 21 [style=solid label="CMBOOLEAN"]
  230 -> 22 [style=solid label="NEWLINE"]
  230 -> 23 [style=solid label="PRINT"]
  230 -> 24 [style=solid label="IF"]
  230 -> 25 [style=solid label="FORR"]
  230 -> 259 [style=solid label="E"]
  230 -> 26 [style=solid label="MOVE"]
  230 -> 27 [style=solid label="RIGHT"]
  230 -> 28 [style=solid label="LEFT"]
  230 -> 29 [style=solid label="ROBEX"]
  230 -> 30 [style=solid label="WALL"]
  230 -> 31 [style=solid label="'-'"]
  230 -> 32 [style=solid label="'!'"]
  230 -> 33 [style=solid label="'('"]
  230 -> 34 [style=solid label="'['"]
  230 -> 35 [style=solid label="'{'"]
  230 -> 97 [style=dashed label="stmt"]
  230 -> 38 [style=dashed label="robotactions"]
  230 -> 39 [style=dashed label="robotmove"]
  230 -> 40 [style=dashed label="robotright"]
  230 -> 41 [style=dashed label="robotleft"]
  230 -> 42 [style=dashed label="robotwall"]
  230 -> 43 [style=dashed label="robotexit"]
  230 -> 44 [style=dashed label="iff"]
  230 -> 45 [style=dashed label="forr"]
  230 -> 46 [style=dashed label="function_head"]
  230 -> 47 [style=dashed label="function"]
  230 -> 48 [style=dashed label="callfunction"]
  230 -> 49 [style=dashed label="matrix"]
  230 -> 50 [style=dashed label="vector"]
  230 -> 51 [style=dashed label="vmdeclaration"]
  230 -> 52 [style=dashed label="declaration"]
  230 -> 53 [style=dashed label="assignment"]
  230 -> 54 [style=dashed label="print"]
  230 -> 55 [style=dashed label="expr"]
  230 -> 56 [style=dashed label="type"]
  230 -> 57 [style=dashed label="const"]
  231 [label="State 231\n\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l113 declaration: type VAR DECLARE matrix .  [NEWLINE, DOUBLEDOT]\l"]
  231 -> 105 [style=solid label="ELEMMULT"]
  231 -> 106 [style=solid label="'\\''"]
  231 -> 107 [style=solid label="LEFTSHIFT"]
  231 -> 108 [style=solid label="RIGHTSHIFT"]
  231 -> 109 [style=solid label="'*'"]
  231 -> "231R113" [style=solid]
 "231R113" [label="R113", fillcolor=3, shape=diamond, style=filled]
  232 [label="State 232\n\l 80 matrix: vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l112 declaration: type VAR DECLARE vector .  [NEWLINE, DOUBLEDOT]\l"]
  232 -> 111 [style=solid label="ELEMMULT"]
  232 -> 112 [style=solid label="'\\''"]
  232 -> 113 [style=solid label="LEFTSHIFT"]
  232 -> 114 [style=solid label="RIGHTSHIFT"]
  232 -> "232R112" [style=solid]
 "232R112" [label="R112", fillcolor=3, shape=diamond, style=filled]
  233 [label="State 233\n\l111 declaration: type VAR DECLARE expr .  [NEWLINE, DOUBLEDOT]\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  233 -> 120 [style=solid label="CONJUNCTION"]
  233 -> 121 [style=solid label="'<'"]
  233 -> 122 [style=solid label="'>'"]
  233 -> 123 [style=solid label="'+'"]
  233 -> 124 [style=solid label="'-'"]
  233 -> 125 [style=solid label="'/'"]
  233 -> "233R111" [style=solid]
 "233R111" [label="R111", fillcolor=3, shape=diamond, style=filled]
  234 [label="State 234\n\l 90 vector: VVARIABLE '(' vector ',' . '[' ']' ')'\l"]
  234 -> 260 [style=solid label="'['"]
  235 [label="State 235\n\l134 expr: VVARIABLE '(' expr ')' .\l"]
  235 -> "235R134" [style=solid]
 "235R134" [label="R134", fillcolor=3, shape=diamond, style=filled]
  236 [label="State 236\n\l 72 matrix: MVARIABLE '(' '[' ']' . ',' vector ')'\l 92 vector: MVARIABLE '(' '[' ']' . ',' expr ')'\l"]
  236 -> 261 [style=solid label="','"]
  237 [label="State 237\n\l 73 matrix: MVARIABLE '(' matrix ')' .\l"]
  237 -> "237R73" [style=solid]
 "237R73" [label="R73", fillcolor=3, shape=diamond, style=filled]
  238 [label="State 238\n\l 71 matrix: MVARIABLE '(' vector ',' . '[' ']' ')'\l"]
  238 -> 262 [style=solid label="'['"]
  239 [label="State 239\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 91 vector: MVARIABLE '(' expr ',' . '[' ']' ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l135     | MVARIABLE '(' expr ',' . expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  239 -> 74 [style=dotted]
  239 -> 5 [style=solid label="BOOL"]
  239 -> 6 [style=solid label="INTEGER"]
  239 -> 59 [style=solid label="VARIABLE"]
  239 -> 75 [style=solid label="VVARIABLE"]
  239 -> 76 [style=solid label="MVARIABLE"]
  239 -> 26 [style=solid label="MOVE"]
  239 -> 29 [style=solid label="ROBEX"]
  239 -> 30 [style=solid label="WALL"]
  239 -> 31 [style=solid label="'-'"]
  239 -> 32 [style=solid label="'!'"]
  239 -> 63 [style=solid label="'('"]
  239 -> 263 [style=solid label="'['"]
  239 -> 39 [style=dashed label="robotmove"]
  239 -> 42 [style=dashed label="robotwall"]
  239 -> 43 [style=dashed label="robotexit"]
  239 -> 264 [style=dashed label="expr"]
  239 -> 57 [style=dashed label="const"]
  240 [label="State 240\n\l 65 callfunc_args: callfunc_args ',' DFLT .\l"]
  240 -> "240R65" [style=solid]
 "240R65" [label="R65", fillcolor=3, shape=diamond, style=filled]
  241 [label="State 241\n\l 64 callfunc_args: callfunc_args ',' matrix .  [error, ',', ']']\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l"]
  241 -> 105 [style=solid label="ELEMMULT"]
  241 -> 106 [style=solid label="'\\''"]
  241 -> 107 [style=solid label="LEFTSHIFT"]
  241 -> 108 [style=solid label="RIGHTSHIFT"]
  241 -> 109 [style=solid label="'*'"]
  241 -> "241R64" [style=solid]
 "241R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
  242 [label="State 242\n\l 63 callfunc_args: callfunc_args ',' vector .  [error, ',', ']']\l 80 matrix: vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  242 -> 111 [style=solid label="ELEMMULT"]
  242 -> 112 [style=solid label="'\\''"]
  242 -> 113 [style=solid label="LEFTSHIFT"]
  242 -> 114 [style=solid label="RIGHTSHIFT"]
  242 -> "242R63" [style=solid]
 "242R63" [label="R63", fillcolor=3, shape=diamond, style=filled]
  243 [label="State 243\n\l 62 callfunc_args: callfunc_args ',' expr .  [error, ',', ']']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  243 -> 120 [style=solid label="CONJUNCTION"]
  243 -> 121 [style=solid label="'<'"]
  243 -> 122 [style=solid label="'>'"]
  243 -> 123 [style=solid label="'+'"]
  243 -> 124 [style=solid label="'-'"]
  243 -> 125 [style=solid label="'/'"]
  243 -> "243R62" [style=solid]
 "243R62" [label="R62", fillcolor=3, shape=diamond, style=filled]
  244 [label="State 244\n\l 91 vector: MVARIABLE '(' expr . ',' '[' ']' ')'\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  244 -> 120 [style=solid label="CONJUNCTION"]
  244 -> 265 [style=solid label="','"]
  244 -> 121 [style=solid label="'<'"]
  244 -> 122 [style=solid label="'>'"]
  244 -> 123 [style=solid label="'+'"]
  244 -> 124 [style=solid label="'-'"]
  244 -> 125 [style=solid label="'/'"]
  245 [label="State 245\n\l 90 vector: VVARIABLE '(' vector ',' '[' . ']' ')'\l104 vmdeclaration: VVARIABLE '(' vector ',' '[' . ']' ')' ASSIGN vector\l"]
  245 -> 266 [style=solid label="']'"]
  246 [label="State 246\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l103 vmdeclaration: VVARIABLE '(' expr ')' ASSIGN . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  246 -> 74 [style=dotted]
  246 -> 5 [style=solid label="BOOL"]
  246 -> 6 [style=solid label="INTEGER"]
  246 -> 59 [style=solid label="VARIABLE"]
  246 -> 75 [style=solid label="VVARIABLE"]
  246 -> 76 [style=solid label="MVARIABLE"]
  246 -> 26 [style=solid label="MOVE"]
  246 -> 29 [style=solid label="ROBEX"]
  246 -> 30 [style=solid label="WALL"]
  246 -> 31 [style=solid label="'-'"]
  246 -> 32 [style=solid label="'!'"]
  246 -> 63 [style=solid label="'('"]
  246 -> 39 [style=dashed label="robotmove"]
  246 -> 42 [style=dashed label="robotwall"]
  246 -> 43 [style=dashed label="robotexit"]
  246 -> 267 [style=dashed label="expr"]
  246 -> 57 [style=dashed label="const"]
  247 [label="State 247\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 72 matrix: MVARIABLE '(' '[' ']' ',' . vector ')'\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 92       | MVARIABLE '(' '[' ']' ',' . expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l107 vmdeclaration: MVARIABLE '(' '[' ']' ',' . expr ')' ASSIGN vector\l109              | MVARIABLE '(' '[' ']' ',' . vector ')' ASSIGN matrix\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  247 -> 89 [style=dotted]
  247 -> 5 [style=solid label="BOOL"]
  247 -> 6 [style=solid label="INTEGER"]
  247 -> 59 [style=solid label="VARIABLE"]
  247 -> 60 [style=solid label="VVARIABLE"]
  247 -> 90 [style=solid label="MVARIABLE"]
  247 -> 26 [style=solid label="MOVE"]
  247 -> 29 [style=solid label="ROBEX"]
  247 -> 30 [style=solid label="WALL"]
  247 -> 31 [style=solid label="'-'"]
  247 -> 32 [style=solid label="'!'"]
  247 -> 63 [style=solid label="'('"]
  247 -> 91 [style=solid label="'{'"]
  247 -> 39 [style=dashed label="robotmove"]
  247 -> 42 [style=dashed label="robotwall"]
  247 -> 43 [style=dashed label="robotexit"]
  247 -> 268 [style=dashed label="vector"]
  247 -> 269 [style=dashed label="expr"]
  247 -> 57 [style=dashed label="const"]
  248 [label="State 248\n\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l110 vmdeclaration: MVARIABLE '(' matrix ')' ASSIGN . matrix\l"]
  248 -> 143 [style=dotted]
  248 -> 138 [style=solid label="VVARIABLE"]
  248 -> 144 [style=solid label="MVARIABLE"]
  248 -> 35 [style=solid label="'{'"]
  248 -> 270 [style=dashed label="matrix"]
  248 -> 146 [style=dashed label="vector"]
  249 [label="State 249\n\l 71 matrix: MVARIABLE '(' vector ',' '[' . ']' ')'\l108 vmdeclaration: MVARIABLE '(' vector ',' '[' . ']' ')' ASSIGN matrix\l"]
  249 -> 271 [style=solid label="']'"]
  250 [label="State 250\n\l 91 vector: MVARIABLE '(' expr ',' '[' . ']' ')'\l106 vmdeclaration: MVARIABLE '(' expr ',' '[' . ']' ')' ASSIGN vector\l"]
  250 -> 272 [style=solid label="']'"]
  251 [label="State 251\n\l105 vmdeclaration: MVARIABLE '(' expr ',' expr . ')' ASSIGN expr\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l135     | MVARIABLE '(' expr ',' expr . ')'\l"]
  251 -> 120 [style=solid label="CONJUNCTION"]
  251 -> 121 [style=solid label="'<'"]
  251 -> 122 [style=solid label="'>'"]
  251 -> 123 [style=solid label="'+'"]
  251 -> 124 [style=solid label="'-'"]
  251 -> 125 [style=solid label="'/'"]
  251 -> 273 [style=solid label="')'"]
  252 [label="State 252\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l135     | MVARIABLE '(' expr ',' . expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  252 -> 74 [style=dotted]
  252 -> 5 [style=solid label="BOOL"]
  252 -> 6 [style=solid label="INTEGER"]
  252 -> 59 [style=solid label="VARIABLE"]
  252 -> 75 [style=solid label="VVARIABLE"]
  252 -> 76 [style=solid label="MVARIABLE"]
  252 -> 26 [style=solid label="MOVE"]
  252 -> 29 [style=solid label="ROBEX"]
  252 -> 30 [style=solid label="WALL"]
  252 -> 31 [style=solid label="'-'"]
  252 -> 32 [style=solid label="'!'"]
  252 -> 63 [style=solid label="'('"]
  252 -> 39 [style=dashed label="robotmove"]
  252 -> 42 [style=dashed label="robotwall"]
  252 -> 43 [style=dashed label="robotexit"]
  252 -> 264 [style=dashed label="expr"]
  252 -> 57 [style=dashed label="const"]
  253 [label="State 253\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 31    | IF expr NEWLINE begif stmts . endif\l 34 endif: . E\l 35      | . ENDIF\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 68 callfunction: . '(' return_func ')' DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  253 -> 96 [style=dotted]
  253 -> 5 [style=solid label="BOOL"]
  253 -> 6 [style=solid label="INTEGER"]
  253 -> 7 [style=solid label="VARIABLE"]
  253 -> 8 [style=solid label="VVARIABLE"]
  253 -> 9 [style=solid label="MVARIABLE"]
  253 -> 10 [style=solid label="CINT"]
  253 -> 11 [style=solid label="VINT"]
  253 -> 12 [style=solid label="MINT"]
  253 -> 13 [style=solid label="INT"]
  253 -> 14 [style=solid label="CVINT"]
  253 -> 15 [style=solid label="CMINT"]
  253 -> 16 [style=solid label="BOOLEAN"]
  253 -> 17 [style=solid label="CBOOLEAN"]
  253 -> 18 [style=solid label="VBOOLEAN"]
  253 -> 19 [style=solid label="MBOOLEAN"]
  253 -> 20 [style=solid label="CVBOOLEAN"]
  253 -> 21 [style=solid label="CMBOOLEAN"]
  253 -> 22 [style=solid label="NEWLINE"]
  253 -> 23 [style=solid label="PRINT"]
  253 -> 24 [style=solid label="IF"]
  253 -> 25 [style=solid label="FORR"]
  253 -> 274 [style=solid label="E"]
  253 -> 26 [style=solid label="MOVE"]
  253 -> 27 [style=solid label="RIGHT"]
  253 -> 28 [style=solid label="LEFT"]
  253 -> 29 [style=solid label="ROBEX"]
  253 -> 30 [style=solid label="WALL"]
  253 -> 275 [style=solid label="ENDIF"]
  253 -> 31 [style=solid label="'-'"]
  253 -> 32 [style=solid label="'!'"]
  253 -> 33 [style=solid label="'('"]
  253 -> 34 [style=solid label="'['"]
  253 -> 35 [style=solid label="'{'"]
  253 -> 97 [style=dashed label="stmt"]
  253 -> 38 [style=dashed label="robotactions"]
  253 -> 39 [style=dashed label="robotmove"]
  253 -> 40 [style=dashed label="robotright"]
  253 -> 41 [style=dashed label="robotleft"]
  253 -> 42 [style=dashed label="robotwall"]
  253 -> 43 [style=dashed label="robotexit"]
  253 -> 44 [style=dashed label="iff"]
  253 -> 276 [style=dashed label="endif"]
  253 -> 45 [style=dashed label="forr"]
  253 -> 46 [style=dashed label="function_head"]
  253 -> 47 [style=dashed label="function"]
  253 -> 48 [style=dashed label="callfunction"]
  253 -> 49 [style=dashed label="matrix"]
  253 -> 50 [style=dashed label="vector"]
  253 -> 51 [style=dashed label="vmdeclaration"]
  253 -> 52 [style=dashed label="declaration"]
  253 -> 53 [style=dashed label="assignment"]
  253 -> 54 [style=dashed label="print"]
  253 -> 55 [style=dashed label="expr"]
  253 -> 56 [style=dashed label="type"]
  253 -> 57 [style=dashed label="const"]
  254 [label="State 254\n\l 36 begfor: . B\l 37       | . BEGFOR\l 40 forr: FORR declaration DOUBLEDOT expr NEWLINE . begfor stmts endfor\l"]
  254 -> 277 [style=solid label="B"]
  254 -> 278 [style=solid label="BEGFOR"]
  254 -> 279 [style=dashed label="begfor"]
  255 [label="State 255\n\l 42 return_func: return_func ',' type VAR .\l"]
  255 -> "255R42" [style=solid]
 "255R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
  256 [label="State 256\n\l 68 callfunction: '(' return_func ')' DECLARE FVARIABLE . '[' callfunc_args ']'\l"]
  256 -> 280 [style=solid label="'['"]
  257 [label="State 257\n\l 55 function_head: '[' return_func ']' DECLARE FUNC . VAR '(' args_func ')'\l"]
  257 -> 281 [style=solid label="VAR"]
  258 [label="State 258\n\l 92 vector: MVARIABLE '(' '[' ']' . ',' expr ')'\l"]
  258 -> 282 [style=solid label="','"]
  259 [label="State 259\n\l 57 function: function_head B NEWLINE stmts E .\l"]
  259 -> "259R57" [style=solid]
 "259R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
  260 [label="State 260\n\l 90 vector: VVARIABLE '(' vector ',' '[' . ']' ')'\l"]
  260 -> 283 [style=solid label="']'"]
  261 [label="State 261\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 72 matrix: MVARIABLE '(' '[' ']' ',' . vector ')'\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 92       | MVARIABLE '(' '[' ']' ',' . expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  261 -> 89 [style=dotted]
  261 -> 5 [style=solid label="BOOL"]
  261 -> 6 [style=solid label="INTEGER"]
  261 -> 59 [style=solid label="VARIABLE"]
  261 -> 60 [style=solid label="VVARIABLE"]
  261 -> 90 [style=solid label="MVARIABLE"]
  261 -> 26 [style=solid label="MOVE"]
  261 -> 29 [style=solid label="ROBEX"]
  261 -> 30 [style=solid label="WALL"]
  261 -> 31 [style=solid label="'-'"]
  261 -> 32 [style=solid label="'!'"]
  261 -> 63 [style=solid label="'('"]
  261 -> 91 [style=solid label="'{'"]
  261 -> 39 [style=dashed label="robotmove"]
  261 -> 42 [style=dashed label="robotwall"]
  261 -> 43 [style=dashed label="robotexit"]
  261 -> 284 [style=dashed label="vector"]
  261 -> 285 [style=dashed label="expr"]
  261 -> 57 [style=dashed label="const"]
  262 [label="State 262\n\l 71 matrix: MVARIABLE '(' vector ',' '[' . ']' ')'\l"]
  262 -> 286 [style=solid label="']'"]
  263 [label="State 263\n\l 91 vector: MVARIABLE '(' expr ',' '[' . ']' ')'\l"]
  263 -> 287 [style=solid label="']'"]
  264 [label="State 264\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l135     | MVARIABLE '(' expr ',' expr . ')'\l"]
  264 -> 120 [style=solid label="CONJUNCTION"]
  264 -> 121 [style=solid label="'<'"]
  264 -> 122 [style=solid label="'>'"]
  264 -> 123 [style=solid label="'+'"]
  264 -> 124 [style=solid label="'-'"]
  264 -> 125 [style=solid label="'/'"]
  264 -> 288 [style=solid label="')'"]
  265 [label="State 265\n\l 91 vector: MVARIABLE '(' expr ',' . '[' ']' ')'\l"]
  265 -> 263 [style=solid label="'['"]
  266 [label="State 266\n\l 90 vector: VVARIABLE '(' vector ',' '[' ']' . ')'\l104 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' . ')' ASSIGN vector\l"]
  266 -> 289 [style=solid label="')'"]
  267 [label="State 267\n\l103 vmdeclaration: VVARIABLE '(' expr ')' ASSIGN expr .  [NEWLINE]\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  267 -> 120 [style=solid label="CONJUNCTION"]
  267 -> 121 [style=solid label="'<'"]
  267 -> 122 [style=solid label="'>'"]
  267 -> 123 [style=solid label="'+'"]
  267 -> 124 [style=solid label="'-'"]
  267 -> 125 [style=solid label="'/'"]
  267 -> "267R103" [style=solid]
 "267R103" [label="R103", fillcolor=3, shape=diamond, style=filled]
  268 [label="State 268\n\l 72 matrix: MVARIABLE '(' '[' ']' ',' vector . ')'\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l109 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector . ')' ASSIGN matrix\l"]
  268 -> 111 [style=solid label="ELEMMULT"]
  268 -> 113 [style=solid label="LEFTSHIFT"]
  268 -> 114 [style=solid label="RIGHTSHIFT"]
  268 -> 290 [style=solid label="')'"]
  269 [label="State 269\n\l 92 vector: MVARIABLE '(' '[' ']' ',' expr . ')'\l107 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr . ')' ASSIGN vector\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  269 -> 120 [style=solid label="CONJUNCTION"]
  269 -> 121 [style=solid label="'<'"]
  269 -> 122 [style=solid label="'>'"]
  269 -> 123 [style=solid label="'+'"]
  269 -> 124 [style=solid label="'-'"]
  269 -> 125 [style=solid label="'/'"]
  269 -> 291 [style=solid label="')'"]
  270 [label="State 270\n\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l110 vmdeclaration: MVARIABLE '(' matrix ')' ASSIGN matrix .  [NEWLINE]\l"]
  270 -> 105 [style=solid label="ELEMMULT"]
  270 -> 106 [style=solid label="'\\''"]
  270 -> 107 [style=solid label="LEFTSHIFT"]
  270 -> 108 [style=solid label="RIGHTSHIFT"]
  270 -> 109 [style=solid label="'*'"]
  270 -> "270R110" [style=solid]
 "270R110" [label="R110", fillcolor=3, shape=diamond, style=filled]
  271 [label="State 271\n\l 71 matrix: MVARIABLE '(' vector ',' '[' ']' . ')'\l108 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' . ')' ASSIGN matrix\l"]
  271 -> 292 [style=solid label="')'"]
  272 [label="State 272\n\l 91 vector: MVARIABLE '(' expr ',' '[' ']' . ')'\l106 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' . ')' ASSIGN vector\l"]
  272 -> 293 [style=solid label="')'"]
  273 [label="State 273\n\l105 vmdeclaration: MVARIABLE '(' expr ',' expr ')' . ASSIGN expr\l135 expr: MVARIABLE '(' expr ',' expr ')' .  [NEWLINE, CONJUNCTION, '<', '>', '+', '-', '/', ')']\l"]
  273 -> 294 [style=solid label="ASSIGN"]
  273 -> "273R135" [style=solid]
 "273R135" [label="R135", fillcolor=3, shape=diamond, style=filled]
  274 [label="State 274\n\l 34 endif: E .\l"]
  274 -> "274R34" [style=solid]
 "274R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  275 [label="State 275\n\l 35 endif: ENDIF .\l"]
  275 -> "275R35" [style=solid]
 "275R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  276 [label="State 276\n\l 31 iff: IF expr NEWLINE begif stmts endif .\l"]
  276 -> "276R31" [style=solid]
 "276R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  277 [label="State 277\n\l 36 begfor: B .\l"]
  277 -> "277R36" [style=solid]
 "277R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  278 [label="State 278\n\l 37 begfor: BEGFOR .\l"]
  278 -> "278R37" [style=solid]
 "278R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  279 [label="State 279\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 40     | FORR declaration DOUBLEDOT expr NEWLINE begfor . stmts endfor\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 68 callfunction: . '(' return_func ')' DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  279 -> 82 [style=dotted]
  279 -> 5 [style=solid label="BOOL"]
  279 -> 6 [style=solid label="INTEGER"]
  279 -> 7 [style=solid label="VARIABLE"]
  279 -> 8 [style=solid label="VVARIABLE"]
  279 -> 9 [style=solid label="MVARIABLE"]
  279 -> 10 [style=solid label="CINT"]
  279 -> 11 [style=solid label="VINT"]
  279 -> 12 [style=solid label="MINT"]
  279 -> 13 [style=solid label="INT"]
  279 -> 14 [style=solid label="CVINT"]
  279 -> 15 [style=solid label="CMINT"]
  279 -> 16 [style=solid label="BOOLEAN"]
  279 -> 17 [style=solid label="CBOOLEAN"]
  279 -> 18 [style=solid label="VBOOLEAN"]
  279 -> 19 [style=solid label="MBOOLEAN"]
  279 -> 20 [style=solid label="CVBOOLEAN"]
  279 -> 21 [style=solid label="CMBOOLEAN"]
  279 -> 22 [style=solid label="NEWLINE"]
  279 -> 23 [style=solid label="PRINT"]
  279 -> 24 [style=solid label="IF"]
  279 -> 25 [style=solid label="FORR"]
  279 -> 26 [style=solid label="MOVE"]
  279 -> 27 [style=solid label="RIGHT"]
  279 -> 28 [style=solid label="LEFT"]
  279 -> 29 [style=solid label="ROBEX"]
  279 -> 30 [style=solid label="WALL"]
  279 -> 31 [style=solid label="'-'"]
  279 -> 32 [style=solid label="'!'"]
  279 -> 33 [style=solid label="'('"]
  279 -> 34 [style=solid label="'['"]
  279 -> 35 [style=solid label="'{'"]
  279 -> 295 [style=dashed label="stmts"]
  279 -> 37 [style=dashed label="stmt"]
  279 -> 38 [style=dashed label="robotactions"]
  279 -> 39 [style=dashed label="robotmove"]
  279 -> 40 [style=dashed label="robotright"]
  279 -> 41 [style=dashed label="robotleft"]
  279 -> 42 [style=dashed label="robotwall"]
  279 -> 43 [style=dashed label="robotexit"]
  279 -> 44 [style=dashed label="iff"]
  279 -> 45 [style=dashed label="forr"]
  279 -> 46 [style=dashed label="function_head"]
  279 -> 47 [style=dashed label="function"]
  279 -> 48 [style=dashed label="callfunction"]
  279 -> 49 [style=dashed label="matrix"]
  279 -> 50 [style=dashed label="vector"]
  279 -> 51 [style=dashed label="vmdeclaration"]
  279 -> 52 [style=dashed label="declaration"]
  279 -> 53 [style=dashed label="assignment"]
  279 -> 54 [style=dashed label="print"]
  279 -> 55 [style=dashed label="expr"]
  279 -> 56 [style=dashed label="type"]
  279 -> 57 [style=dashed label="const"]
  280 [label="State 280\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 58 callfunc_args: . expr\l 59              | . vector\l 60              | . matrix\l 61              | . DFLT\l 62              | . callfunc_args ',' expr\l 63              | . callfunc_args ',' vector\l 64              | . callfunc_args ',' matrix\l 65              | . callfunc_args ',' DFLT\l 66              | . callfunc_args error\l 67              | . error\l 68 callfunction: '(' return_func ')' DECLARE FVARIABLE '[' . callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  280 -> 130 [style=dotted]
  280 -> 5 [style=solid label="BOOL"]
  280 -> 6 [style=solid label="INTEGER"]
  280 -> 59 [style=solid label="VARIABLE"]
  280 -> 60 [style=solid label="VVARIABLE"]
  280 -> 61 [style=solid label="MVARIABLE"]
  280 -> 26 [style=solid label="MOVE"]
  280 -> 29 [style=solid label="ROBEX"]
  280 -> 30 [style=solid label="WALL"]
  280 -> 131 [style=solid label="DFLT"]
  280 -> 31 [style=solid label="'-'"]
  280 -> 32 [style=solid label="'!'"]
  280 -> 63 [style=solid label="'('"]
  280 -> 35 [style=solid label="'{'"]
  280 -> 39 [style=dashed label="robotmove"]
  280 -> 42 [style=dashed label="robotwall"]
  280 -> 43 [style=dashed label="robotexit"]
  280 -> 296 [style=dashed label="callfunc_args"]
  280 -> 133 [style=dashed label="matrix"]
  280 -> 134 [style=dashed label="vector"]
  280 -> 135 [style=dashed label="expr"]
  280 -> 57 [style=dashed label="const"]
  281 [label="State 281\n\l 55 function_head: '[' return_func ']' DECLARE FUNC VAR . '(' args_func ')'\l"]
  281 -> 297 [style=solid label="'('"]
  282 [label="State 282\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 92 vector: MVARIABLE '(' '[' ']' ',' . expr ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  282 -> 74 [style=dotted]
  282 -> 5 [style=solid label="BOOL"]
  282 -> 6 [style=solid label="INTEGER"]
  282 -> 59 [style=solid label="VARIABLE"]
  282 -> 75 [style=solid label="VVARIABLE"]
  282 -> 76 [style=solid label="MVARIABLE"]
  282 -> 26 [style=solid label="MOVE"]
  282 -> 29 [style=solid label="ROBEX"]
  282 -> 30 [style=solid label="WALL"]
  282 -> 31 [style=solid label="'-'"]
  282 -> 32 [style=solid label="'!'"]
  282 -> 63 [style=solid label="'('"]
  282 -> 39 [style=dashed label="robotmove"]
  282 -> 42 [style=dashed label="robotwall"]
  282 -> 43 [style=dashed label="robotexit"]
  282 -> 285 [style=dashed label="expr"]
  282 -> 57 [style=dashed label="const"]
  283 [label="State 283\n\l 90 vector: VVARIABLE '(' vector ',' '[' ']' . ')'\l"]
  283 -> 298 [style=solid label="')'"]
  284 [label="State 284\n\l 72 matrix: MVARIABLE '(' '[' ']' ',' vector . ')'\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  284 -> 111 [style=solid label="ELEMMULT"]
  284 -> 113 [style=solid label="LEFTSHIFT"]
  284 -> 114 [style=solid label="RIGHTSHIFT"]
  284 -> 299 [style=solid label="')'"]
  285 [label="State 285\n\l 92 vector: MVARIABLE '(' '[' ']' ',' expr . ')'\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  285 -> 120 [style=solid label="CONJUNCTION"]
  285 -> 121 [style=solid label="'<'"]
  285 -> 122 [style=solid label="'>'"]
  285 -> 123 [style=solid label="'+'"]
  285 -> 124 [style=solid label="'-'"]
  285 -> 125 [style=solid label="'/'"]
  285 -> 300 [style=solid label="')'"]
  286 [label="State 286\n\l 71 matrix: MVARIABLE '(' vector ',' '[' ']' . ')'\l"]
  286 -> 301 [style=solid label="')'"]
  287 [label="State 287\n\l 91 vector: MVARIABLE '(' expr ',' '[' ']' . ')'\l"]
  287 -> 302 [style=solid label="')'"]
  288 [label="State 288\n\l135 expr: MVARIABLE '(' expr ',' expr ')' .\l"]
  288 -> "288R135" [style=solid]
 "288R135" [label="R135", fillcolor=3, shape=diamond, style=filled]
  289 [label="State 289\n\l 90 vector: VVARIABLE '(' vector ',' '[' ']' ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l104 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' ')' . ASSIGN vector\l"]
  289 -> 303 [style=solid label="ASSIGN"]
  289 -> "289R90" [style=solid]
 "289R90" [label="R90", fillcolor=3, shape=diamond, style=filled]
  290 [label="State 290\n\l 72 matrix: MVARIABLE '(' '[' ']' ',' vector ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l109 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector ')' . ASSIGN matrix\l"]
  290 -> 304 [style=solid label="ASSIGN"]
  290 -> "290R72" [style=solid]
 "290R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
  291 [label="State 291\n\l 92 vector: MVARIABLE '(' '[' ']' ',' expr ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l107 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr ')' . ASSIGN vector\l"]
  291 -> 305 [style=solid label="ASSIGN"]
  291 -> "291R92" [style=solid]
 "291R92" [label="R92", fillcolor=3, shape=diamond, style=filled]
  292 [label="State 292\n\l 71 matrix: MVARIABLE '(' vector ',' '[' ']' ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l108 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' ')' . ASSIGN matrix\l"]
  292 -> 306 [style=solid label="ASSIGN"]
  292 -> "292R71" [style=solid]
 "292R71" [label="R71", fillcolor=3, shape=diamond, style=filled]
  293 [label="State 293\n\l 91 vector: MVARIABLE '(' expr ',' '[' ']' ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l106 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' ')' . ASSIGN vector\l"]
  293 -> 307 [style=solid label="ASSIGN"]
  293 -> "293R91" [style=solid]
 "293R91" [label="R91", fillcolor=3, shape=diamond, style=filled]
  294 [label="State 294\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l105 vmdeclaration: MVARIABLE '(' expr ',' expr ')' ASSIGN . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  294 -> 74 [style=dotted]
  294 -> 5 [style=solid label="BOOL"]
  294 -> 6 [style=solid label="INTEGER"]
  294 -> 59 [style=solid label="VARIABLE"]
  294 -> 75 [style=solid label="VVARIABLE"]
  294 -> 76 [style=solid label="MVARIABLE"]
  294 -> 26 [style=solid label="MOVE"]
  294 -> 29 [style=solid label="ROBEX"]
  294 -> 30 [style=solid label="WALL"]
  294 -> 31 [style=solid label="'-'"]
  294 -> 32 [style=solid label="'!'"]
  294 -> 63 [style=solid label="'('"]
  294 -> 39 [style=dashed label="robotmove"]
  294 -> 42 [style=dashed label="robotwall"]
  294 -> 43 [style=dashed label="robotexit"]
  294 -> 308 [style=dashed label="expr"]
  294 -> 57 [style=dashed label="const"]
  295 [label="State 295\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 38 endfor: . E\l 39       | . ENDFOR\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 40     | FORR declaration DOUBLEDOT expr NEWLINE begfor stmts . endfor\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 68 callfunction: . '(' return_func ')' DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  295 -> 96 [style=dotted]
  295 -> 5 [style=solid label="BOOL"]
  295 -> 6 [style=solid label="INTEGER"]
  295 -> 7 [style=solid label="VARIABLE"]
  295 -> 8 [style=solid label="VVARIABLE"]
  295 -> 9 [style=solid label="MVARIABLE"]
  295 -> 10 [style=solid label="CINT"]
  295 -> 11 [style=solid label="VINT"]
  295 -> 12 [style=solid label="MINT"]
  295 -> 13 [style=solid label="INT"]
  295 -> 14 [style=solid label="CVINT"]
  295 -> 15 [style=solid label="CMINT"]
  295 -> 16 [style=solid label="BOOLEAN"]
  295 -> 17 [style=solid label="CBOOLEAN"]
  295 -> 18 [style=solid label="VBOOLEAN"]
  295 -> 19 [style=solid label="MBOOLEAN"]
  295 -> 20 [style=solid label="CVBOOLEAN"]
  295 -> 21 [style=solid label="CMBOOLEAN"]
  295 -> 22 [style=solid label="NEWLINE"]
  295 -> 23 [style=solid label="PRINT"]
  295 -> 24 [style=solid label="IF"]
  295 -> 25 [style=solid label="FORR"]
  295 -> 309 [style=solid label="E"]
  295 -> 26 [style=solid label="MOVE"]
  295 -> 27 [style=solid label="RIGHT"]
  295 -> 28 [style=solid label="LEFT"]
  295 -> 29 [style=solid label="ROBEX"]
  295 -> 30 [style=solid label="WALL"]
  295 -> 310 [style=solid label="ENDFOR"]
  295 -> 31 [style=solid label="'-'"]
  295 -> 32 [style=solid label="'!'"]
  295 -> 33 [style=solid label="'('"]
  295 -> 34 [style=solid label="'['"]
  295 -> 35 [style=solid label="'{'"]
  295 -> 97 [style=dashed label="stmt"]
  295 -> 38 [style=dashed label="robotactions"]
  295 -> 39 [style=dashed label="robotmove"]
  295 -> 40 [style=dashed label="robotright"]
  295 -> 41 [style=dashed label="robotleft"]
  295 -> 42 [style=dashed label="robotwall"]
  295 -> 43 [style=dashed label="robotexit"]
  295 -> 44 [style=dashed label="iff"]
  295 -> 311 [style=dashed label="endfor"]
  295 -> 45 [style=dashed label="forr"]
  295 -> 46 [style=dashed label="function_head"]
  295 -> 47 [style=dashed label="function"]
  295 -> 48 [style=dashed label="callfunction"]
  295 -> 49 [style=dashed label="matrix"]
  295 -> 50 [style=dashed label="vector"]
  295 -> 51 [style=dashed label="vmdeclaration"]
  295 -> 52 [style=dashed label="declaration"]
  295 -> 53 [style=dashed label="assignment"]
  295 -> 54 [style=dashed label="print"]
  295 -> 55 [style=dashed label="expr"]
  295 -> 56 [style=dashed label="type"]
  295 -> 57 [style=dashed label="const"]
  296 [label="State 296\n\l 62 callfunc_args: callfunc_args . ',' expr\l 63              | callfunc_args . ',' vector\l 64              | callfunc_args . ',' matrix\l 65              | callfunc_args . ',' DFLT\l 66              | callfunc_args . error\l 68 callfunction: '(' return_func ')' DECLARE FVARIABLE '[' callfunc_args . ']'\l"]
  296 -> 199 [style=dotted]
  296 -> 200 [style=solid label="','"]
  296 -> 312 [style=solid label="']'"]
  297 [label="State 297\n\l 44 args_func: . '[' type VAR\l 45          | . '[' type VAR DECLARE expr\l 46          | . '[' type VAR DECLARE vector\l 47          | . '[' type VAR DECLARE matrix\l 48          | . args_func ',' type VAR\l 49          | . args_func ',' type VAR DECLARE expr\l 50          | . args_func ',' type VAR DECLARE vector\l 51          | . args_func ',' type VAR DECLARE matrix\l 52          | . args_func ']'\l 53          | . args_func error\l 54          | . error\l 55 function_head: '[' return_func ']' DECLARE FUNC VAR '(' . args_func ')'\l"]
  297 -> 313 [style=dotted]
  297 -> 314 [style=solid label="'['"]
  297 -> 315 [style=dashed label="args_func"]
  298 [label="State 298\n\l 90 vector: VVARIABLE '(' vector ',' '[' ']' ')' .\l"]
  298 -> "298R90" [style=solid]
 "298R90" [label="R90", fillcolor=3, shape=diamond, style=filled]
  299 [label="State 299\n\l 72 matrix: MVARIABLE '(' '[' ']' ',' vector ')' .\l"]
  299 -> "299R72" [style=solid]
 "299R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
  300 [label="State 300\n\l 92 vector: MVARIABLE '(' '[' ']' ',' expr ')' .\l"]
  300 -> "300R92" [style=solid]
 "300R92" [label="R92", fillcolor=3, shape=diamond, style=filled]
  301 [label="State 301\n\l 71 matrix: MVARIABLE '(' vector ',' '[' ']' ')' .\l"]
  301 -> "301R71" [style=solid]
 "301R71" [label="R71", fillcolor=3, shape=diamond, style=filled]
  302 [label="State 302\n\l 91 vector: MVARIABLE '(' expr ',' '[' ']' ')' .\l"]
  302 -> "302R91" [style=solid]
 "302R91" [label="R91", fillcolor=3, shape=diamond, style=filled]
  303 [label="State 303\n\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l104 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN . vector\l"]
  303 -> 137 [style=dotted]
  303 -> 138 [style=solid label="VVARIABLE"]
  303 -> 139 [style=solid label="MVARIABLE"]
  303 -> 91 [style=solid label="'{'"]
  303 -> 316 [style=dashed label="vector"]
  304 [label="State 304\n\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l109 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN . matrix\l"]
  304 -> 143 [style=dotted]
  304 -> 138 [style=solid label="VVARIABLE"]
  304 -> 144 [style=solid label="MVARIABLE"]
  304 -> 35 [style=solid label="'{'"]
  304 -> 317 [style=dashed label="matrix"]
  304 -> 146 [style=dashed label="vector"]
  305 [label="State 305\n\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l107 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN . vector\l"]
  305 -> 137 [style=dotted]
  305 -> 138 [style=solid label="VVARIABLE"]
  305 -> 139 [style=solid label="MVARIABLE"]
  305 -> 91 [style=solid label="'{'"]
  305 -> 318 [style=dashed label="vector"]
  306 [label="State 306\n\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l108 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN . matrix\l"]
  306 -> 143 [style=dotted]
  306 -> 138 [style=solid label="VVARIABLE"]
  306 -> 144 [style=solid label="MVARIABLE"]
  306 -> 35 [style=solid label="'{'"]
  306 -> 319 [style=dashed label="matrix"]
  306 -> 146 [style=dashed label="vector"]
  307 [label="State 307\n\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l106 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN . vector\l"]
  307 -> 137 [style=dotted]
  307 -> 138 [style=solid label="VVARIABLE"]
  307 -> 139 [style=solid label="MVARIABLE"]
  307 -> 91 [style=solid label="'{'"]
  307 -> 320 [style=dashed label="vector"]
  308 [label="State 308\n\l105 vmdeclaration: MVARIABLE '(' expr ',' expr ')' ASSIGN expr .  [NEWLINE]\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  308 -> 120 [style=solid label="CONJUNCTION"]
  308 -> 121 [style=solid label="'<'"]
  308 -> 122 [style=solid label="'>'"]
  308 -> 123 [style=solid label="'+'"]
  308 -> 124 [style=solid label="'-'"]
  308 -> 125 [style=solid label="'/'"]
  308 -> "308R105" [style=solid]
 "308R105" [label="R105", fillcolor=3, shape=diamond, style=filled]
  309 [label="State 309\n\l 38 endfor: E .\l"]
  309 -> "309R38" [style=solid]
 "309R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  310 [label="State 310\n\l 39 endfor: ENDFOR .\l"]
  310 -> "310R39" [style=solid]
 "310R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  311 [label="State 311\n\l 40 forr: FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor .\l"]
  311 -> "311R40" [style=solid]
 "311R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  312 [label="State 312\n\l 68 callfunction: '(' return_func ')' DECLARE FVARIABLE '[' callfunc_args ']' .\l"]
  312 -> "312R68" [style=solid]
 "312R68" [label="R68", fillcolor=3, shape=diamond, style=filled]
  313 [label="State 313\n\l 54 args_func: error .\l"]
  313 -> "313R54" [style=solid]
 "313R54" [label="R54", fillcolor=3, shape=diamond, style=filled]
  314 [label="State 314\n\l 44 args_func: '[' . type VAR\l 45          | '[' . type VAR DECLARE expr\l 46          | '[' . type VAR DECLARE vector\l 47          | '[' . type VAR DECLARE matrix\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l"]
  314 -> 10 [style=solid label="CINT"]
  314 -> 11 [style=solid label="VINT"]
  314 -> 12 [style=solid label="MINT"]
  314 -> 13 [style=solid label="INT"]
  314 -> 14 [style=solid label="CVINT"]
  314 -> 15 [style=solid label="CMINT"]
  314 -> 16 [style=solid label="BOOLEAN"]
  314 -> 17 [style=solid label="CBOOLEAN"]
  314 -> 18 [style=solid label="VBOOLEAN"]
  314 -> 19 [style=solid label="MBOOLEAN"]
  314 -> 20 [style=solid label="CVBOOLEAN"]
  314 -> 21 [style=solid label="CMBOOLEAN"]
  314 -> 321 [style=dashed label="type"]
  315 [label="State 315\n\l 48 args_func: args_func . ',' type VAR\l 49          | args_func . ',' type VAR DECLARE expr\l 50          | args_func . ',' type VAR DECLARE vector\l 51          | args_func . ',' type VAR DECLARE matrix\l 52          | args_func . ']'\l 53          | args_func . error\l 55 function_head: '[' return_func ']' DECLARE FUNC VAR '(' args_func . ')'\l"]
  315 -> 322 [style=dotted]
  315 -> 323 [style=solid label="','"]
  315 -> 324 [style=solid label="')'"]
  315 -> 325 [style=solid label="']'"]
  316 [label="State 316\n\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l104 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector .  [NEWLINE]\l"]
  316 -> 111 [style=solid label="ELEMMULT"]
  316 -> 113 [style=solid label="LEFTSHIFT"]
  316 -> 114 [style=solid label="RIGHTSHIFT"]
  316 -> "316R104" [style=solid]
 "316R104" [label="R104", fillcolor=3, shape=diamond, style=filled]
  317 [label="State 317\n\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l109 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix .  [NEWLINE]\l"]
  317 -> 105 [style=solid label="ELEMMULT"]
  317 -> 106 [style=solid label="'\\''"]
  317 -> 107 [style=solid label="LEFTSHIFT"]
  317 -> 108 [style=solid label="RIGHTSHIFT"]
  317 -> 109 [style=solid label="'*'"]
  317 -> "317R109" [style=solid]
 "317R109" [label="R109", fillcolor=3, shape=diamond, style=filled]
  318 [label="State 318\n\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l107 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector .  [NEWLINE]\l"]
  318 -> 111 [style=solid label="ELEMMULT"]
  318 -> 113 [style=solid label="LEFTSHIFT"]
  318 -> 114 [style=solid label="RIGHTSHIFT"]
  318 -> "318R107" [style=solid]
 "318R107" [label="R107", fillcolor=3, shape=diamond, style=filled]
  319 [label="State 319\n\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l108 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix .  [NEWLINE]\l"]
  319 -> 105 [style=solid label="ELEMMULT"]
  319 -> 106 [style=solid label="'\\''"]
  319 -> 107 [style=solid label="LEFTSHIFT"]
  319 -> 108 [style=solid label="RIGHTSHIFT"]
  319 -> 109 [style=solid label="'*'"]
  319 -> "319R108" [style=solid]
 "319R108" [label="R108", fillcolor=3, shape=diamond, style=filled]
  320 [label="State 320\n\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l106 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector .  [NEWLINE]\l"]
  320 -> 111 [style=solid label="ELEMMULT"]
  320 -> 113 [style=solid label="LEFTSHIFT"]
  320 -> 114 [style=solid label="RIGHTSHIFT"]
  320 -> "320R106" [style=solid]
 "320R106" [label="R106", fillcolor=3, shape=diamond, style=filled]
  321 [label="State 321\n\l 44 args_func: '[' type . VAR\l 45          | '[' type . VAR DECLARE expr\l 46          | '[' type . VAR DECLARE vector\l 47          | '[' type . VAR DECLARE matrix\l"]
  321 -> 326 [style=solid label="VAR"]
  322 [label="State 322\n\l 53 args_func: args_func error .\l"]
  322 -> "322R53" [style=solid]
 "322R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
  323 [label="State 323\n\l 48 args_func: args_func ',' . type VAR\l 49          | args_func ',' . type VAR DECLARE expr\l 50          | args_func ',' . type VAR DECLARE vector\l 51          | args_func ',' . type VAR DECLARE matrix\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l"]
  323 -> 10 [style=solid label="CINT"]
  323 -> 11 [style=solid label="VINT"]
  323 -> 12 [style=solid label="MINT"]
  323 -> 13 [style=solid label="INT"]
  323 -> 14 [style=solid label="CVINT"]
  323 -> 15 [style=solid label="CMINT"]
  323 -> 16 [style=solid label="BOOLEAN"]
  323 -> 17 [style=solid label="CBOOLEAN"]
  323 -> 18 [style=solid label="VBOOLEAN"]
  323 -> 19 [style=solid label="MBOOLEAN"]
  323 -> 20 [style=solid label="CVBOOLEAN"]
  323 -> 21 [style=solid label="CMBOOLEAN"]
  323 -> 327 [style=dashed label="type"]
  324 [label="State 324\n\l 55 function_head: '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' .\l"]
  324 -> "324R55" [style=solid]
 "324R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  325 [label="State 325\n\l 52 args_func: args_func ']' .\l"]
  325 -> "325R52" [style=solid]
 "325R52" [label="R52", fillcolor=3, shape=diamond, style=filled]
  326 [label="State 326\n\l 44 args_func: '[' type VAR .  [error, ',', ')', ']']\l 45          | '[' type VAR . DECLARE expr\l 46          | '[' type VAR . DECLARE vector\l 47          | '[' type VAR . DECLARE matrix\l"]
  326 -> 328 [style=solid label="DECLARE"]
  326 -> "326R44" [style=solid]
 "326R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  327 [label="State 327\n\l 48 args_func: args_func ',' type . VAR\l 49          | args_func ',' type . VAR DECLARE expr\l 50          | args_func ',' type . VAR DECLARE vector\l 51          | args_func ',' type . VAR DECLARE matrix\l"]
  327 -> 329 [style=solid label="VAR"]
  328 [label="State 328\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 45 args_func: '[' type VAR DECLARE . expr\l 46          | '[' type VAR DECLARE . vector\l 47          | '[' type VAR DECLARE . matrix\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  328 -> 58 [style=dotted]
  328 -> 5 [style=solid label="BOOL"]
  328 -> 6 [style=solid label="INTEGER"]
  328 -> 59 [style=solid label="VARIABLE"]
  328 -> 60 [style=solid label="VVARIABLE"]
  328 -> 61 [style=solid label="MVARIABLE"]
  328 -> 26 [style=solid label="MOVE"]
  328 -> 29 [style=solid label="ROBEX"]
  328 -> 30 [style=solid label="WALL"]
  328 -> 31 [style=solid label="'-'"]
  328 -> 32 [style=solid label="'!'"]
  328 -> 63 [style=solid label="'('"]
  328 -> 35 [style=solid label="'{'"]
  328 -> 39 [style=dashed label="robotmove"]
  328 -> 42 [style=dashed label="robotwall"]
  328 -> 43 [style=dashed label="robotexit"]
  328 -> 330 [style=dashed label="matrix"]
  328 -> 331 [style=dashed label="vector"]
  328 -> 332 [style=dashed label="expr"]
  328 -> 57 [style=dashed label="const"]
  329 [label="State 329\n\l 48 args_func: args_func ',' type VAR .  [error, ',', ')', ']']\l 49          | args_func ',' type VAR . DECLARE expr\l 50          | args_func ',' type VAR . DECLARE vector\l 51          | args_func ',' type VAR . DECLARE matrix\l"]
  329 -> 333 [style=solid label="DECLARE"]
  329 -> "329R48" [style=solid]
 "329R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  330 [label="State 330\n\l 47 args_func: '[' type VAR DECLARE matrix .  [error, ',', ')', ']']\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l"]
  330 -> 105 [style=solid label="ELEMMULT"]
  330 -> 106 [style=solid label="'\\''"]
  330 -> 107 [style=solid label="LEFTSHIFT"]
  330 -> 108 [style=solid label="RIGHTSHIFT"]
  330 -> 109 [style=solid label="'*'"]
  330 -> "330R47" [style=solid]
 "330R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  331 [label="State 331\n\l 46 args_func: '[' type VAR DECLARE vector .  [error, ',', ')', ']']\l 80 matrix: vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  331 -> 111 [style=solid label="ELEMMULT"]
  331 -> 112 [style=solid label="'\\''"]
  331 -> 113 [style=solid label="LEFTSHIFT"]
  331 -> 114 [style=solid label="RIGHTSHIFT"]
  331 -> "331R46" [style=solid]
 "331R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
  332 [label="State 332\n\l 45 args_func: '[' type VAR DECLARE expr .  [error, ',', ')', ']']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  332 -> 120 [style=solid label="CONJUNCTION"]
  332 -> 121 [style=solid label="'<'"]
  332 -> 122 [style=solid label="'>'"]
  332 -> 123 [style=solid label="'+'"]
  332 -> 124 [style=solid label="'-'"]
  332 -> 125 [style=solid label="'/'"]
  332 -> "332R45" [style=solid]
 "332R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
  333 [label="State 333\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 49 args_func: args_func ',' type VAR DECLARE . expr\l 50          | args_func ',' type VAR DECLARE . vector\l 51          | args_func ',' type VAR DECLARE . matrix\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  333 -> 58 [style=dotted]
  333 -> 5 [style=solid label="BOOL"]
  333 -> 6 [style=solid label="INTEGER"]
  333 -> 59 [style=solid label="VARIABLE"]
  333 -> 60 [style=solid label="VVARIABLE"]
  333 -> 61 [style=solid label="MVARIABLE"]
  333 -> 26 [style=solid label="MOVE"]
  333 -> 29 [style=solid label="ROBEX"]
  333 -> 30 [style=solid label="WALL"]
  333 -> 31 [style=solid label="'-'"]
  333 -> 32 [style=solid label="'!'"]
  333 -> 63 [style=solid label="'('"]
  333 -> 35 [style=solid label="'{'"]
  333 -> 39 [style=dashed label="robotmove"]
  333 -> 42 [style=dashed label="robotwall"]
  333 -> 43 [style=dashed label="robotexit"]
  333 -> 334 [style=dashed label="matrix"]
  333 -> 335 [style=dashed label="vector"]
  333 -> 336 [style=dashed label="expr"]
  333 -> 57 [style=dashed label="const"]
  334 [label="State 334\n\l 51 args_func: args_func ',' type VAR DECLARE matrix .  [error, ',', ')', ']']\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l"]
  334 -> 105 [style=solid label="ELEMMULT"]
  334 -> 106 [style=solid label="'\\''"]
  334 -> 107 [style=solid label="LEFTSHIFT"]
  334 -> 108 [style=solid label="RIGHTSHIFT"]
  334 -> 109 [style=solid label="'*'"]
  334 -> "334R51" [style=solid]
 "334R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
  335 [label="State 335\n\l 50 args_func: args_func ',' type VAR DECLARE vector .  [error, ',', ')', ']']\l 80 matrix: vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  335 -> 111 [style=solid label="ELEMMULT"]
  335 -> 112 [style=solid label="'\\''"]
  335 -> 113 [style=solid label="LEFTSHIFT"]
  335 -> 114 [style=solid label="RIGHTSHIFT"]
  335 -> "335R50" [style=solid]
 "335R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
  336 [label="State 336\n\l 49 args_func: args_func ',' type VAR DECLARE expr .  [error, ',', ')', ']']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  336 -> 120 [style=solid label="CONJUNCTION"]
  336 -> 121 [style=solid label="'<'"]
  336 -> 122 [style=solid label="'>'"]
  336 -> 123 [style=solid label="'+'"]
  336 -> 124 [style=solid label="'-'"]
  336 -> 125 [style=solid label="'/'"]
  336 -> "336R49" [style=solid]
 "336R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
}
