// Generated by GNU Bison 3.3.2.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <http://www.gnu.org/software/bison/>.

digraph "interpreter.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: . program $end\l  1 program: . func\l  2 func: . func stmts\l  3     | . func error\l  4     | . %empty\l"]
  0 -> 1 [style=dashed label="program"]
  0 -> 2 [style=dashed label="func"]
  0 -> "0R4" [style=solid]
 "0R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  1 [label="State 1\n\l  0 $accept: program . $end\l"]
  1 -> 3 [style=solid label="$end"]
  2 [label="State 2\n\l  1 program: func .  [$end]\l  2 func: func . stmts\l  3     | func . error\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE BEGIF stmts ENDIF\l 32    | . IF error ENDIF\l 33 forr: . FORR declaration DOUBLEDOT expr NEWLINE BEGFOR stmts ENDFOR\l 34     | . FORR error ENDFOR\l 42 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 43         | . error E\l 52 callfunction: . FVARIABLE '[' callfunc_args ']'\l 53             | . error '[' callfunc_args ']'\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 87 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 88              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 89              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 90              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 91              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 92              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 93              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 94              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 95 declaration: . type VAR DECLARE expr\l 96            | . type VAR DECLARE vector\l 97            | . type VAR DECLARE matrix\l 98 assignment: . VARIABLE ASSIGN expr\l 99           | . VVARIABLE ASSIGN vector\l100           | . MVARIABLE ASSIGN matrix\l101 print: . PRINT '(' expr ')'\l102      | . PRINT '(' VVARIABLE ')'\l103      | . PRINT '(' MVARIABLE ')'\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l121 type: . INT\l122     | . CINT\l123     | . VINT\l124     | . MINT\l125     | . CVINT\l126     | . CMINT\l127     | . BOOLEAN\l128     | . CBOOLEAN\l129     | . VBOOLEAN\l130     | . MBOOLEAN\l131     | . CVBOOLEAN\l132     | . CMBOOLEAN\l133 const: . INTEGER\l134      | . BOOL\l"]
  2 -> 4 [style=dotted]
  2 -> 5 [style=solid label="BOOL"]
  2 -> 6 [style=solid label="INTEGER"]
  2 -> 7 [style=solid label="VARIABLE"]
  2 -> 8 [style=solid label="VVARIABLE"]
  2 -> 9 [style=solid label="MVARIABLE"]
  2 -> 10 [style=solid label="FVARIABLE"]
  2 -> 11 [style=solid label="CINT"]
  2 -> 12 [style=solid label="VINT"]
  2 -> 13 [style=solid label="MINT"]
  2 -> 14 [style=solid label="INT"]
  2 -> 15 [style=solid label="CVINT"]
  2 -> 16 [style=solid label="CMINT"]
  2 -> 17 [style=solid label="BOOLEAN"]
  2 -> 18 [style=solid label="CBOOLEAN"]
  2 -> 19 [style=solid label="VBOOLEAN"]
  2 -> 20 [style=solid label="MBOOLEAN"]
  2 -> 21 [style=solid label="CVBOOLEAN"]
  2 -> 22 [style=solid label="CMBOOLEAN"]
  2 -> 23 [style=solid label="NEWLINE"]
  2 -> 24 [style=solid label="PRINT"]
  2 -> 25 [style=solid label="IF"]
  2 -> 26 [style=solid label="FORR"]
  2 -> 27 [style=solid label="MOVE"]
  2 -> 28 [style=solid label="RIGHT"]
  2 -> 29 [style=solid label="LEFT"]
  2 -> 30 [style=solid label="ROBEX"]
  2 -> 31 [style=solid label="WALL"]
  2 -> 32 [style=solid label="'-'"]
  2 -> 33 [style=solid label="'!'"]
  2 -> 34 [style=solid label="'('"]
  2 -> 35 [style=solid label="'['"]
  2 -> 36 [style=solid label="'{'"]
  2 -> 37 [style=dashed label="stmts"]
  2 -> 38 [style=dashed label="stmt"]
  2 -> 39 [style=dashed label="robotactions"]
  2 -> 40 [style=dashed label="robotmove"]
  2 -> 41 [style=dashed label="robotright"]
  2 -> 42 [style=dashed label="robotleft"]
  2 -> 43 [style=dashed label="robotwall"]
  2 -> 44 [style=dashed label="robotexit"]
  2 -> 45 [style=dashed label="iff"]
  2 -> 46 [style=dashed label="forr"]
  2 -> 47 [style=dashed label="function"]
  2 -> 48 [style=dashed label="callfunction"]
  2 -> 49 [style=dashed label="matrix"]
  2 -> 50 [style=dashed label="vector"]
  2 -> 51 [style=dashed label="vmdeclaration"]
  2 -> 52 [style=dashed label="declaration"]
  2 -> 53 [style=dashed label="assignment"]
  2 -> 54 [style=dashed label="print"]
  2 -> 55 [style=dashed label="expr"]
  2 -> 56 [style=dashed label="type"]
  2 -> 57 [style=dashed label="const"]
  2 -> "2R1" [label="[$end]", style=solid]
 "2R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  3 [label="State 3\n\l  0 $accept: program $end .\l"]
  3 -> "3R0" [style=solid]
 "3R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  4 [label="State 4\n\l  3 func: func error .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']\l  8 stmts: error .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']\l 23 stmt: error . NEWLINE\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 43 function: error . E\l 53 callfunction: error . '[' callfunc_args ']'\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 67       | error . matrix\l 68       | . error vector\l 68       | error . vector\l 69       | . error expr\l 69       | error . expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 82       | error . vector\l 83       | . error expr\l 83       | error . expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l120     | error . expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  4 -> 58 [style=dotted]
  4 -> 5 [style=solid label="BOOL"]
  4 -> 6 [style=solid label="INTEGER"]
  4 -> 59 [style=solid label="VARIABLE"]
  4 -> 60 [style=solid label="VVARIABLE"]
  4 -> 61 [style=solid label="MVARIABLE"]
  4 -> 62 [style=solid label="NEWLINE"]
  4 -> 63 [style=solid label="E"]
  4 -> 27 [style=solid label="MOVE"]
  4 -> 30 [style=solid label="ROBEX"]
  4 -> 31 [style=solid label="WALL"]
  4 -> 32 [style=solid label="'-'"]
  4 -> 33 [style=solid label="'!'"]
  4 -> 64 [style=solid label="'('"]
  4 -> 65 [style=solid label="'['"]
  4 -> 36 [style=solid label="'{'"]
  4 -> 40 [style=dashed label="robotmove"]
  4 -> 43 [style=dashed label="robotwall"]
  4 -> 44 [style=dashed label="robotexit"]
  4 -> 66 [style=dashed label="matrix"]
  4 -> 67 [style=dashed label="vector"]
  4 -> 68 [style=dashed label="expr"]
  4 -> 57 [style=dashed label="const"]
  4 -> "4R3d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, NEWLINE, MOVE, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "4R3d" [label="R3", fillcolor=5, shape=diamond, style=filled]
  4 -> "4R3" [label="[$end, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, PRINT, IF, FORR, RIGHT, LEFT]", style=solid]
 "4R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  4 -> "4R8d" [label="[$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "4R8d" [label="R8", fillcolor=5, shape=diamond, style=filled]
  5 [label="State 5\n\l134 const: BOOL .\l"]
  5 -> "5R134" [style=solid]
 "5R134" [label="R134", fillcolor=3, shape=diamond, style=filled]
  6 [label="State 6\n\l133 const: INTEGER .\l"]
  6 -> "6R133" [style=solid]
 "6R133" [label="R133", fillcolor=3, shape=diamond, style=filled]
  7 [label="State 7\n\l 98 assignment: VARIABLE . ASSIGN expr\l108 expr: VARIABLE .  [NEWLINE, CONJUNCTION, '<', '>', '+', '-', '/', ')']\l"]
  7 -> 69 [style=solid label="ASSIGN"]
  7 -> "7R108" [style=solid]
 "7R108" [label="R108", fillcolor=3, shape=diamond, style=filled]
  8 [label="State 8\n\l 74 vector: VVARIABLE . '(' vector ',' '[' ']' ')'\l 77       | VVARIABLE .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l 87 vmdeclaration: VVARIABLE . '(' expr ')' ASSIGN expr\l 88              | VVARIABLE . '(' vector ',' '[' ']' ')' ASSIGN vector\l 99 assignment: VVARIABLE . ASSIGN vector\l118 expr: VVARIABLE . '(' expr ')'\l"]
  8 -> 70 [style=solid label="ASSIGN"]
  8 -> 71 [style=solid label="'('"]
  8 -> "8R77" [style=solid]
 "8R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  9 [label="State 9\n\l 55 matrix: MVARIABLE . '(' vector ',' '[' ']' ')'\l 56       | MVARIABLE . '(' '[' ']' ',' vector ')'\l 57       | MVARIABLE . '(' matrix ')'\l 58       | MVARIABLE .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l 75 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 76       | MVARIABLE . '(' '[' ']' ',' expr ')'\l 89 vmdeclaration: MVARIABLE . '(' expr ',' expr ')' ASSIGN expr\l 90              | MVARIABLE . '(' expr ',' '[' ']' ')' ASSIGN vector\l 91              | MVARIABLE . '(' '[' ']' ',' expr ')' ASSIGN vector\l 92              | MVARIABLE . '(' vector ',' '[' ']' ')' ASSIGN matrix\l 93              | MVARIABLE . '(' '[' ']' ',' vector ')' ASSIGN matrix\l 94              | MVARIABLE . '(' matrix ')' ASSIGN matrix\l100 assignment: MVARIABLE . ASSIGN matrix\l119 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  9 -> 72 [style=solid label="ASSIGN"]
  9 -> 73 [style=solid label="'('"]
  9 -> "9R58" [style=solid]
 "9R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  10 [label="State 10\n\l 52 callfunction: FVARIABLE . '[' callfunc_args ']'\l"]
  10 -> 74 [style=solid label="'['"]
  11 [label="State 11\n\l122 type: CINT .\l"]
  11 -> "11R122" [style=solid]
 "11R122" [label="R122", fillcolor=3, shape=diamond, style=filled]
  12 [label="State 12\n\l123 type: VINT .\l"]
  12 -> "12R123" [style=solid]
 "12R123" [label="R123", fillcolor=3, shape=diamond, style=filled]
  13 [label="State 13\n\l124 type: MINT .\l"]
  13 -> "13R124" [style=solid]
 "13R124" [label="R124", fillcolor=3, shape=diamond, style=filled]
  14 [label="State 14\n\l121 type: INT .\l"]
  14 -> "14R121" [style=solid]
 "14R121" [label="R121", fillcolor=3, shape=diamond, style=filled]
  15 [label="State 15\n\l125 type: CVINT .\l"]
  15 -> "15R125" [style=solid]
 "15R125" [label="R125", fillcolor=3, shape=diamond, style=filled]
  16 [label="State 16\n\l126 type: CMINT .\l"]
  16 -> "16R126" [style=solid]
 "16R126" [label="R126", fillcolor=3, shape=diamond, style=filled]
  17 [label="State 17\n\l127 type: BOOLEAN .\l"]
  17 -> "17R127" [style=solid]
 "17R127" [label="R127", fillcolor=3, shape=diamond, style=filled]
  18 [label="State 18\n\l128 type: CBOOLEAN .\l"]
  18 -> "18R128" [style=solid]
 "18R128" [label="R128", fillcolor=3, shape=diamond, style=filled]
  19 [label="State 19\n\l129 type: VBOOLEAN .\l"]
  19 -> "19R129" [style=solid]
 "19R129" [label="R129", fillcolor=3, shape=diamond, style=filled]
  20 [label="State 20\n\l130 type: MBOOLEAN .\l"]
  20 -> "20R130" [style=solid]
 "20R130" [label="R130", fillcolor=3, shape=diamond, style=filled]
  21 [label="State 21\n\l131 type: CVBOOLEAN .\l"]
  21 -> "21R131" [style=solid]
 "21R131" [label="R131", fillcolor=3, shape=diamond, style=filled]
  22 [label="State 22\n\l132 type: CMBOOLEAN .\l"]
  22 -> "22R132" [style=solid]
 "22R132" [label="R132", fillcolor=3, shape=diamond, style=filled]
  23 [label="State 23\n\l  9 stmt: NEWLINE .\l"]
  23 -> "23R9" [style=solid]
 "23R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  24 [label="State 24\n\l101 print: PRINT . '(' expr ')'\l102      | PRINT . '(' VVARIABLE ')'\l103      | PRINT . '(' MVARIABLE ')'\l"]
  24 -> 75 [style=solid label="'('"]
  25 [label="State 25\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: IF . expr NEWLINE BEGIF stmts ENDIF\l 32    | IF . error ENDIF\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  25 -> 76 [style=dotted]
  25 -> 5 [style=solid label="BOOL"]
  25 -> 6 [style=solid label="INTEGER"]
  25 -> 59 [style=solid label="VARIABLE"]
  25 -> 77 [style=solid label="VVARIABLE"]
  25 -> 78 [style=solid label="MVARIABLE"]
  25 -> 27 [style=solid label="MOVE"]
  25 -> 30 [style=solid label="ROBEX"]
  25 -> 31 [style=solid label="WALL"]
  25 -> 32 [style=solid label="'-'"]
  25 -> 33 [style=solid label="'!'"]
  25 -> 64 [style=solid label="'('"]
  25 -> 40 [style=dashed label="robotmove"]
  25 -> 43 [style=dashed label="robotwall"]
  25 -> 44 [style=dashed label="robotexit"]
  25 -> 79 [style=dashed label="expr"]
  25 -> 57 [style=dashed label="const"]
  26 [label="State 26\n\l 33 forr: FORR . declaration DOUBLEDOT expr NEWLINE BEGFOR stmts ENDFOR\l 34     | FORR . error ENDFOR\l 95 declaration: . type VAR DECLARE expr\l 96            | . type VAR DECLARE vector\l 97            | . type VAR DECLARE matrix\l121 type: . INT\l122     | . CINT\l123     | . VINT\l124     | . MINT\l125     | . CVINT\l126     | . CMINT\l127     | . BOOLEAN\l128     | . CBOOLEAN\l129     | . VBOOLEAN\l130     | . MBOOLEAN\l131     | . CVBOOLEAN\l132     | . CMBOOLEAN\l"]
  26 -> 80 [style=dotted]
  26 -> 11 [style=solid label="CINT"]
  26 -> 12 [style=solid label="VINT"]
  26 -> 13 [style=solid label="MINT"]
  26 -> 14 [style=solid label="INT"]
  26 -> 15 [style=solid label="CVINT"]
  26 -> 16 [style=solid label="CMINT"]
  26 -> 17 [style=solid label="BOOLEAN"]
  26 -> 18 [style=solid label="CBOOLEAN"]
  26 -> 19 [style=solid label="VBOOLEAN"]
  26 -> 20 [style=solid label="MBOOLEAN"]
  26 -> 21 [style=solid label="CVBOOLEAN"]
  26 -> 22 [style=solid label="CMBOOLEAN"]
  26 -> 81 [style=dashed label="declaration"]
  26 -> 56 [style=dashed label="type"]
  27 [label="State 27\n\l 26 robotmove: MOVE . '(' expr ')'\l"]
  27 -> 82 [style=solid label="'('"]
  28 [label="State 28\n\l 27 robotright: RIGHT .\l"]
  28 -> "28R27" [style=solid]
 "28R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  29 [label="State 29\n\l 28 robotleft: LEFT .\l"]
  29 -> "29R28" [style=solid]
 "29R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  30 [label="State 30\n\l 30 robotexit: ROBEX .\l"]
  30 -> "30R30" [style=solid]
 "30R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  31 [label="State 31\n\l 29 robotwall: WALL .\l"]
  31 -> "31R29" [style=solid]
 "31R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  32 [label="State 32\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l109     | '-' . expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  32 -> 83 [style=dotted]
  32 -> 5 [style=solid label="BOOL"]
  32 -> 6 [style=solid label="INTEGER"]
  32 -> 59 [style=solid label="VARIABLE"]
  32 -> 77 [style=solid label="VVARIABLE"]
  32 -> 78 [style=solid label="MVARIABLE"]
  32 -> 27 [style=solid label="MOVE"]
  32 -> 30 [style=solid label="ROBEX"]
  32 -> 31 [style=solid label="WALL"]
  32 -> 32 [style=solid label="'-'"]
  32 -> 33 [style=solid label="'!'"]
  32 -> 64 [style=solid label="'('"]
  32 -> 40 [style=dashed label="robotmove"]
  32 -> 43 [style=dashed label="robotwall"]
  32 -> 44 [style=dashed label="robotexit"]
  32 -> 84 [style=dashed label="expr"]
  32 -> 57 [style=dashed label="const"]
  33 [label="State 33\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l115     | '!' . expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  33 -> 83 [style=dotted]
  33 -> 5 [style=solid label="BOOL"]
  33 -> 6 [style=solid label="INTEGER"]
  33 -> 59 [style=solid label="VARIABLE"]
  33 -> 77 [style=solid label="VVARIABLE"]
  33 -> 78 [style=solid label="MVARIABLE"]
  33 -> 27 [style=solid label="MOVE"]
  33 -> 30 [style=solid label="ROBEX"]
  33 -> 31 [style=solid label="WALL"]
  33 -> 32 [style=solid label="'-'"]
  33 -> 33 [style=solid label="'!'"]
  33 -> 64 [style=solid label="'('"]
  33 -> 40 [style=dashed label="robotmove"]
  33 -> 43 [style=dashed label="robotwall"]
  33 -> 44 [style=dashed label="robotexit"]
  33 -> 85 [style=dashed label="expr"]
  33 -> 57 [style=dashed label="const"]
  34 [label="State 34\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 22     | '(' . stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE BEGIF stmts ENDIF\l 32    | . IF error ENDIF\l 33 forr: . FORR declaration DOUBLEDOT expr NEWLINE BEGFOR stmts ENDFOR\l 34     | . FORR error ENDFOR\l 42 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 43         | . error E\l 52 callfunction: . FVARIABLE '[' callfunc_args ']'\l 53             | . error '[' callfunc_args ']'\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 87 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 88              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 89              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 90              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 91              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 92              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 93              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 94              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 95 declaration: . type VAR DECLARE expr\l 96            | . type VAR DECLARE vector\l 97            | . type VAR DECLARE matrix\l 98 assignment: . VARIABLE ASSIGN expr\l 99           | . VVARIABLE ASSIGN vector\l100           | . MVARIABLE ASSIGN matrix\l101 print: . PRINT '(' expr ')'\l102      | . PRINT '(' VVARIABLE ')'\l103      | . PRINT '(' MVARIABLE ')'\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l117     | '(' . expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l121 type: . INT\l122     | . CINT\l123     | . VINT\l124     | . MINT\l125     | . CVINT\l126     | . CMINT\l127     | . BOOLEAN\l128     | . CBOOLEAN\l129     | . VBOOLEAN\l130     | . MBOOLEAN\l131     | . CVBOOLEAN\l132     | . CMBOOLEAN\l133 const: . INTEGER\l134      | . BOOL\l"]
  34 -> 86 [style=dotted]
  34 -> 5 [style=solid label="BOOL"]
  34 -> 6 [style=solid label="INTEGER"]
  34 -> 7 [style=solid label="VARIABLE"]
  34 -> 8 [style=solid label="VVARIABLE"]
  34 -> 9 [style=solid label="MVARIABLE"]
  34 -> 10 [style=solid label="FVARIABLE"]
  34 -> 11 [style=solid label="CINT"]
  34 -> 12 [style=solid label="VINT"]
  34 -> 13 [style=solid label="MINT"]
  34 -> 14 [style=solid label="INT"]
  34 -> 15 [style=solid label="CVINT"]
  34 -> 16 [style=solid label="CMINT"]
  34 -> 17 [style=solid label="BOOLEAN"]
  34 -> 18 [style=solid label="CBOOLEAN"]
  34 -> 19 [style=solid label="VBOOLEAN"]
  34 -> 20 [style=solid label="MBOOLEAN"]
  34 -> 21 [style=solid label="CVBOOLEAN"]
  34 -> 22 [style=solid label="CMBOOLEAN"]
  34 -> 23 [style=solid label="NEWLINE"]
  34 -> 24 [style=solid label="PRINT"]
  34 -> 25 [style=solid label="IF"]
  34 -> 26 [style=solid label="FORR"]
  34 -> 27 [style=solid label="MOVE"]
  34 -> 28 [style=solid label="RIGHT"]
  34 -> 29 [style=solid label="LEFT"]
  34 -> 30 [style=solid label="ROBEX"]
  34 -> 31 [style=solid label="WALL"]
  34 -> 32 [style=solid label="'-'"]
  34 -> 33 [style=solid label="'!'"]
  34 -> 34 [style=solid label="'('"]
  34 -> 35 [style=solid label="'['"]
  34 -> 36 [style=solid label="'{'"]
  34 -> 87 [style=dashed label="stmts"]
  34 -> 38 [style=dashed label="stmt"]
  34 -> 39 [style=dashed label="robotactions"]
  34 -> 40 [style=dashed label="robotmove"]
  34 -> 41 [style=dashed label="robotright"]
  34 -> 42 [style=dashed label="robotleft"]
  34 -> 43 [style=dashed label="robotwall"]
  34 -> 44 [style=dashed label="robotexit"]
  34 -> 45 [style=dashed label="iff"]
  34 -> 46 [style=dashed label="forr"]
  34 -> 47 [style=dashed label="function"]
  34 -> 48 [style=dashed label="callfunction"]
  34 -> 49 [style=dashed label="matrix"]
  34 -> 50 [style=dashed label="vector"]
  34 -> 51 [style=dashed label="vmdeclaration"]
  34 -> 52 [style=dashed label="declaration"]
  34 -> 53 [style=dashed label="assignment"]
  34 -> 54 [style=dashed label="print"]
  34 -> 88 [style=dashed label="expr"]
  34 -> 56 [style=dashed label="type"]
  34 -> 57 [style=dashed label="const"]
  35 [label="State 35\n\l 35 return_func: . type VAR\l 36            | . return_func ',' type VAR\l 37            | . return_func error\l 42 function: '[' . return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l121 type: . INT\l122     | . CINT\l123     | . VINT\l124     | . MINT\l125     | . CVINT\l126     | . CMINT\l127     | . BOOLEAN\l128     | . CBOOLEAN\l129     | . VBOOLEAN\l130     | . MBOOLEAN\l131     | . CVBOOLEAN\l132     | . CMBOOLEAN\l"]
  35 -> 11 [style=solid label="CINT"]
  35 -> 12 [style=solid label="VINT"]
  35 -> 13 [style=solid label="MINT"]
  35 -> 14 [style=solid label="INT"]
  35 -> 15 [style=solid label="CVINT"]
  35 -> 16 [style=solid label="CMINT"]
  35 -> 17 [style=solid label="BOOLEAN"]
  35 -> 18 [style=solid label="CBOOLEAN"]
  35 -> 19 [style=solid label="VBOOLEAN"]
  35 -> 20 [style=solid label="MBOOLEAN"]
  35 -> 21 [style=solid label="CVBOOLEAN"]
  35 -> 22 [style=solid label="CMBOOLEAN"]
  35 -> 89 [style=dashed label="return_func"]
  35 -> 90 [style=dashed label="type"]
  36 [label="State 36\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 54 matrix: '{' . listexprs '}'\l 70 listexprs: . vector ',' vector\l 71          | . listexprs ',' vector\l 72          | . listexprs error\l 73 vector: . '{' exprs '}'\l 73       | '{' . exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 84 exprs: . expr ',' expr\l 85      | . exprs ',' expr\l 86      | . exprs error\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  36 -> 91 [style=dotted]
  36 -> 5 [style=solid label="BOOL"]
  36 -> 6 [style=solid label="INTEGER"]
  36 -> 59 [style=solid label="VARIABLE"]
  36 -> 60 [style=solid label="VVARIABLE"]
  36 -> 92 [style=solid label="MVARIABLE"]
  36 -> 27 [style=solid label="MOVE"]
  36 -> 30 [style=solid label="ROBEX"]
  36 -> 31 [style=solid label="WALL"]
  36 -> 32 [style=solid label="'-'"]
  36 -> 33 [style=solid label="'!'"]
  36 -> 64 [style=solid label="'('"]
  36 -> 93 [style=solid label="'{'"]
  36 -> 40 [style=dashed label="robotmove"]
  36 -> 43 [style=dashed label="robotwall"]
  36 -> 44 [style=dashed label="robotexit"]
  36 -> 94 [style=dashed label="listexprs"]
  36 -> 95 [style=dashed label="vector"]
  36 -> 96 [style=dashed label="exprs"]
  36 -> 97 [style=dashed label="expr"]
  36 -> 57 [style=dashed label="const"]
  37 [label="State 37\n\l  2 func: func stmts .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE BEGIF stmts ENDIF\l 32    | . IF error ENDIF\l 33 forr: . FORR declaration DOUBLEDOT expr NEWLINE BEGFOR stmts ENDFOR\l 34     | . FORR error ENDFOR\l 42 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 43         | . error E\l 52 callfunction: . FVARIABLE '[' callfunc_args ']'\l 53             | . error '[' callfunc_args ']'\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 87 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 88              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 89              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 90              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 91              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 92              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 93              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 94              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 95 declaration: . type VAR DECLARE expr\l 96            | . type VAR DECLARE vector\l 97            | . type VAR DECLARE matrix\l 98 assignment: . VARIABLE ASSIGN expr\l 99           | . VVARIABLE ASSIGN vector\l100           | . MVARIABLE ASSIGN matrix\l101 print: . PRINT '(' expr ')'\l102      | . PRINT '(' VVARIABLE ')'\l103      | . PRINT '(' MVARIABLE ')'\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l121 type: . INT\l122     | . CINT\l123     | . VINT\l124     | . MINT\l125     | . CVINT\l126     | . CMINT\l127     | . BOOLEAN\l128     | . CBOOLEAN\l129     | . VBOOLEAN\l130     | . MBOOLEAN\l131     | . CVBOOLEAN\l132     | . CMBOOLEAN\l133 const: . INTEGER\l134      | . BOOL\l"]
  37 -> 98 [style=dotted]
  37 -> 5 [style=solid label="BOOL"]
  37 -> 6 [style=solid label="INTEGER"]
  37 -> 7 [style=solid label="VARIABLE"]
  37 -> 8 [style=solid label="VVARIABLE"]
  37 -> 9 [style=solid label="MVARIABLE"]
  37 -> 10 [style=solid label="FVARIABLE"]
  37 -> 11 [style=solid label="CINT"]
  37 -> 12 [style=solid label="VINT"]
  37 -> 13 [style=solid label="MINT"]
  37 -> 14 [style=solid label="INT"]
  37 -> 15 [style=solid label="CVINT"]
  37 -> 16 [style=solid label="CMINT"]
  37 -> 17 [style=solid label="BOOLEAN"]
  37 -> 18 [style=solid label="CBOOLEAN"]
  37 -> 19 [style=solid label="VBOOLEAN"]
  37 -> 20 [style=solid label="MBOOLEAN"]
  37 -> 21 [style=solid label="CVBOOLEAN"]
  37 -> 22 [style=solid label="CMBOOLEAN"]
  37 -> 23 [style=solid label="NEWLINE"]
  37 -> 24 [style=solid label="PRINT"]
  37 -> 25 [style=solid label="IF"]
  37 -> 26 [style=solid label="FORR"]
  37 -> 27 [style=solid label="MOVE"]
  37 -> 28 [style=solid label="RIGHT"]
  37 -> 29 [style=solid label="LEFT"]
  37 -> 30 [style=solid label="ROBEX"]
  37 -> 31 [style=solid label="WALL"]
  37 -> 32 [style=solid label="'-'"]
  37 -> 33 [style=solid label="'!'"]
  37 -> 34 [style=solid label="'('"]
  37 -> 35 [style=solid label="'['"]
  37 -> 36 [style=solid label="'{'"]
  37 -> 99 [style=dashed label="stmt"]
  37 -> 39 [style=dashed label="robotactions"]
  37 -> 40 [style=dashed label="robotmove"]
  37 -> 41 [style=dashed label="robotright"]
  37 -> 42 [style=dashed label="robotleft"]
  37 -> 43 [style=dashed label="robotwall"]
  37 -> 44 [style=dashed label="robotexit"]
  37 -> 45 [style=dashed label="iff"]
  37 -> 46 [style=dashed label="forr"]
  37 -> 47 [style=dashed label="function"]
  37 -> 48 [style=dashed label="callfunction"]
  37 -> 49 [style=dashed label="matrix"]
  37 -> 50 [style=dashed label="vector"]
  37 -> 51 [style=dashed label="vmdeclaration"]
  37 -> 52 [style=dashed label="declaration"]
  37 -> 53 [style=dashed label="assignment"]
  37 -> 54 [style=dashed label="print"]
  37 -> 55 [style=dashed label="expr"]
  37 -> 56 [style=dashed label="type"]
  37 -> 57 [style=dashed label="const"]
  37 -> "37R2d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "37R2d" [label="R2", fillcolor=5, shape=diamond, style=filled]
  37 -> "37R2" [label="[$end]", style=solid]
 "37R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  38 [label="State 38\n\l  5 stmts: stmt .\l"]
  38 -> "38R5" [style=solid]
 "38R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  39 [label="State 39\n\l 21 stmt: robotactions . NEWLINE\l"]
  39 -> 100 [style=solid label="NEWLINE"]
  40 [label="State 40\n\l106 expr: robotmove .\l"]
  40 -> "40R106" [style=solid]
 "40R106" [label="R106", fillcolor=3, shape=diamond, style=filled]
  41 [label="State 41\n\l 24 robotactions: robotright .\l"]
  41 -> "41R24" [style=solid]
 "41R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  42 [label="State 42\n\l 25 robotactions: robotleft .\l"]
  42 -> "42R25" [style=solid]
 "42R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  43 [label="State 43\n\l107 expr: robotwall .\l"]
  43 -> "43R107" [style=solid]
 "43R107" [label="R107", fillcolor=3, shape=diamond, style=filled]
  44 [label="State 44\n\l105 expr: robotexit .\l"]
  44 -> "44R105" [style=solid]
 "44R105" [label="R105", fillcolor=3, shape=diamond, style=filled]
  45 [label="State 45\n\l 17 stmt: iff . NEWLINE\l"]
  45 -> 101 [style=solid label="NEWLINE"]
  46 [label="State 46\n\l 18 stmt: forr . NEWLINE\l"]
  46 -> 102 [style=solid label="NEWLINE"]
  47 [label="State 47\n\l 19 stmt: function . NEWLINE\l"]
  47 -> 103 [style=solid label="NEWLINE"]
  48 [label="State 48\n\l 20 stmt: callfunction . NEWLINE\l"]
  48 -> 104 [style=solid label="NEWLINE"]
  49 [label="State 49\n\l 12 stmt: matrix . NEWLINE\l 59 matrix: matrix . '*' matrix\l 60       | matrix . ELEMMULT matrix\l 61       | matrix . '\\''\l 62       | matrix . RIGHTSHIFT\l 63       | matrix . LEFTSHIFT\l 65       | matrix . ELEMMULT vector\l 66       | matrix . ELEMMULT expr\l"]
  49 -> 105 [style=solid label="NEWLINE"]
  49 -> 106 [style=solid label="ELEMMULT"]
  49 -> 107 [style=solid label="'\\''"]
  49 -> 108 [style=solid label="LEFTSHIFT"]
  49 -> 109 [style=solid label="RIGHTSHIFT"]
  49 -> 110 [style=solid label="'*'"]
  50 [label="State 50\n\l 11 stmt: vector . NEWLINE\l 64 matrix: vector . '\\''\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l"]
  50 -> 111 [style=solid label="NEWLINE"]
  50 -> 112 [style=solid label="ELEMMULT"]
  50 -> 113 [style=solid label="'\\''"]
  50 -> 114 [style=solid label="LEFTSHIFT"]
  50 -> 115 [style=solid label="RIGHTSHIFT"]
  51 [label="State 51\n\l 14 stmt: vmdeclaration . NEWLINE\l"]
  51 -> 116 [style=solid label="NEWLINE"]
  52 [label="State 52\n\l 15 stmt: declaration . NEWLINE\l"]
  52 -> 117 [style=solid label="NEWLINE"]
  53 [label="State 53\n\l 16 stmt: assignment . NEWLINE\l"]
  53 -> 118 [style=solid label="NEWLINE"]
  54 [label="State 54\n\l 13 stmt: print . NEWLINE\l"]
  54 -> 119 [style=solid label="NEWLINE"]
  55 [label="State 55\n\l 10 stmt: expr . NEWLINE\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  55 -> 120 [style=solid label="NEWLINE"]
  55 -> 121 [style=solid label="CONJUNCTION"]
  55 -> 122 [style=solid label="'<'"]
  55 -> 123 [style=solid label="'>'"]
  55 -> 124 [style=solid label="'+'"]
  55 -> 125 [style=solid label="'-'"]
  55 -> 126 [style=solid label="'/'"]
  56 [label="State 56\n\l 95 declaration: type . VAR DECLARE expr\l 96            | type . VAR DECLARE vector\l 97            | type . VAR DECLARE matrix\l"]
  56 -> 127 [style=solid label="VAR"]
  57 [label="State 57\n\l104 expr: const .\l"]
  57 -> "57R104" [style=solid]
 "57R104" [label="R104", fillcolor=3, shape=diamond, style=filled]
  58 [label="State 58\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 67       | error . matrix\l 68       | . error vector\l 68       | error . vector\l 69       | . error expr\l 69       | error . expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 82       | error . vector\l 83       | . error expr\l 83       | error . expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l120     | error . expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  58 -> 58 [style=dotted]
  58 -> 5 [style=solid label="BOOL"]
  58 -> 6 [style=solid label="INTEGER"]
  58 -> 59 [style=solid label="VARIABLE"]
  58 -> 60 [style=solid label="VVARIABLE"]
  58 -> 61 [style=solid label="MVARIABLE"]
  58 -> 27 [style=solid label="MOVE"]
  58 -> 30 [style=solid label="ROBEX"]
  58 -> 31 [style=solid label="WALL"]
  58 -> 32 [style=solid label="'-'"]
  58 -> 33 [style=solid label="'!'"]
  58 -> 64 [style=solid label="'('"]
  58 -> 36 [style=solid label="'{'"]
  58 -> 40 [style=dashed label="robotmove"]
  58 -> 43 [style=dashed label="robotwall"]
  58 -> 44 [style=dashed label="robotexit"]
  58 -> 66 [style=dashed label="matrix"]
  58 -> 67 [style=dashed label="vector"]
  58 -> 68 [style=dashed label="expr"]
  58 -> 57 [style=dashed label="const"]
  59 [label="State 59\n\l108 expr: VARIABLE .\l"]
  59 -> "59R108" [style=solid]
 "59R108" [label="R108", fillcolor=3, shape=diamond, style=filled]
  60 [label="State 60\n\l 74 vector: VVARIABLE . '(' vector ',' '[' ']' ')'\l 77       | VVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l118 expr: VVARIABLE . '(' expr ')'\l"]
  60 -> 128 [style=solid label="'('"]
  60 -> "60R77" [style=solid]
 "60R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  61 [label="State 61\n\l 55 matrix: MVARIABLE . '(' vector ',' '[' ']' ')'\l 56       | MVARIABLE . '(' '[' ']' ',' vector ')'\l 57       | MVARIABLE . '(' matrix ')'\l 58       | MVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 75 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 76       | MVARIABLE . '(' '[' ']' ',' expr ')'\l119 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  61 -> 129 [style=solid label="'('"]
  61 -> "61R58" [style=solid]
 "61R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  62 [label="State 62\n\l 23 stmt: error NEWLINE .\l"]
  62 -> "62R23" [style=solid]
 "62R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  63 [label="State 63\n\l 43 function: error E .\l"]
  63 -> "63R43" [style=solid]
 "63R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  64 [label="State 64\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l117     | '(' . expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  64 -> 83 [style=dotted]
  64 -> 5 [style=solid label="BOOL"]
  64 -> 6 [style=solid label="INTEGER"]
  64 -> 59 [style=solid label="VARIABLE"]
  64 -> 77 [style=solid label="VVARIABLE"]
  64 -> 78 [style=solid label="MVARIABLE"]
  64 -> 27 [style=solid label="MOVE"]
  64 -> 30 [style=solid label="ROBEX"]
  64 -> 31 [style=solid label="WALL"]
  64 -> 32 [style=solid label="'-'"]
  64 -> 33 [style=solid label="'!'"]
  64 -> 64 [style=solid label="'('"]
  64 -> 40 [style=dashed label="robotmove"]
  64 -> 43 [style=dashed label="robotwall"]
  64 -> 44 [style=dashed label="robotexit"]
  64 -> 130 [style=dashed label="expr"]
  64 -> 57 [style=dashed label="const"]
  65 [label="State 65\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 44 callfunc_args: . expr\l 45              | . vector\l 46              | . matrix\l 47              | . callfunc_args ',' expr\l 48              | . callfunc_args ',' vector\l 49              | . callfunc_args ',' matrix\l 50              | . callfunc_args error\l 51              | . error\l 53 callfunction: error '[' . callfunc_args ']'\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  65 -> 131 [style=dotted]
  65 -> 5 [style=solid label="BOOL"]
  65 -> 6 [style=solid label="INTEGER"]
  65 -> 59 [style=solid label="VARIABLE"]
  65 -> 60 [style=solid label="VVARIABLE"]
  65 -> 61 [style=solid label="MVARIABLE"]
  65 -> 27 [style=solid label="MOVE"]
  65 -> 30 [style=solid label="ROBEX"]
  65 -> 31 [style=solid label="WALL"]
  65 -> 32 [style=solid label="'-'"]
  65 -> 33 [style=solid label="'!'"]
  65 -> 64 [style=solid label="'('"]
  65 -> 36 [style=solid label="'{'"]
  65 -> 40 [style=dashed label="robotmove"]
  65 -> 43 [style=dashed label="robotwall"]
  65 -> 44 [style=dashed label="robotexit"]
  65 -> 132 [style=dashed label="callfunc_args"]
  65 -> 133 [style=dashed label="matrix"]
  65 -> 134 [style=dashed label="vector"]
  65 -> 135 [style=dashed label="expr"]
  65 -> 57 [style=dashed label="const"]
  66 [label="State 66\n\l 59 matrix: matrix . '*' matrix\l 60       | matrix . ELEMMULT matrix\l 61       | matrix . '\\''\l 62       | matrix . RIGHTSHIFT\l 63       | matrix . LEFTSHIFT\l 65       | matrix . ELEMMULT vector\l 66       | matrix . ELEMMULT expr\l 67       | error matrix .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l"]
  66 -> 106 [style=solid label="ELEMMULT"]
  66 -> 107 [style=solid label="'\\''"]
  66 -> 108 [style=solid label="LEFTSHIFT"]
  66 -> 109 [style=solid label="RIGHTSHIFT"]
  66 -> 110 [style=solid label="'*'"]
  66 -> "66R67d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']", style=solid]
 "66R67d" [label="R67", fillcolor=5, shape=diamond, style=filled]
  66 -> "66R67" [style=solid]
 "66R67" [label="R67", fillcolor=3, shape=diamond, style=filled]
  67 [label="State 67\n\l 64 matrix: vector . '\\''\l 68       | error vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l 82       | error vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l"]
  67 -> 112 [style=solid label="ELEMMULT"]
  67 -> 113 [style=solid label="'\\''"]
  67 -> 114 [style=solid label="LEFTSHIFT"]
  67 -> 115 [style=solid label="RIGHTSHIFT"]
  67 -> "67R68d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "67R68d" [label="R68", fillcolor=5, shape=diamond, style=filled]
  67 -> "67R68" [style=solid]
 "67R68" [label="R68", fillcolor=3, shape=diamond, style=filled]
  67 -> "67R82d" [label="[error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']", style=solid]
 "67R82d" [label="R82", fillcolor=5, shape=diamond, style=filled]
  68 [label="State 68\n\l 69 matrix: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 83 vector: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l120     | error expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']']\l"]
  68 -> 121 [style=solid label="CONJUNCTION"]
  68 -> 122 [style=solid label="'<'"]
  68 -> 123 [style=solid label="'>'"]
  68 -> 124 [style=solid label="'+'"]
  68 -> 125 [style=solid label="'-'"]
  68 -> 126 [style=solid label="'/'"]
  68 -> "68R69" [style=solid]
 "68R69" [label="R69", fillcolor=3, shape=diamond, style=filled]
  68 -> "68R83d" [label="[error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']", style=solid]
 "68R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  68 -> "68R120d" [label="[error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']']", style=solid]
 "68R120d" [label="R120", fillcolor=5, shape=diamond, style=filled]
  69 [label="State 69\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 98 assignment: VARIABLE ASSIGN . expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  69 -> 83 [style=dotted]
  69 -> 5 [style=solid label="BOOL"]
  69 -> 6 [style=solid label="INTEGER"]
  69 -> 59 [style=solid label="VARIABLE"]
  69 -> 77 [style=solid label="VVARIABLE"]
  69 -> 78 [style=solid label="MVARIABLE"]
  69 -> 27 [style=solid label="MOVE"]
  69 -> 30 [style=solid label="ROBEX"]
  69 -> 31 [style=solid label="WALL"]
  69 -> 32 [style=solid label="'-'"]
  69 -> 33 [style=solid label="'!'"]
  69 -> 64 [style=solid label="'('"]
  69 -> 40 [style=dashed label="robotmove"]
  69 -> 43 [style=dashed label="robotwall"]
  69 -> 44 [style=dashed label="robotexit"]
  69 -> 136 [style=dashed label="expr"]
  69 -> 57 [style=dashed label="const"]
  70 [label="State 70\n\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 99 assignment: VVARIABLE ASSIGN . vector\l"]
  70 -> 137 [style=dotted]
  70 -> 138 [style=solid label="VVARIABLE"]
  70 -> 139 [style=solid label="MVARIABLE"]
  70 -> 93 [style=solid label="'{'"]
  70 -> 140 [style=dashed label="vector"]
  71 [label="State 71\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 74       | VVARIABLE '(' . vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 87 vmdeclaration: VVARIABLE '(' . expr ')' ASSIGN expr\l 88              | VVARIABLE '(' . vector ',' '[' ']' ')' ASSIGN vector\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l118     | VVARIABLE '(' . expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  71 -> 91 [style=dotted]
  71 -> 5 [style=solid label="BOOL"]
  71 -> 6 [style=solid label="INTEGER"]
  71 -> 59 [style=solid label="VARIABLE"]
  71 -> 60 [style=solid label="VVARIABLE"]
  71 -> 92 [style=solid label="MVARIABLE"]
  71 -> 27 [style=solid label="MOVE"]
  71 -> 30 [style=solid label="ROBEX"]
  71 -> 31 [style=solid label="WALL"]
  71 -> 32 [style=solid label="'-'"]
  71 -> 33 [style=solid label="'!'"]
  71 -> 64 [style=solid label="'('"]
  71 -> 93 [style=solid label="'{'"]
  71 -> 40 [style=dashed label="robotmove"]
  71 -> 43 [style=dashed label="robotwall"]
  71 -> 44 [style=dashed label="robotexit"]
  71 -> 141 [style=dashed label="vector"]
  71 -> 142 [style=dashed label="expr"]
  71 -> 57 [style=dashed label="const"]
  72 [label="State 72\n\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l100 assignment: MVARIABLE ASSIGN . matrix\l"]
  72 -> 143 [style=dotted]
  72 -> 138 [style=solid label="VVARIABLE"]
  72 -> 144 [style=solid label="MVARIABLE"]
  72 -> 36 [style=solid label="'{'"]
  72 -> 145 [style=dashed label="matrix"]
  72 -> 146 [style=dashed label="vector"]
  73 [label="State 73\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 55       | MVARIABLE '(' . vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 56       | MVARIABLE '(' . '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 57       | MVARIABLE '(' . matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 75       | MVARIABLE '(' . expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 76       | MVARIABLE '(' . '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 89 vmdeclaration: MVARIABLE '(' . expr ',' expr ')' ASSIGN expr\l 90              | MVARIABLE '(' . expr ',' '[' ']' ')' ASSIGN vector\l 91              | MVARIABLE '(' . '[' ']' ',' expr ')' ASSIGN vector\l 92              | MVARIABLE '(' . vector ',' '[' ']' ')' ASSIGN matrix\l 93              | MVARIABLE '(' . '[' ']' ',' vector ')' ASSIGN matrix\l 94              | MVARIABLE '(' . matrix ')' ASSIGN matrix\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l119     | MVARIABLE '(' . expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  73 -> 58 [style=dotted]
  73 -> 5 [style=solid label="BOOL"]
  73 -> 6 [style=solid label="INTEGER"]
  73 -> 59 [style=solid label="VARIABLE"]
  73 -> 60 [style=solid label="VVARIABLE"]
  73 -> 61 [style=solid label="MVARIABLE"]
  73 -> 27 [style=solid label="MOVE"]
  73 -> 30 [style=solid label="ROBEX"]
  73 -> 31 [style=solid label="WALL"]
  73 -> 32 [style=solid label="'-'"]
  73 -> 33 [style=solid label="'!'"]
  73 -> 64 [style=solid label="'('"]
  73 -> 147 [style=solid label="'['"]
  73 -> 36 [style=solid label="'{'"]
  73 -> 40 [style=dashed label="robotmove"]
  73 -> 43 [style=dashed label="robotwall"]
  73 -> 44 [style=dashed label="robotexit"]
  73 -> 148 [style=dashed label="matrix"]
  73 -> 149 [style=dashed label="vector"]
  73 -> 150 [style=dashed label="expr"]
  73 -> 57 [style=dashed label="const"]
  74 [label="State 74\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 44 callfunc_args: . expr\l 45              | . vector\l 46              | . matrix\l 47              | . callfunc_args ',' expr\l 48              | . callfunc_args ',' vector\l 49              | . callfunc_args ',' matrix\l 50              | . callfunc_args error\l 51              | . error\l 52 callfunction: FVARIABLE '[' . callfunc_args ']'\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  74 -> 131 [style=dotted]
  74 -> 5 [style=solid label="BOOL"]
  74 -> 6 [style=solid label="INTEGER"]
  74 -> 59 [style=solid label="VARIABLE"]
  74 -> 60 [style=solid label="VVARIABLE"]
  74 -> 61 [style=solid label="MVARIABLE"]
  74 -> 27 [style=solid label="MOVE"]
  74 -> 30 [style=solid label="ROBEX"]
  74 -> 31 [style=solid label="WALL"]
  74 -> 32 [style=solid label="'-'"]
  74 -> 33 [style=solid label="'!'"]
  74 -> 64 [style=solid label="'('"]
  74 -> 36 [style=solid label="'{'"]
  74 -> 40 [style=dashed label="robotmove"]
  74 -> 43 [style=dashed label="robotwall"]
  74 -> 44 [style=dashed label="robotexit"]
  74 -> 151 [style=dashed label="callfunc_args"]
  74 -> 133 [style=dashed label="matrix"]
  74 -> 134 [style=dashed label="vector"]
  74 -> 135 [style=dashed label="expr"]
  74 -> 57 [style=dashed label="const"]
  75 [label="State 75\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l101 print: PRINT '(' . expr ')'\l102      | PRINT '(' . VVARIABLE ')'\l103      | PRINT '(' . MVARIABLE ')'\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  75 -> 83 [style=dotted]
  75 -> 5 [style=solid label="BOOL"]
  75 -> 6 [style=solid label="INTEGER"]
  75 -> 59 [style=solid label="VARIABLE"]
  75 -> 152 [style=solid label="VVARIABLE"]
  75 -> 153 [style=solid label="MVARIABLE"]
  75 -> 27 [style=solid label="MOVE"]
  75 -> 30 [style=solid label="ROBEX"]
  75 -> 31 [style=solid label="WALL"]
  75 -> 32 [style=solid label="'-'"]
  75 -> 33 [style=solid label="'!'"]
  75 -> 64 [style=solid label="'('"]
  75 -> 40 [style=dashed label="robotmove"]
  75 -> 43 [style=dashed label="robotwall"]
  75 -> 44 [style=dashed label="robotexit"]
  75 -> 154 [style=dashed label="expr"]
  75 -> 57 [style=dashed label="const"]
  76 [label="State 76\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 32 iff: IF error . ENDIF\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l120     | error . expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  76 -> 83 [style=dotted]
  76 -> 5 [style=solid label="BOOL"]
  76 -> 6 [style=solid label="INTEGER"]
  76 -> 59 [style=solid label="VARIABLE"]
  76 -> 77 [style=solid label="VVARIABLE"]
  76 -> 78 [style=solid label="MVARIABLE"]
  76 -> 155 [style=solid label="ENDIF"]
  76 -> 27 [style=solid label="MOVE"]
  76 -> 30 [style=solid label="ROBEX"]
  76 -> 31 [style=solid label="WALL"]
  76 -> 32 [style=solid label="'-'"]
  76 -> 33 [style=solid label="'!'"]
  76 -> 64 [style=solid label="'('"]
  76 -> 40 [style=dashed label="robotmove"]
  76 -> 43 [style=dashed label="robotwall"]
  76 -> 44 [style=dashed label="robotexit"]
  76 -> 156 [style=dashed label="expr"]
  76 -> 57 [style=dashed label="const"]
  77 [label="State 77\n\l118 expr: VVARIABLE . '(' expr ')'\l"]
  77 -> 157 [style=solid label="'('"]
  78 [label="State 78\n\l119 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  78 -> 158 [style=solid label="'('"]
  79 [label="State 79\n\l 31 iff: IF expr . NEWLINE BEGIF stmts ENDIF\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  79 -> 159 [style=solid label="NEWLINE"]
  79 -> 121 [style=solid label="CONJUNCTION"]
  79 -> 122 [style=solid label="'<'"]
  79 -> 123 [style=solid label="'>'"]
  79 -> 124 [style=solid label="'+'"]
  79 -> 125 [style=solid label="'-'"]
  79 -> 126 [style=solid label="'/'"]
  80 [label="State 80\n\l 34 forr: FORR error . ENDFOR\l"]
  80 -> 160 [style=solid label="ENDFOR"]
  81 [label="State 81\n\l 33 forr: FORR declaration . DOUBLEDOT expr NEWLINE BEGFOR stmts ENDFOR\l"]
  81 -> 161 [style=solid label="DOUBLEDOT"]
  82 [label="State 82\n\l 26 robotmove: . MOVE '(' expr ')'\l 26          | MOVE '(' . expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  82 -> 83 [style=dotted]
  82 -> 5 [style=solid label="BOOL"]
  82 -> 6 [style=solid label="INTEGER"]
  82 -> 59 [style=solid label="VARIABLE"]
  82 -> 77 [style=solid label="VVARIABLE"]
  82 -> 78 [style=solid label="MVARIABLE"]
  82 -> 27 [style=solid label="MOVE"]
  82 -> 30 [style=solid label="ROBEX"]
  82 -> 31 [style=solid label="WALL"]
  82 -> 32 [style=solid label="'-'"]
  82 -> 33 [style=solid label="'!'"]
  82 -> 64 [style=solid label="'('"]
  82 -> 40 [style=dashed label="robotmove"]
  82 -> 43 [style=dashed label="robotwall"]
  82 -> 44 [style=dashed label="robotexit"]
  82 -> 162 [style=dashed label="expr"]
  82 -> 57 [style=dashed label="const"]
  83 [label="State 83\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l120     | error . expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  83 -> 83 [style=dotted]
  83 -> 5 [style=solid label="BOOL"]
  83 -> 6 [style=solid label="INTEGER"]
  83 -> 59 [style=solid label="VARIABLE"]
  83 -> 77 [style=solid label="VVARIABLE"]
  83 -> 78 [style=solid label="MVARIABLE"]
  83 -> 27 [style=solid label="MOVE"]
  83 -> 30 [style=solid label="ROBEX"]
  83 -> 31 [style=solid label="WALL"]
  83 -> 32 [style=solid label="'-'"]
  83 -> 33 [style=solid label="'!'"]
  83 -> 64 [style=solid label="'('"]
  83 -> 40 [style=dashed label="robotmove"]
  83 -> 43 [style=dashed label="robotwall"]
  83 -> 44 [style=dashed label="robotexit"]
  83 -> 156 [style=dashed label="expr"]
  83 -> 57 [style=dashed label="const"]
  84 [label="State 84\n\l109 expr: '-' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l110     | expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  84 -> 121 [style=solid label="CONJUNCTION"]
  84 -> "84R109d" [label="[CONJUNCTION]", style=solid]
 "84R109d" [label="R109", fillcolor=5, shape=diamond, style=filled]
  84 -> "84R109" [style=solid]
 "84R109" [label="R109", fillcolor=3, shape=diamond, style=filled]
  85 [label="State 85\n\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l115     | '!' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l116     | expr . CONJUNCTION expr\l"]
  85 -> 121 [style=solid label="CONJUNCTION"]
  85 -> "85R115d" [label="[CONJUNCTION]", style=solid]
 "85R115d" [label="R115", fillcolor=5, shape=diamond, style=filled]
  85 -> "85R115" [style=solid]
 "85R115" [label="R115", fillcolor=3, shape=diamond, style=filled]
  86 [label="State 86\n\l  8 stmts: error .  [error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, ENDIF, ENDFOR, E, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', ')', '[', '{']\l 23 stmt: error . NEWLINE\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 43 function: error . E\l 53 callfunction: error . '[' callfunc_args ']'\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 67       | error . matrix\l 68       | . error vector\l 68       | error . vector\l 69       | . error expr\l 69       | error . expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 82       | error . vector\l 83       | . error expr\l 83       | error . expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l120     | error . expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  86 -> 58 [style=dotted]
  86 -> 5 [style=solid label="BOOL"]
  86 -> 6 [style=solid label="INTEGER"]
  86 -> 59 [style=solid label="VARIABLE"]
  86 -> 60 [style=solid label="VVARIABLE"]
  86 -> 61 [style=solid label="MVARIABLE"]
  86 -> 62 [style=solid label="NEWLINE"]
  86 -> 63 [style=solid label="E"]
  86 -> 27 [style=solid label="MOVE"]
  86 -> 30 [style=solid label="ROBEX"]
  86 -> 31 [style=solid label="WALL"]
  86 -> 32 [style=solid label="'-'"]
  86 -> 33 [style=solid label="'!'"]
  86 -> 64 [style=solid label="'('"]
  86 -> 65 [style=solid label="'['"]
  86 -> 36 [style=solid label="'{'"]
  86 -> 40 [style=dashed label="robotmove"]
  86 -> 43 [style=dashed label="robotwall"]
  86 -> 44 [style=dashed label="robotexit"]
  86 -> 66 [style=dashed label="matrix"]
  86 -> 67 [style=dashed label="vector"]
  86 -> 68 [style=dashed label="expr"]
  86 -> 57 [style=dashed label="const"]
  86 -> "86R8d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, NEWLINE, E, MOVE, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "86R8d" [label="R8", fillcolor=5, shape=diamond, style=filled]
  86 -> "86R8" [label="[FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, PRINT, IF, FORR, ENDIF, ENDFOR, RIGHT, LEFT, ')']", style=solid]
 "86R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  87 [label="State 87\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 22     | '(' stmts . ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE BEGIF stmts ENDIF\l 32    | . IF error ENDIF\l 33 forr: . FORR declaration DOUBLEDOT expr NEWLINE BEGFOR stmts ENDFOR\l 34     | . FORR error ENDFOR\l 42 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 43         | . error E\l 52 callfunction: . FVARIABLE '[' callfunc_args ']'\l 53             | . error '[' callfunc_args ']'\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 87 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 88              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 89              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 90              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 91              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 92              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 93              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 94              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 95 declaration: . type VAR DECLARE expr\l 96            | . type VAR DECLARE vector\l 97            | . type VAR DECLARE matrix\l 98 assignment: . VARIABLE ASSIGN expr\l 99           | . VVARIABLE ASSIGN vector\l100           | . MVARIABLE ASSIGN matrix\l101 print: . PRINT '(' expr ')'\l102      | . PRINT '(' VVARIABLE ')'\l103      | . PRINT '(' MVARIABLE ')'\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l121 type: . INT\l122     | . CINT\l123     | . VINT\l124     | . MINT\l125     | . CVINT\l126     | . CMINT\l127     | . BOOLEAN\l128     | . CBOOLEAN\l129     | . VBOOLEAN\l130     | . MBOOLEAN\l131     | . CVBOOLEAN\l132     | . CMBOOLEAN\l133 const: . INTEGER\l134      | . BOOL\l"]
  87 -> 98 [style=dotted]
  87 -> 5 [style=solid label="BOOL"]
  87 -> 6 [style=solid label="INTEGER"]
  87 -> 7 [style=solid label="VARIABLE"]
  87 -> 8 [style=solid label="VVARIABLE"]
  87 -> 9 [style=solid label="MVARIABLE"]
  87 -> 10 [style=solid label="FVARIABLE"]
  87 -> 11 [style=solid label="CINT"]
  87 -> 12 [style=solid label="VINT"]
  87 -> 13 [style=solid label="MINT"]
  87 -> 14 [style=solid label="INT"]
  87 -> 15 [style=solid label="CVINT"]
  87 -> 16 [style=solid label="CMINT"]
  87 -> 17 [style=solid label="BOOLEAN"]
  87 -> 18 [style=solid label="CBOOLEAN"]
  87 -> 19 [style=solid label="VBOOLEAN"]
  87 -> 20 [style=solid label="MBOOLEAN"]
  87 -> 21 [style=solid label="CVBOOLEAN"]
  87 -> 22 [style=solid label="CMBOOLEAN"]
  87 -> 23 [style=solid label="NEWLINE"]
  87 -> 24 [style=solid label="PRINT"]
  87 -> 25 [style=solid label="IF"]
  87 -> 26 [style=solid label="FORR"]
  87 -> 27 [style=solid label="MOVE"]
  87 -> 28 [style=solid label="RIGHT"]
  87 -> 29 [style=solid label="LEFT"]
  87 -> 30 [style=solid label="ROBEX"]
  87 -> 31 [style=solid label="WALL"]
  87 -> 32 [style=solid label="'-'"]
  87 -> 33 [style=solid label="'!'"]
  87 -> 34 [style=solid label="'('"]
  87 -> 163 [style=solid label="')'"]
  87 -> 35 [style=solid label="'['"]
  87 -> 36 [style=solid label="'{'"]
  87 -> 99 [style=dashed label="stmt"]
  87 -> 39 [style=dashed label="robotactions"]
  87 -> 40 [style=dashed label="robotmove"]
  87 -> 41 [style=dashed label="robotright"]
  87 -> 42 [style=dashed label="robotleft"]
  87 -> 43 [style=dashed label="robotwall"]
  87 -> 44 [style=dashed label="robotexit"]
  87 -> 45 [style=dashed label="iff"]
  87 -> 46 [style=dashed label="forr"]
  87 -> 47 [style=dashed label="function"]
  87 -> 48 [style=dashed label="callfunction"]
  87 -> 49 [style=dashed label="matrix"]
  87 -> 50 [style=dashed label="vector"]
  87 -> 51 [style=dashed label="vmdeclaration"]
  87 -> 52 [style=dashed label="declaration"]
  87 -> 53 [style=dashed label="assignment"]
  87 -> 54 [style=dashed label="print"]
  87 -> 55 [style=dashed label="expr"]
  87 -> 56 [style=dashed label="type"]
  87 -> 57 [style=dashed label="const"]
  88 [label="State 88\n\l 10 stmt: expr . NEWLINE\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l117     | '(' expr . ')'\l"]
  88 -> 120 [style=solid label="NEWLINE"]
  88 -> 121 [style=solid label="CONJUNCTION"]
  88 -> 122 [style=solid label="'<'"]
  88 -> 123 [style=solid label="'>'"]
  88 -> 124 [style=solid label="'+'"]
  88 -> 125 [style=solid label="'-'"]
  88 -> 126 [style=solid label="'/'"]
  88 -> 164 [style=solid label="')'"]
  89 [label="State 89\n\l 36 return_func: return_func . ',' type VAR\l 37            | return_func . error\l 42 function: '[' return_func . ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l"]
  89 -> 165 [style=dotted]
  89 -> 166 [style=solid label="','"]
  89 -> 167 [style=solid label="']'"]
  90 [label="State 90\n\l 35 return_func: type . VAR\l"]
  90 -> 168 [style=solid label="VAR"]
  91 [label="State 91\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 82       | error . vector\l 83       | . error expr\l 83       | error . expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l120     | error . expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  91 -> 91 [style=dotted]
  91 -> 5 [style=solid label="BOOL"]
  91 -> 6 [style=solid label="INTEGER"]
  91 -> 59 [style=solid label="VARIABLE"]
  91 -> 60 [style=solid label="VVARIABLE"]
  91 -> 92 [style=solid label="MVARIABLE"]
  91 -> 27 [style=solid label="MOVE"]
  91 -> 30 [style=solid label="ROBEX"]
  91 -> 31 [style=solid label="WALL"]
  91 -> 32 [style=solid label="'-'"]
  91 -> 33 [style=solid label="'!'"]
  91 -> 64 [style=solid label="'('"]
  91 -> 93 [style=solid label="'{'"]
  91 -> 40 [style=dashed label="robotmove"]
  91 -> 43 [style=dashed label="robotwall"]
  91 -> 44 [style=dashed label="robotexit"]
  91 -> 169 [style=dashed label="vector"]
  91 -> 170 [style=dashed label="expr"]
  91 -> 57 [style=dashed label="const"]
  92 [label="State 92\n\l 75 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 76       | MVARIABLE . '(' '[' ']' ',' expr ')'\l119 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  92 -> 171 [style=solid label="'('"]
  93 [label="State 93\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 73 vector: '{' . exprs '}'\l 84 exprs: . expr ',' expr\l 85      | . exprs ',' expr\l 86      | . exprs error\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  93 -> 83 [style=dotted]
  93 -> 5 [style=solid label="BOOL"]
  93 -> 6 [style=solid label="INTEGER"]
  93 -> 59 [style=solid label="VARIABLE"]
  93 -> 77 [style=solid label="VVARIABLE"]
  93 -> 78 [style=solid label="MVARIABLE"]
  93 -> 27 [style=solid label="MOVE"]
  93 -> 30 [style=solid label="ROBEX"]
  93 -> 31 [style=solid label="WALL"]
  93 -> 32 [style=solid label="'-'"]
  93 -> 33 [style=solid label="'!'"]
  93 -> 64 [style=solid label="'('"]
  93 -> 40 [style=dashed label="robotmove"]
  93 -> 43 [style=dashed label="robotwall"]
  93 -> 44 [style=dashed label="robotexit"]
  93 -> 96 [style=dashed label="exprs"]
  93 -> 97 [style=dashed label="expr"]
  93 -> 57 [style=dashed label="const"]
  94 [label="State 94\n\l 54 matrix: '{' listexprs . '}'\l 71 listexprs: listexprs . ',' vector\l 72          | listexprs . error\l"]
  94 -> 172 [style=dotted]
  94 -> 173 [style=solid label="','"]
  94 -> 174 [style=solid label="'}'"]
  95 [label="State 95\n\l 70 listexprs: vector . ',' vector\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l"]
  95 -> 112 [style=solid label="ELEMMULT"]
  95 -> 114 [style=solid label="LEFTSHIFT"]
  95 -> 115 [style=solid label="RIGHTSHIFT"]
  95 -> 175 [style=solid label="','"]
  96 [label="State 96\n\l 73 vector: '{' exprs . '}'\l 85 exprs: exprs . ',' expr\l 86      | exprs . error\l"]
  96 -> 176 [style=dotted]
  96 -> 177 [style=solid label="','"]
  96 -> 178 [style=solid label="'}'"]
  97 [label="State 97\n\l 84 exprs: expr . ',' expr\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  97 -> 121 [style=solid label="CONJUNCTION"]
  97 -> 179 [style=solid label="','"]
  97 -> 122 [style=solid label="'<'"]
  97 -> 123 [style=solid label="'>'"]
  97 -> 124 [style=solid label="'+'"]
  97 -> 125 [style=solid label="'-'"]
  97 -> 126 [style=solid label="'/'"]
  98 [label="State 98\n\l  7 stmts: stmts error .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, ENDIF, ENDFOR, E, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', ')', '[', '{']\l 23 stmt: error . NEWLINE\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 43 function: error . E\l 53 callfunction: error . '[' callfunc_args ']'\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 67       | error . matrix\l 68       | . error vector\l 68       | error . vector\l 69       | . error expr\l 69       | error . expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 82       | error . vector\l 83       | . error expr\l 83       | error . expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l120     | error . expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  98 -> 58 [style=dotted]
  98 -> 5 [style=solid label="BOOL"]
  98 -> 6 [style=solid label="INTEGER"]
  98 -> 59 [style=solid label="VARIABLE"]
  98 -> 60 [style=solid label="VVARIABLE"]
  98 -> 61 [style=solid label="MVARIABLE"]
  98 -> 62 [style=solid label="NEWLINE"]
  98 -> 63 [style=solid label="E"]
  98 -> 27 [style=solid label="MOVE"]
  98 -> 30 [style=solid label="ROBEX"]
  98 -> 31 [style=solid label="WALL"]
  98 -> 32 [style=solid label="'-'"]
  98 -> 33 [style=solid label="'!'"]
  98 -> 64 [style=solid label="'('"]
  98 -> 65 [style=solid label="'['"]
  98 -> 36 [style=solid label="'{'"]
  98 -> 40 [style=dashed label="robotmove"]
  98 -> 43 [style=dashed label="robotwall"]
  98 -> 44 [style=dashed label="robotexit"]
  98 -> 66 [style=dashed label="matrix"]
  98 -> 67 [style=dashed label="vector"]
  98 -> 68 [style=dashed label="expr"]
  98 -> 57 [style=dashed label="const"]
  98 -> "98R7d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, NEWLINE, E, MOVE, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "98R7d" [label="R7", fillcolor=5, shape=diamond, style=filled]
  98 -> "98R7" [label="[$end, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, PRINT, IF, FORR, ENDIF, ENDFOR, RIGHT, LEFT, ')']", style=solid]
 "98R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  99 [label="State 99\n\l  6 stmts: stmts stmt .\l"]
  99 -> "99R6" [style=solid]
 "99R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  100 [label="State 100\n\l 21 stmt: robotactions NEWLINE .\l"]
  100 -> "100R21" [style=solid]
 "100R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  101 [label="State 101\n\l 17 stmt: iff NEWLINE .\l"]
  101 -> "101R17" [style=solid]
 "101R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  102 [label="State 102\n\l 18 stmt: forr NEWLINE .\l"]
  102 -> "102R18" [style=solid]
 "102R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  103 [label="State 103\n\l 19 stmt: function NEWLINE .\l"]
  103 -> "103R19" [style=solid]
 "103R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  104 [label="State 104\n\l 20 stmt: callfunction NEWLINE .\l"]
  104 -> "104R20" [style=solid]
 "104R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  105 [label="State 105\n\l 12 stmt: matrix NEWLINE .\l"]
  105 -> "105R12" [style=solid]
 "105R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  106 [label="State 106\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 60       | matrix ELEMMULT . matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 65       | matrix ELEMMULT . vector\l 66       | . matrix ELEMMULT expr\l 66       | matrix ELEMMULT . expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  106 -> 58 [style=dotted]
  106 -> 5 [style=solid label="BOOL"]
  106 -> 6 [style=solid label="INTEGER"]
  106 -> 59 [style=solid label="VARIABLE"]
  106 -> 60 [style=solid label="VVARIABLE"]
  106 -> 61 [style=solid label="MVARIABLE"]
  106 -> 27 [style=solid label="MOVE"]
  106 -> 30 [style=solid label="ROBEX"]
  106 -> 31 [style=solid label="WALL"]
  106 -> 32 [style=solid label="'-'"]
  106 -> 33 [style=solid label="'!'"]
  106 -> 64 [style=solid label="'('"]
  106 -> 36 [style=solid label="'{'"]
  106 -> 40 [style=dashed label="robotmove"]
  106 -> 43 [style=dashed label="robotwall"]
  106 -> 44 [style=dashed label="robotexit"]
  106 -> 180 [style=dashed label="matrix"]
  106 -> 181 [style=dashed label="vector"]
  106 -> 182 [style=dashed label="expr"]
  106 -> 57 [style=dashed label="const"]
  107 [label="State 107\n\l 61 matrix: matrix '\\'' .\l"]
  107 -> "107R61" [style=solid]
 "107R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
  108 [label="State 108\n\l 63 matrix: matrix LEFTSHIFT .\l"]
  108 -> "108R63" [style=solid]
 "108R63" [label="R63", fillcolor=3, shape=diamond, style=filled]
  109 [label="State 109\n\l 62 matrix: matrix RIGHTSHIFT .\l"]
  109 -> "109R62" [style=solid]
 "109R62" [label="R62", fillcolor=3, shape=diamond, style=filled]
  110 [label="State 110\n\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 59       | matrix '*' . matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l"]
  110 -> 143 [style=dotted]
  110 -> 138 [style=solid label="VVARIABLE"]
  110 -> 144 [style=solid label="MVARIABLE"]
  110 -> 36 [style=solid label="'{'"]
  110 -> 183 [style=dashed label="matrix"]
  110 -> 146 [style=dashed label="vector"]
  111 [label="State 111\n\l 11 stmt: vector NEWLINE .\l"]
  111 -> "111R11" [style=solid]
 "111R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  112 [label="State 112\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 78       | vector ELEMMULT . vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 81       | vector ELEMMULT . expr\l 82       | . error vector\l 83       | . error expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  112 -> 91 [style=dotted]
  112 -> 5 [style=solid label="BOOL"]
  112 -> 6 [style=solid label="INTEGER"]
  112 -> 59 [style=solid label="VARIABLE"]
  112 -> 60 [style=solid label="VVARIABLE"]
  112 -> 92 [style=solid label="MVARIABLE"]
  112 -> 27 [style=solid label="MOVE"]
  112 -> 30 [style=solid label="ROBEX"]
  112 -> 31 [style=solid label="WALL"]
  112 -> 32 [style=solid label="'-'"]
  112 -> 33 [style=solid label="'!'"]
  112 -> 64 [style=solid label="'('"]
  112 -> 93 [style=solid label="'{'"]
  112 -> 40 [style=dashed label="robotmove"]
  112 -> 43 [style=dashed label="robotwall"]
  112 -> 44 [style=dashed label="robotexit"]
  112 -> 184 [style=dashed label="vector"]
  112 -> 185 [style=dashed label="expr"]
  112 -> 57 [style=dashed label="const"]
  113 [label="State 113\n\l 64 matrix: vector '\\'' .\l"]
  113 -> "113R64" [style=solid]
 "113R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
  114 [label="State 114\n\l 80 vector: vector LEFTSHIFT .\l"]
  114 -> "114R80" [style=solid]
 "114R80" [label="R80", fillcolor=3, shape=diamond, style=filled]
  115 [label="State 115\n\l 79 vector: vector RIGHTSHIFT .\l"]
  115 -> "115R79" [style=solid]
 "115R79" [label="R79", fillcolor=3, shape=diamond, style=filled]
  116 [label="State 116\n\l 14 stmt: vmdeclaration NEWLINE .\l"]
  116 -> "116R14" [style=solid]
 "116R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  117 [label="State 117\n\l 15 stmt: declaration NEWLINE .\l"]
  117 -> "117R15" [style=solid]
 "117R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  118 [label="State 118\n\l 16 stmt: assignment NEWLINE .\l"]
  118 -> "118R16" [style=solid]
 "118R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  119 [label="State 119\n\l 13 stmt: print NEWLINE .\l"]
  119 -> "119R13" [style=solid]
 "119R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  120 [label="State 120\n\l 10 stmt: expr NEWLINE .\l"]
  120 -> "120R10" [style=solid]
 "120R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  121 [label="State 121\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l116     | expr CONJUNCTION . expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  121 -> 83 [style=dotted]
  121 -> 5 [style=solid label="BOOL"]
  121 -> 6 [style=solid label="INTEGER"]
  121 -> 59 [style=solid label="VARIABLE"]
  121 -> 77 [style=solid label="VVARIABLE"]
  121 -> 78 [style=solid label="MVARIABLE"]
  121 -> 27 [style=solid label="MOVE"]
  121 -> 30 [style=solid label="ROBEX"]
  121 -> 31 [style=solid label="WALL"]
  121 -> 32 [style=solid label="'-'"]
  121 -> 33 [style=solid label="'!'"]
  121 -> 64 [style=solid label="'('"]
  121 -> 40 [style=dashed label="robotmove"]
  121 -> 43 [style=dashed label="robotwall"]
  121 -> 44 [style=dashed label="robotexit"]
  121 -> 186 [style=dashed label="expr"]
  121 -> 57 [style=dashed label="const"]
  122 [label="State 122\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l113     | expr '<' . expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  122 -> 83 [style=dotted]
  122 -> 5 [style=solid label="BOOL"]
  122 -> 6 [style=solid label="INTEGER"]
  122 -> 59 [style=solid label="VARIABLE"]
  122 -> 77 [style=solid label="VVARIABLE"]
  122 -> 78 [style=solid label="MVARIABLE"]
  122 -> 27 [style=solid label="MOVE"]
  122 -> 30 [style=solid label="ROBEX"]
  122 -> 31 [style=solid label="WALL"]
  122 -> 32 [style=solid label="'-'"]
  122 -> 33 [style=solid label="'!'"]
  122 -> 64 [style=solid label="'('"]
  122 -> 40 [style=dashed label="robotmove"]
  122 -> 43 [style=dashed label="robotwall"]
  122 -> 44 [style=dashed label="robotexit"]
  122 -> 187 [style=dashed label="expr"]
  122 -> 57 [style=dashed label="const"]
  123 [label="State 123\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l114     | expr '>' . expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  123 -> 83 [style=dotted]
  123 -> 5 [style=solid label="BOOL"]
  123 -> 6 [style=solid label="INTEGER"]
  123 -> 59 [style=solid label="VARIABLE"]
  123 -> 77 [style=solid label="VVARIABLE"]
  123 -> 78 [style=solid label="MVARIABLE"]
  123 -> 27 [style=solid label="MOVE"]
  123 -> 30 [style=solid label="ROBEX"]
  123 -> 31 [style=solid label="WALL"]
  123 -> 32 [style=solid label="'-'"]
  123 -> 33 [style=solid label="'!'"]
  123 -> 64 [style=solid label="'('"]
  123 -> 40 [style=dashed label="robotmove"]
  123 -> 43 [style=dashed label="robotwall"]
  123 -> 44 [style=dashed label="robotexit"]
  123 -> 188 [style=dashed label="expr"]
  123 -> 57 [style=dashed label="const"]
  124 [label="State 124\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l110     | expr '+' . expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  124 -> 83 [style=dotted]
  124 -> 5 [style=solid label="BOOL"]
  124 -> 6 [style=solid label="INTEGER"]
  124 -> 59 [style=solid label="VARIABLE"]
  124 -> 77 [style=solid label="VVARIABLE"]
  124 -> 78 [style=solid label="MVARIABLE"]
  124 -> 27 [style=solid label="MOVE"]
  124 -> 30 [style=solid label="ROBEX"]
  124 -> 31 [style=solid label="WALL"]
  124 -> 32 [style=solid label="'-'"]
  124 -> 33 [style=solid label="'!'"]
  124 -> 64 [style=solid label="'('"]
  124 -> 40 [style=dashed label="robotmove"]
  124 -> 43 [style=dashed label="robotwall"]
  124 -> 44 [style=dashed label="robotexit"]
  124 -> 189 [style=dashed label="expr"]
  124 -> 57 [style=dashed label="const"]
  125 [label="State 125\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l111     | expr '-' . expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  125 -> 83 [style=dotted]
  125 -> 5 [style=solid label="BOOL"]
  125 -> 6 [style=solid label="INTEGER"]
  125 -> 59 [style=solid label="VARIABLE"]
  125 -> 77 [style=solid label="VVARIABLE"]
  125 -> 78 [style=solid label="MVARIABLE"]
  125 -> 27 [style=solid label="MOVE"]
  125 -> 30 [style=solid label="ROBEX"]
  125 -> 31 [style=solid label="WALL"]
  125 -> 32 [style=solid label="'-'"]
  125 -> 33 [style=solid label="'!'"]
  125 -> 64 [style=solid label="'('"]
  125 -> 40 [style=dashed label="robotmove"]
  125 -> 43 [style=dashed label="robotwall"]
  125 -> 44 [style=dashed label="robotexit"]
  125 -> 190 [style=dashed label="expr"]
  125 -> 57 [style=dashed label="const"]
  126 [label="State 126\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l112     | expr '/' . expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  126 -> 83 [style=dotted]
  126 -> 5 [style=solid label="BOOL"]
  126 -> 6 [style=solid label="INTEGER"]
  126 -> 59 [style=solid label="VARIABLE"]
  126 -> 77 [style=solid label="VVARIABLE"]
  126 -> 78 [style=solid label="MVARIABLE"]
  126 -> 27 [style=solid label="MOVE"]
  126 -> 30 [style=solid label="ROBEX"]
  126 -> 31 [style=solid label="WALL"]
  126 -> 32 [style=solid label="'-'"]
  126 -> 33 [style=solid label="'!'"]
  126 -> 64 [style=solid label="'('"]
  126 -> 40 [style=dashed label="robotmove"]
  126 -> 43 [style=dashed label="robotwall"]
  126 -> 44 [style=dashed label="robotexit"]
  126 -> 191 [style=dashed label="expr"]
  126 -> 57 [style=dashed label="const"]
  127 [label="State 127\n\l 95 declaration: type VAR . DECLARE expr\l 96            | type VAR . DECLARE vector\l 97            | type VAR . DECLARE matrix\l"]
  127 -> 192 [style=solid label="DECLARE"]
  128 [label="State 128\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 74       | VVARIABLE '(' . vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l118     | VVARIABLE '(' . expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  128 -> 91 [style=dotted]
  128 -> 5 [style=solid label="BOOL"]
  128 -> 6 [style=solid label="INTEGER"]
  128 -> 59 [style=solid label="VARIABLE"]
  128 -> 60 [style=solid label="VVARIABLE"]
  128 -> 92 [style=solid label="MVARIABLE"]
  128 -> 27 [style=solid label="MOVE"]
  128 -> 30 [style=solid label="ROBEX"]
  128 -> 31 [style=solid label="WALL"]
  128 -> 32 [style=solid label="'-'"]
  128 -> 33 [style=solid label="'!'"]
  128 -> 64 [style=solid label="'('"]
  128 -> 93 [style=solid label="'{'"]
  128 -> 40 [style=dashed label="robotmove"]
  128 -> 43 [style=dashed label="robotwall"]
  128 -> 44 [style=dashed label="robotexit"]
  128 -> 193 [style=dashed label="vector"]
  128 -> 194 [style=dashed label="expr"]
  128 -> 57 [style=dashed label="const"]
  129 [label="State 129\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 55       | MVARIABLE '(' . vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 56       | MVARIABLE '(' . '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 57       | MVARIABLE '(' . matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 75       | MVARIABLE '(' . expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 76       | MVARIABLE '(' . '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l119     | MVARIABLE '(' . expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  129 -> 58 [style=dotted]
  129 -> 5 [style=solid label="BOOL"]
  129 -> 6 [style=solid label="INTEGER"]
  129 -> 59 [style=solid label="VARIABLE"]
  129 -> 60 [style=solid label="VVARIABLE"]
  129 -> 61 [style=solid label="MVARIABLE"]
  129 -> 27 [style=solid label="MOVE"]
  129 -> 30 [style=solid label="ROBEX"]
  129 -> 31 [style=solid label="WALL"]
  129 -> 32 [style=solid label="'-'"]
  129 -> 33 [style=solid label="'!'"]
  129 -> 64 [style=solid label="'('"]
  129 -> 195 [style=solid label="'['"]
  129 -> 36 [style=solid label="'{'"]
  129 -> 40 [style=dashed label="robotmove"]
  129 -> 43 [style=dashed label="robotwall"]
  129 -> 44 [style=dashed label="robotexit"]
  129 -> 196 [style=dashed label="matrix"]
  129 -> 197 [style=dashed label="vector"]
  129 -> 198 [style=dashed label="expr"]
  129 -> 57 [style=dashed label="const"]
  130 [label="State 130\n\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l117     | '(' expr . ')'\l"]
  130 -> 121 [style=solid label="CONJUNCTION"]
  130 -> 122 [style=solid label="'<'"]
  130 -> 123 [style=solid label="'>'"]
  130 -> 124 [style=solid label="'+'"]
  130 -> 125 [style=solid label="'-'"]
  130 -> 126 [style=solid label="'/'"]
  130 -> 164 [style=solid label="')'"]
  131 [label="State 131\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 51 callfunc_args: error .  [error, ',', ']']\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 67       | error . matrix\l 68       | . error vector\l 68       | error . vector\l 69       | . error expr\l 69       | error . expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 82       | error . vector\l 83       | . error expr\l 83       | error . expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l120     | error . expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  131 -> 58 [style=dotted]
  131 -> 5 [style=solid label="BOOL"]
  131 -> 6 [style=solid label="INTEGER"]
  131 -> 59 [style=solid label="VARIABLE"]
  131 -> 60 [style=solid label="VVARIABLE"]
  131 -> 61 [style=solid label="MVARIABLE"]
  131 -> 27 [style=solid label="MOVE"]
  131 -> 30 [style=solid label="ROBEX"]
  131 -> 31 [style=solid label="WALL"]
  131 -> 32 [style=solid label="'-'"]
  131 -> 33 [style=solid label="'!'"]
  131 -> 64 [style=solid label="'('"]
  131 -> 36 [style=solid label="'{'"]
  131 -> 40 [style=dashed label="robotmove"]
  131 -> 43 [style=dashed label="robotwall"]
  131 -> 44 [style=dashed label="robotexit"]
  131 -> 66 [style=dashed label="matrix"]
  131 -> 67 [style=dashed label="vector"]
  131 -> 68 [style=dashed label="expr"]
  131 -> 57 [style=dashed label="const"]
  131 -> "131R51d" [label="[error]", style=solid]
 "131R51d" [label="R51", fillcolor=5, shape=diamond, style=filled]
  131 -> "131R51" [label="[',', ']']", style=solid]
 "131R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
  132 [label="State 132\n\l 47 callfunc_args: callfunc_args . ',' expr\l 48              | callfunc_args . ',' vector\l 49              | callfunc_args . ',' matrix\l 50              | callfunc_args . error\l 53 callfunction: error '[' callfunc_args . ']'\l"]
  132 -> 199 [style=dotted]
  132 -> 200 [style=solid label="','"]
  132 -> 201 [style=solid label="']'"]
  133 [label="State 133\n\l 46 callfunc_args: matrix .  [error, ',', ']']\l 59 matrix: matrix . '*' matrix\l 60       | matrix . ELEMMULT matrix\l 61       | matrix . '\\''\l 62       | matrix . RIGHTSHIFT\l 63       | matrix . LEFTSHIFT\l 65       | matrix . ELEMMULT vector\l 66       | matrix . ELEMMULT expr\l"]
  133 -> 106 [style=solid label="ELEMMULT"]
  133 -> 107 [style=solid label="'\\''"]
  133 -> 108 [style=solid label="LEFTSHIFT"]
  133 -> 109 [style=solid label="RIGHTSHIFT"]
  133 -> 110 [style=solid label="'*'"]
  133 -> "133R46" [style=solid]
 "133R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
  134 [label="State 134\n\l 45 callfunc_args: vector .  [error, ',', ']']\l 64 matrix: vector . '\\''\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l"]
  134 -> 112 [style=solid label="ELEMMULT"]
  134 -> 113 [style=solid label="'\\''"]
  134 -> 114 [style=solid label="LEFTSHIFT"]
  134 -> 115 [style=solid label="RIGHTSHIFT"]
  134 -> "134R45" [style=solid]
 "134R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
  135 [label="State 135\n\l 44 callfunc_args: expr .  [error, ',', ']']\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  135 -> 121 [style=solid label="CONJUNCTION"]
  135 -> 122 [style=solid label="'<'"]
  135 -> 123 [style=solid label="'>'"]
  135 -> 124 [style=solid label="'+'"]
  135 -> 125 [style=solid label="'-'"]
  135 -> 126 [style=solid label="'/'"]
  135 -> "135R44" [style=solid]
 "135R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  136 [label="State 136\n\l 98 assignment: VARIABLE ASSIGN expr .  [NEWLINE]\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  136 -> 121 [style=solid label="CONJUNCTION"]
  136 -> 122 [style=solid label="'<'"]
  136 -> 123 [style=solid label="'>'"]
  136 -> 124 [style=solid label="'+'"]
  136 -> 125 [style=solid label="'-'"]
  136 -> 126 [style=solid label="'/'"]
  136 -> "136R98" [style=solid]
 "136R98" [label="R98", fillcolor=3, shape=diamond, style=filled]
  137 [label="State 137\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 82       | error . vector\l 83       | . error expr\l 83       | error . expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  137 -> 91 [style=dotted]
  137 -> 5 [style=solid label="BOOL"]
  137 -> 6 [style=solid label="INTEGER"]
  137 -> 59 [style=solid label="VARIABLE"]
  137 -> 60 [style=solid label="VVARIABLE"]
  137 -> 92 [style=solid label="MVARIABLE"]
  137 -> 27 [style=solid label="MOVE"]
  137 -> 30 [style=solid label="ROBEX"]
  137 -> 31 [style=solid label="WALL"]
  137 -> 32 [style=solid label="'-'"]
  137 -> 33 [style=solid label="'!'"]
  137 -> 64 [style=solid label="'('"]
  137 -> 93 [style=solid label="'{'"]
  137 -> 40 [style=dashed label="robotmove"]
  137 -> 43 [style=dashed label="robotwall"]
  137 -> 44 [style=dashed label="robotexit"]
  137 -> 169 [style=dashed label="vector"]
  137 -> 202 [style=dashed label="expr"]
  137 -> 57 [style=dashed label="const"]
  138 [label="State 138\n\l 74 vector: VVARIABLE . '(' vector ',' '[' ']' ')'\l 77       | VVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', '}']\l"]
  138 -> 203 [style=solid label="'('"]
  138 -> "138R77" [style=solid]
 "138R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  139 [label="State 139\n\l 75 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 76       | MVARIABLE . '(' '[' ']' ',' expr ')'\l"]
  139 -> 204 [style=solid label="'('"]
  140 [label="State 140\n\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l 99 assignment: VVARIABLE ASSIGN vector .  [NEWLINE]\l"]
  140 -> 112 [style=solid label="ELEMMULT"]
  140 -> 114 [style=solid label="LEFTSHIFT"]
  140 -> 115 [style=solid label="RIGHTSHIFT"]
  140 -> "140R99" [style=solid]
 "140R99" [label="R99", fillcolor=3, shape=diamond, style=filled]
  141 [label="State 141\n\l 74 vector: VVARIABLE '(' vector . ',' '[' ']' ')'\l 78       | vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l 88 vmdeclaration: VVARIABLE '(' vector . ',' '[' ']' ')' ASSIGN vector\l"]
  141 -> 112 [style=solid label="ELEMMULT"]
  141 -> 114 [style=solid label="LEFTSHIFT"]
  141 -> 115 [style=solid label="RIGHTSHIFT"]
  141 -> 205 [style=solid label="','"]
  142 [label="State 142\n\l 87 vmdeclaration: VVARIABLE '(' expr . ')' ASSIGN expr\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l118     | VVARIABLE '(' expr . ')'\l"]
  142 -> 121 [style=solid label="CONJUNCTION"]
  142 -> 122 [style=solid label="'<'"]
  142 -> 123 [style=solid label="'>'"]
  142 -> 124 [style=solid label="'+'"]
  142 -> 125 [style=solid label="'-'"]
  142 -> 126 [style=solid label="'/'"]
  142 -> 206 [style=solid label="')'"]
  143 [label="State 143\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 67       | error . matrix\l 68       | . error vector\l 68       | error . vector\l 69       | . error expr\l 69       | error . expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 82       | error . vector\l 83       | . error expr\l 83       | error . expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  143 -> 58 [style=dotted]
  143 -> 5 [style=solid label="BOOL"]
  143 -> 6 [style=solid label="INTEGER"]
  143 -> 59 [style=solid label="VARIABLE"]
  143 -> 60 [style=solid label="VVARIABLE"]
  143 -> 61 [style=solid label="MVARIABLE"]
  143 -> 27 [style=solid label="MOVE"]
  143 -> 30 [style=solid label="ROBEX"]
  143 -> 31 [style=solid label="WALL"]
  143 -> 32 [style=solid label="'-'"]
  143 -> 33 [style=solid label="'!'"]
  143 -> 64 [style=solid label="'('"]
  143 -> 36 [style=solid label="'{'"]
  143 -> 40 [style=dashed label="robotmove"]
  143 -> 43 [style=dashed label="robotwall"]
  143 -> 44 [style=dashed label="robotexit"]
  143 -> 66 [style=dashed label="matrix"]
  143 -> 67 [style=dashed label="vector"]
  143 -> 207 [style=dashed label="expr"]
  143 -> 57 [style=dashed label="const"]
  144 [label="State 144\n\l 55 matrix: MVARIABLE . '(' vector ',' '[' ']' ')'\l 56       | MVARIABLE . '(' '[' ']' ',' vector ')'\l 57       | MVARIABLE . '(' matrix ')'\l 58       | MVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 75 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 76       | MVARIABLE . '(' '[' ']' ',' expr ')'\l"]
  144 -> 208 [style=solid label="'('"]
  144 -> "144R58" [style=solid]
 "144R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  145 [label="State 145\n\l 59 matrix: matrix . '*' matrix\l 60       | matrix . ELEMMULT matrix\l 61       | matrix . '\\''\l 62       | matrix . RIGHTSHIFT\l 63       | matrix . LEFTSHIFT\l 65       | matrix . ELEMMULT vector\l 66       | matrix . ELEMMULT expr\l100 assignment: MVARIABLE ASSIGN matrix .  [NEWLINE]\l"]
  145 -> 106 [style=solid label="ELEMMULT"]
  145 -> 107 [style=solid label="'\\''"]
  145 -> 108 [style=solid label="LEFTSHIFT"]
  145 -> 109 [style=solid label="RIGHTSHIFT"]
  145 -> 110 [style=solid label="'*'"]
  145 -> "145R100" [style=solid]
 "145R100" [label="R100", fillcolor=3, shape=diamond, style=filled]
  146 [label="State 146\n\l 64 matrix: vector . '\\''\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l"]
  146 -> 112 [style=solid label="ELEMMULT"]
  146 -> 113 [style=solid label="'\\''"]
  146 -> 114 [style=solid label="LEFTSHIFT"]
  146 -> 115 [style=solid label="RIGHTSHIFT"]
  147 [label="State 147\n\l 56 matrix: MVARIABLE '(' '[' . ']' ',' vector ')'\l 76 vector: MVARIABLE '(' '[' . ']' ',' expr ')'\l 91 vmdeclaration: MVARIABLE '(' '[' . ']' ',' expr ')' ASSIGN vector\l 93              | MVARIABLE '(' '[' . ']' ',' vector ')' ASSIGN matrix\l"]
  147 -> 209 [style=solid label="']'"]
  148 [label="State 148\n\l 57 matrix: MVARIABLE '(' matrix . ')'\l 59       | matrix . '*' matrix\l 60       | matrix . ELEMMULT matrix\l 61       | matrix . '\\''\l 62       | matrix . RIGHTSHIFT\l 63       | matrix . LEFTSHIFT\l 65       | matrix . ELEMMULT vector\l 66       | matrix . ELEMMULT expr\l 94 vmdeclaration: MVARIABLE '(' matrix . ')' ASSIGN matrix\l"]
  148 -> 106 [style=solid label="ELEMMULT"]
  148 -> 107 [style=solid label="'\\''"]
  148 -> 108 [style=solid label="LEFTSHIFT"]
  148 -> 109 [style=solid label="RIGHTSHIFT"]
  148 -> 110 [style=solid label="'*'"]
  148 -> 210 [style=solid label="')'"]
  149 [label="State 149\n\l 55 matrix: MVARIABLE '(' vector . ',' '[' ']' ')'\l 64       | vector . '\\''\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l 92 vmdeclaration: MVARIABLE '(' vector . ',' '[' ']' ')' ASSIGN matrix\l"]
  149 -> 112 [style=solid label="ELEMMULT"]
  149 -> 113 [style=solid label="'\\''"]
  149 -> 114 [style=solid label="LEFTSHIFT"]
  149 -> 115 [style=solid label="RIGHTSHIFT"]
  149 -> 211 [style=solid label="','"]
  150 [label="State 150\n\l 75 vector: MVARIABLE '(' expr . ',' '[' ']' ')'\l 89 vmdeclaration: MVARIABLE '(' expr . ',' expr ')' ASSIGN expr\l 90              | MVARIABLE '(' expr . ',' '[' ']' ')' ASSIGN vector\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l119     | MVARIABLE '(' expr . ',' expr ')'\l"]
  150 -> 121 [style=solid label="CONJUNCTION"]
  150 -> 212 [style=solid label="','"]
  150 -> 122 [style=solid label="'<'"]
  150 -> 123 [style=solid label="'>'"]
  150 -> 124 [style=solid label="'+'"]
  150 -> 125 [style=solid label="'-'"]
  150 -> 126 [style=solid label="'/'"]
  151 [label="State 151\n\l 47 callfunc_args: callfunc_args . ',' expr\l 48              | callfunc_args . ',' vector\l 49              | callfunc_args . ',' matrix\l 50              | callfunc_args . error\l 52 callfunction: FVARIABLE '[' callfunc_args . ']'\l"]
  151 -> 199 [style=dotted]
  151 -> 200 [style=solid label="','"]
  151 -> 213 [style=solid label="']'"]
  152 [label="State 152\n\l102 print: PRINT '(' VVARIABLE . ')'\l118 expr: VVARIABLE . '(' expr ')'\l"]
  152 -> 157 [style=solid label="'('"]
  152 -> 214 [style=solid label="')'"]
  153 [label="State 153\n\l103 print: PRINT '(' MVARIABLE . ')'\l119 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  153 -> 158 [style=solid label="'('"]
  153 -> 215 [style=solid label="')'"]
  154 [label="State 154\n\l101 print: PRINT '(' expr . ')'\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  154 -> 121 [style=solid label="CONJUNCTION"]
  154 -> 122 [style=solid label="'<'"]
  154 -> 123 [style=solid label="'>'"]
  154 -> 124 [style=solid label="'+'"]
  154 -> 125 [style=solid label="'-'"]
  154 -> 126 [style=solid label="'/'"]
  154 -> 216 [style=solid label="')'"]
  155 [label="State 155\n\l 32 iff: IF error ENDIF .\l"]
  155 -> "155R32" [style=solid]
 "155R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  156 [label="State 156\n\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l120     | error expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l"]
  156 -> 121 [style=solid label="CONJUNCTION"]
  156 -> 122 [style=solid label="'<'"]
  156 -> 123 [style=solid label="'>'"]
  156 -> 124 [style=solid label="'+'"]
  156 -> 125 [style=solid label="'-'"]
  156 -> 126 [style=solid label="'/'"]
  156 -> "156R120d" [label="[CONJUNCTION, '<', '>', '+', '-', '/']", style=solid]
 "156R120d" [label="R120", fillcolor=5, shape=diamond, style=filled]
  156 -> "156R120" [style=solid]
 "156R120" [label="R120", fillcolor=3, shape=diamond, style=filled]
  157 [label="State 157\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l118     | VVARIABLE '(' . expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  157 -> 83 [style=dotted]
  157 -> 5 [style=solid label="BOOL"]
  157 -> 6 [style=solid label="INTEGER"]
  157 -> 59 [style=solid label="VARIABLE"]
  157 -> 77 [style=solid label="VVARIABLE"]
  157 -> 78 [style=solid label="MVARIABLE"]
  157 -> 27 [style=solid label="MOVE"]
  157 -> 30 [style=solid label="ROBEX"]
  157 -> 31 [style=solid label="WALL"]
  157 -> 32 [style=solid label="'-'"]
  157 -> 33 [style=solid label="'!'"]
  157 -> 64 [style=solid label="'('"]
  157 -> 40 [style=dashed label="robotmove"]
  157 -> 43 [style=dashed label="robotwall"]
  157 -> 44 [style=dashed label="robotexit"]
  157 -> 194 [style=dashed label="expr"]
  157 -> 57 [style=dashed label="const"]
  158 [label="State 158\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l119     | MVARIABLE '(' . expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  158 -> 83 [style=dotted]
  158 -> 5 [style=solid label="BOOL"]
  158 -> 6 [style=solid label="INTEGER"]
  158 -> 59 [style=solid label="VARIABLE"]
  158 -> 77 [style=solid label="VVARIABLE"]
  158 -> 78 [style=solid label="MVARIABLE"]
  158 -> 27 [style=solid label="MOVE"]
  158 -> 30 [style=solid label="ROBEX"]
  158 -> 31 [style=solid label="WALL"]
  158 -> 32 [style=solid label="'-'"]
  158 -> 33 [style=solid label="'!'"]
  158 -> 64 [style=solid label="'('"]
  158 -> 40 [style=dashed label="robotmove"]
  158 -> 43 [style=dashed label="robotwall"]
  158 -> 44 [style=dashed label="robotexit"]
  158 -> 217 [style=dashed label="expr"]
  158 -> 57 [style=dashed label="const"]
  159 [label="State 159\n\l 31 iff: IF expr NEWLINE . BEGIF stmts ENDIF\l"]
  159 -> 218 [style=solid label="BEGIF"]
  160 [label="State 160\n\l 34 forr: FORR error ENDFOR .\l"]
  160 -> "160R34" [style=solid]
 "160R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  161 [label="State 161\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 33 forr: FORR declaration DOUBLEDOT . expr NEWLINE BEGFOR stmts ENDFOR\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  161 -> 83 [style=dotted]
  161 -> 5 [style=solid label="BOOL"]
  161 -> 6 [style=solid label="INTEGER"]
  161 -> 59 [style=solid label="VARIABLE"]
  161 -> 77 [style=solid label="VVARIABLE"]
  161 -> 78 [style=solid label="MVARIABLE"]
  161 -> 27 [style=solid label="MOVE"]
  161 -> 30 [style=solid label="ROBEX"]
  161 -> 31 [style=solid label="WALL"]
  161 -> 32 [style=solid label="'-'"]
  161 -> 33 [style=solid label="'!'"]
  161 -> 64 [style=solid label="'('"]
  161 -> 40 [style=dashed label="robotmove"]
  161 -> 43 [style=dashed label="robotwall"]
  161 -> 44 [style=dashed label="robotexit"]
  161 -> 219 [style=dashed label="expr"]
  161 -> 57 [style=dashed label="const"]
  162 [label="State 162\n\l 26 robotmove: MOVE '(' expr . ')'\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  162 -> 121 [style=solid label="CONJUNCTION"]
  162 -> 122 [style=solid label="'<'"]
  162 -> 123 [style=solid label="'>'"]
  162 -> 124 [style=solid label="'+'"]
  162 -> 125 [style=solid label="'-'"]
  162 -> 126 [style=solid label="'/'"]
  162 -> 220 [style=solid label="')'"]
  163 [label="State 163\n\l 22 stmt: '(' stmts ')' .\l"]
  163 -> "163R22" [style=solid]
 "163R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  164 [label="State 164\n\l117 expr: '(' expr ')' .\l"]
  164 -> "164R117" [style=solid]
 "164R117" [label="R117", fillcolor=3, shape=diamond, style=filled]
  165 [label="State 165\n\l 37 return_func: return_func error .\l"]
  165 -> "165R37" [style=solid]
 "165R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  166 [label="State 166\n\l 36 return_func: return_func ',' . type VAR\l121 type: . INT\l122     | . CINT\l123     | . VINT\l124     | . MINT\l125     | . CVINT\l126     | . CMINT\l127     | . BOOLEAN\l128     | . CBOOLEAN\l129     | . VBOOLEAN\l130     | . MBOOLEAN\l131     | . CVBOOLEAN\l132     | . CMBOOLEAN\l"]
  166 -> 11 [style=solid label="CINT"]
  166 -> 12 [style=solid label="VINT"]
  166 -> 13 [style=solid label="MINT"]
  166 -> 14 [style=solid label="INT"]
  166 -> 15 [style=solid label="CVINT"]
  166 -> 16 [style=solid label="CMINT"]
  166 -> 17 [style=solid label="BOOLEAN"]
  166 -> 18 [style=solid label="CBOOLEAN"]
  166 -> 19 [style=solid label="VBOOLEAN"]
  166 -> 20 [style=solid label="MBOOLEAN"]
  166 -> 21 [style=solid label="CVBOOLEAN"]
  166 -> 22 [style=solid label="CMBOOLEAN"]
  166 -> 221 [style=dashed label="type"]
  167 [label="State 167\n\l 42 function: '[' return_func ']' . DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l"]
  167 -> 222 [style=solid label="DECLARE"]
  168 [label="State 168\n\l 35 return_func: type VAR .\l"]
  168 -> "168R35" [style=solid]
 "168R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  169 [label="State 169\n\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l 82       | error vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l"]
  169 -> 112 [style=solid label="ELEMMULT"]
  169 -> 114 [style=solid label="LEFTSHIFT"]
  169 -> 115 [style=solid label="RIGHTSHIFT"]
  169 -> "169R82d" [label="[ELEMMULT, LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "169R82d" [label="R82", fillcolor=5, shape=diamond, style=filled]
  169 -> "169R82" [style=solid]
 "169R82" [label="R82", fillcolor=3, shape=diamond, style=filled]
  170 [label="State 170\n\l 83 vector: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l120     | error expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l"]
  170 -> 121 [style=solid label="CONJUNCTION"]
  170 -> 122 [style=solid label="'<'"]
  170 -> 123 [style=solid label="'>'"]
  170 -> 124 [style=solid label="'+'"]
  170 -> 125 [style=solid label="'-'"]
  170 -> 126 [style=solid label="'/'"]
  170 -> "170R83" [style=solid]
 "170R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  170 -> "170R120d" [label="[error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']", style=solid]
 "170R120d" [label="R120", fillcolor=5, shape=diamond, style=filled]
  171 [label="State 171\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 75 vector: MVARIABLE '(' . expr ',' '[' ']' ')'\l 76       | MVARIABLE '(' . '[' ']' ',' expr ')'\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l119     | MVARIABLE '(' . expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  171 -> 83 [style=dotted]
  171 -> 5 [style=solid label="BOOL"]
  171 -> 6 [style=solid label="INTEGER"]
  171 -> 59 [style=solid label="VARIABLE"]
  171 -> 77 [style=solid label="VVARIABLE"]
  171 -> 78 [style=solid label="MVARIABLE"]
  171 -> 27 [style=solid label="MOVE"]
  171 -> 30 [style=solid label="ROBEX"]
  171 -> 31 [style=solid label="WALL"]
  171 -> 32 [style=solid label="'-'"]
  171 -> 33 [style=solid label="'!'"]
  171 -> 64 [style=solid label="'('"]
  171 -> 223 [style=solid label="'['"]
  171 -> 40 [style=dashed label="robotmove"]
  171 -> 43 [style=dashed label="robotwall"]
  171 -> 44 [style=dashed label="robotexit"]
  171 -> 198 [style=dashed label="expr"]
  171 -> 57 [style=dashed label="const"]
  172 [label="State 172\n\l 72 listexprs: listexprs error .\l"]
  172 -> "172R72" [style=solid]
 "172R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
  173 [label="State 173\n\l 71 listexprs: listexprs ',' . vector\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l"]
  173 -> 137 [style=dotted]
  173 -> 138 [style=solid label="VVARIABLE"]
  173 -> 139 [style=solid label="MVARIABLE"]
  173 -> 93 [style=solid label="'{'"]
  173 -> 224 [style=dashed label="vector"]
  174 [label="State 174\n\l 54 matrix: '{' listexprs '}' .\l"]
  174 -> "174R54" [style=solid]
 "174R54" [label="R54", fillcolor=3, shape=diamond, style=filled]
  175 [label="State 175\n\l 70 listexprs: vector ',' . vector\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l"]
  175 -> 137 [style=dotted]
  175 -> 138 [style=solid label="VVARIABLE"]
  175 -> 139 [style=solid label="MVARIABLE"]
  175 -> 93 [style=solid label="'{'"]
  175 -> 225 [style=dashed label="vector"]
  176 [label="State 176\n\l 86 exprs: exprs error .\l"]
  176 -> "176R86" [style=solid]
 "176R86" [label="R86", fillcolor=3, shape=diamond, style=filled]
  177 [label="State 177\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 85 exprs: exprs ',' . expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  177 -> 83 [style=dotted]
  177 -> 5 [style=solid label="BOOL"]
  177 -> 6 [style=solid label="INTEGER"]
  177 -> 59 [style=solid label="VARIABLE"]
  177 -> 77 [style=solid label="VVARIABLE"]
  177 -> 78 [style=solid label="MVARIABLE"]
  177 -> 27 [style=solid label="MOVE"]
  177 -> 30 [style=solid label="ROBEX"]
  177 -> 31 [style=solid label="WALL"]
  177 -> 32 [style=solid label="'-'"]
  177 -> 33 [style=solid label="'!'"]
  177 -> 64 [style=solid label="'('"]
  177 -> 40 [style=dashed label="robotmove"]
  177 -> 43 [style=dashed label="robotwall"]
  177 -> 44 [style=dashed label="robotexit"]
  177 -> 226 [style=dashed label="expr"]
  177 -> 57 [style=dashed label="const"]
  178 [label="State 178\n\l 73 vector: '{' exprs '}' .\l"]
  178 -> "178R73" [style=solid]
 "178R73" [label="R73", fillcolor=3, shape=diamond, style=filled]
  179 [label="State 179\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 84 exprs: expr ',' . expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  179 -> 83 [style=dotted]
  179 -> 5 [style=solid label="BOOL"]
  179 -> 6 [style=solid label="INTEGER"]
  179 -> 59 [style=solid label="VARIABLE"]
  179 -> 77 [style=solid label="VVARIABLE"]
  179 -> 78 [style=solid label="MVARIABLE"]
  179 -> 27 [style=solid label="MOVE"]
  179 -> 30 [style=solid label="ROBEX"]
  179 -> 31 [style=solid label="WALL"]
  179 -> 32 [style=solid label="'-'"]
  179 -> 33 [style=solid label="'!'"]
  179 -> 64 [style=solid label="'('"]
  179 -> 40 [style=dashed label="robotmove"]
  179 -> 43 [style=dashed label="robotwall"]
  179 -> 44 [style=dashed label="robotexit"]
  179 -> 227 [style=dashed label="expr"]
  179 -> 57 [style=dashed label="const"]
  180 [label="State 180\n\l 59 matrix: matrix . '*' matrix\l 60       | matrix . ELEMMULT matrix\l 60       | matrix ELEMMULT matrix .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 61       | matrix . '\\''\l 62       | matrix . RIGHTSHIFT\l 63       | matrix . LEFTSHIFT\l 65       | matrix . ELEMMULT vector\l 66       | matrix . ELEMMULT expr\l"]
  180 -> 106 [style=solid label="ELEMMULT"]
  180 -> 107 [style=solid label="'\\''"]
  180 -> 108 [style=solid label="LEFTSHIFT"]
  180 -> 109 [style=solid label="RIGHTSHIFT"]
  180 -> 110 [style=solid label="'*'"]
  180 -> "180R60d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']", style=solid]
 "180R60d" [label="R60", fillcolor=5, shape=diamond, style=filled]
  180 -> "180R60" [style=solid]
 "180R60" [label="R60", fillcolor=3, shape=diamond, style=filled]
  181 [label="State 181\n\l 64 matrix: vector . '\\''\l 65       | matrix ELEMMULT vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l"]
  181 -> 112 [style=solid label="ELEMMULT"]
  181 -> 113 [style=solid label="'\\''"]
  181 -> 114 [style=solid label="LEFTSHIFT"]
  181 -> 115 [style=solid label="RIGHTSHIFT"]
  181 -> "181R65d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "181R65d" [label="R65", fillcolor=5, shape=diamond, style=filled]
  181 -> "181R65" [style=solid]
 "181R65" [label="R65", fillcolor=3, shape=diamond, style=filled]
  182 [label="State 182\n\l 66 matrix: matrix ELEMMULT expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  182 -> 121 [style=solid label="CONJUNCTION"]
  182 -> 122 [style=solid label="'<'"]
  182 -> 123 [style=solid label="'>'"]
  182 -> 124 [style=solid label="'+'"]
  182 -> 125 [style=solid label="'-'"]
  182 -> 126 [style=solid label="'/'"]
  182 -> "182R66" [style=solid]
 "182R66" [label="R66", fillcolor=3, shape=diamond, style=filled]
  183 [label="State 183\n\l 59 matrix: matrix . '*' matrix\l 59       | matrix '*' matrix .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 60       | matrix . ELEMMULT matrix\l 61       | matrix . '\\''\l 62       | matrix . RIGHTSHIFT\l 63       | matrix . LEFTSHIFT\l 65       | matrix . ELEMMULT vector\l 66       | matrix . ELEMMULT expr\l"]
  183 -> 106 [style=solid label="ELEMMULT"]
  183 -> 107 [style=solid label="'\\''"]
  183 -> 108 [style=solid label="LEFTSHIFT"]
  183 -> 109 [style=solid label="RIGHTSHIFT"]
  183 -> "183R59d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "183R59d" [label="R59", fillcolor=5, shape=diamond, style=filled]
  183 -> "183R59" [style=solid]
 "183R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
  184 [label="State 184\n\l 78 vector: vector . ELEMMULT vector\l 78       | vector ELEMMULT vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l"]
  184 -> 112 [style=solid label="ELEMMULT"]
  184 -> 114 [style=solid label="LEFTSHIFT"]
  184 -> 115 [style=solid label="RIGHTSHIFT"]
  184 -> "184R78d" [label="[ELEMMULT, LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "184R78d" [label="R78", fillcolor=5, shape=diamond, style=filled]
  184 -> "184R78" [style=solid]
 "184R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
  185 [label="State 185\n\l 81 vector: vector ELEMMULT expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  185 -> 121 [style=solid label="CONJUNCTION"]
  185 -> 122 [style=solid label="'<'"]
  185 -> 123 [style=solid label="'>'"]
  185 -> 124 [style=solid label="'+'"]
  185 -> 125 [style=solid label="'-'"]
  185 -> 126 [style=solid label="'/'"]
  185 -> "185R81" [style=solid]
 "185R81" [label="R81", fillcolor=3, shape=diamond, style=filled]
  186 [label="State 186\n\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l116     | expr CONJUNCTION expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l"]
  186 -> 121 [style=solid label="CONJUNCTION"]
  186 -> 122 [style=solid label="'<'"]
  186 -> 123 [style=solid label="'>'"]
  186 -> 124 [style=solid label="'+'"]
  186 -> 125 [style=solid label="'-'"]
  186 -> 126 [style=solid label="'/'"]
  186 -> "186R116d" [label="[CONJUNCTION, '<', '>', '+', '-', '/']", style=solid]
 "186R116d" [label="R116", fillcolor=5, shape=diamond, style=filled]
  186 -> "186R116" [style=solid]
 "186R116" [label="R116", fillcolor=3, shape=diamond, style=filled]
  187 [label="State 187\n\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l113     | expr '<' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '*', ')', ']', '}']\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  187 -> 121 [style=solid label="CONJUNCTION"]
  187 -> 124 [style=solid label="'+'"]
  187 -> 125 [style=solid label="'-'"]
  187 -> 126 [style=solid label="'/'"]
  187 -> "187R113d" [label="[CONJUNCTION]", style=solid]
 "187R113d" [label="R113", fillcolor=5, shape=diamond, style=filled]
  187 -> "187R113" [style=solid]
 "187R113" [label="R113", fillcolor=3, shape=diamond, style=filled]
  188 [label="State 188\n\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l114     | expr '>' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '*', ')', ']', '}']\l116     | expr . CONJUNCTION expr\l"]
  188 -> 121 [style=solid label="CONJUNCTION"]
  188 -> 124 [style=solid label="'+'"]
  188 -> 125 [style=solid label="'-'"]
  188 -> 126 [style=solid label="'/'"]
  188 -> "188R114d" [label="[CONJUNCTION]", style=solid]
 "188R114d" [label="R114", fillcolor=5, shape=diamond, style=filled]
  188 -> "188R114" [style=solid]
 "188R114" [label="R114", fillcolor=3, shape=diamond, style=filled]
  189 [label="State 189\n\l110 expr: expr . '+' expr\l110     | expr '+' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', ')', ']', '}']\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  189 -> 121 [style=solid label="CONJUNCTION"]
  189 -> 126 [style=solid label="'/'"]
  189 -> "189R110d" [label="[CONJUNCTION]", style=solid]
 "189R110d" [label="R110", fillcolor=5, shape=diamond, style=filled]
  189 -> "189R110" [style=solid]
 "189R110" [label="R110", fillcolor=3, shape=diamond, style=filled]
  190 [label="State 190\n\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l111     | expr '-' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', ')', ']', '}']\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  190 -> 121 [style=solid label="CONJUNCTION"]
  190 -> 126 [style=solid label="'/'"]
  190 -> "190R111d" [label="[CONJUNCTION]", style=solid]
 "190R111d" [label="R111", fillcolor=5, shape=diamond, style=filled]
  190 -> "190R111" [style=solid]
 "190R111" [label="R111", fillcolor=3, shape=diamond, style=filled]
  191 [label="State 191\n\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l112     | expr '/' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  191 -> 121 [style=solid label="CONJUNCTION"]
  191 -> "191R112d" [label="[CONJUNCTION]", style=solid]
 "191R112d" [label="R112", fillcolor=5, shape=diamond, style=filled]
  191 -> "191R112" [style=solid]
 "191R112" [label="R112", fillcolor=3, shape=diamond, style=filled]
  192 [label="State 192\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 95 declaration: type VAR DECLARE . expr\l 96            | type VAR DECLARE . vector\l 97            | type VAR DECLARE . matrix\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  192 -> 58 [style=dotted]
  192 -> 5 [style=solid label="BOOL"]
  192 -> 6 [style=solid label="INTEGER"]
  192 -> 59 [style=solid label="VARIABLE"]
  192 -> 60 [style=solid label="VVARIABLE"]
  192 -> 61 [style=solid label="MVARIABLE"]
  192 -> 27 [style=solid label="MOVE"]
  192 -> 30 [style=solid label="ROBEX"]
  192 -> 31 [style=solid label="WALL"]
  192 -> 32 [style=solid label="'-'"]
  192 -> 33 [style=solid label="'!'"]
  192 -> 64 [style=solid label="'('"]
  192 -> 36 [style=solid label="'{'"]
  192 -> 40 [style=dashed label="robotmove"]
  192 -> 43 [style=dashed label="robotwall"]
  192 -> 44 [style=dashed label="robotexit"]
  192 -> 228 [style=dashed label="matrix"]
  192 -> 229 [style=dashed label="vector"]
  192 -> 230 [style=dashed label="expr"]
  192 -> 57 [style=dashed label="const"]
  193 [label="State 193\n\l 74 vector: VVARIABLE '(' vector . ',' '[' ']' ')'\l 78       | vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l"]
  193 -> 112 [style=solid label="ELEMMULT"]
  193 -> 114 [style=solid label="LEFTSHIFT"]
  193 -> 115 [style=solid label="RIGHTSHIFT"]
  193 -> 231 [style=solid label="','"]
  194 [label="State 194\n\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l118     | VVARIABLE '(' expr . ')'\l"]
  194 -> 121 [style=solid label="CONJUNCTION"]
  194 -> 122 [style=solid label="'<'"]
  194 -> 123 [style=solid label="'>'"]
  194 -> 124 [style=solid label="'+'"]
  194 -> 125 [style=solid label="'-'"]
  194 -> 126 [style=solid label="'/'"]
  194 -> 232 [style=solid label="')'"]
  195 [label="State 195\n\l 56 matrix: MVARIABLE '(' '[' . ']' ',' vector ')'\l 76 vector: MVARIABLE '(' '[' . ']' ',' expr ')'\l"]
  195 -> 233 [style=solid label="']'"]
  196 [label="State 196\n\l 57 matrix: MVARIABLE '(' matrix . ')'\l 59       | matrix . '*' matrix\l 60       | matrix . ELEMMULT matrix\l 61       | matrix . '\\''\l 62       | matrix . RIGHTSHIFT\l 63       | matrix . LEFTSHIFT\l 65       | matrix . ELEMMULT vector\l 66       | matrix . ELEMMULT expr\l"]
  196 -> 106 [style=solid label="ELEMMULT"]
  196 -> 107 [style=solid label="'\\''"]
  196 -> 108 [style=solid label="LEFTSHIFT"]
  196 -> 109 [style=solid label="RIGHTSHIFT"]
  196 -> 110 [style=solid label="'*'"]
  196 -> 234 [style=solid label="')'"]
  197 [label="State 197\n\l 55 matrix: MVARIABLE '(' vector . ',' '[' ']' ')'\l 64       | vector . '\\''\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l"]
  197 -> 112 [style=solid label="ELEMMULT"]
  197 -> 113 [style=solid label="'\\''"]
  197 -> 114 [style=solid label="LEFTSHIFT"]
  197 -> 115 [style=solid label="RIGHTSHIFT"]
  197 -> 235 [style=solid label="','"]
  198 [label="State 198\n\l 75 vector: MVARIABLE '(' expr . ',' '[' ']' ')'\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l119     | MVARIABLE '(' expr . ',' expr ')'\l"]
  198 -> 121 [style=solid label="CONJUNCTION"]
  198 -> 236 [style=solid label="','"]
  198 -> 122 [style=solid label="'<'"]
  198 -> 123 [style=solid label="'>'"]
  198 -> 124 [style=solid label="'+'"]
  198 -> 125 [style=solid label="'-'"]
  198 -> 126 [style=solid label="'/'"]
  199 [label="State 199\n\l 50 callfunc_args: callfunc_args error .\l"]
  199 -> "199R50" [style=solid]
 "199R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
  200 [label="State 200\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 47 callfunc_args: callfunc_args ',' . expr\l 48              | callfunc_args ',' . vector\l 49              | callfunc_args ',' . matrix\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  200 -> 58 [style=dotted]
  200 -> 5 [style=solid label="BOOL"]
  200 -> 6 [style=solid label="INTEGER"]
  200 -> 59 [style=solid label="VARIABLE"]
  200 -> 60 [style=solid label="VVARIABLE"]
  200 -> 61 [style=solid label="MVARIABLE"]
  200 -> 27 [style=solid label="MOVE"]
  200 -> 30 [style=solid label="ROBEX"]
  200 -> 31 [style=solid label="WALL"]
  200 -> 32 [style=solid label="'-'"]
  200 -> 33 [style=solid label="'!'"]
  200 -> 64 [style=solid label="'('"]
  200 -> 36 [style=solid label="'{'"]
  200 -> 40 [style=dashed label="robotmove"]
  200 -> 43 [style=dashed label="robotwall"]
  200 -> 44 [style=dashed label="robotexit"]
  200 -> 237 [style=dashed label="matrix"]
  200 -> 238 [style=dashed label="vector"]
  200 -> 239 [style=dashed label="expr"]
  200 -> 57 [style=dashed label="const"]
  201 [label="State 201\n\l 53 callfunction: error '[' callfunc_args ']' .\l"]
  201 -> "201R53" [style=solid]
 "201R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
  202 [label="State 202\n\l 83 vector: error expr .  [error, NEWLINE, ELEMMULT, LEFTSHIFT, RIGHTSHIFT, ',', '}']\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  202 -> 121 [style=solid label="CONJUNCTION"]
  202 -> 122 [style=solid label="'<'"]
  202 -> 123 [style=solid label="'>'"]
  202 -> 124 [style=solid label="'+'"]
  202 -> 125 [style=solid label="'-'"]
  202 -> 126 [style=solid label="'/'"]
  202 -> "202R83" [style=solid]
 "202R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  203 [label="State 203\n\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 74       | VVARIABLE '(' . vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l"]
  203 -> 137 [style=dotted]
  203 -> 138 [style=solid label="VVARIABLE"]
  203 -> 139 [style=solid label="MVARIABLE"]
  203 -> 93 [style=solid label="'{'"]
  203 -> 193 [style=dashed label="vector"]
  204 [label="State 204\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 75 vector: MVARIABLE '(' . expr ',' '[' ']' ')'\l 76       | MVARIABLE '(' . '[' ']' ',' expr ')'\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  204 -> 83 [style=dotted]
  204 -> 5 [style=solid label="BOOL"]
  204 -> 6 [style=solid label="INTEGER"]
  204 -> 59 [style=solid label="VARIABLE"]
  204 -> 77 [style=solid label="VVARIABLE"]
  204 -> 78 [style=solid label="MVARIABLE"]
  204 -> 27 [style=solid label="MOVE"]
  204 -> 30 [style=solid label="ROBEX"]
  204 -> 31 [style=solid label="WALL"]
  204 -> 32 [style=solid label="'-'"]
  204 -> 33 [style=solid label="'!'"]
  204 -> 64 [style=solid label="'('"]
  204 -> 223 [style=solid label="'['"]
  204 -> 40 [style=dashed label="robotmove"]
  204 -> 43 [style=dashed label="robotwall"]
  204 -> 44 [style=dashed label="robotexit"]
  204 -> 240 [style=dashed label="expr"]
  204 -> 57 [style=dashed label="const"]
  205 [label="State 205\n\l 74 vector: VVARIABLE '(' vector ',' . '[' ']' ')'\l 88 vmdeclaration: VVARIABLE '(' vector ',' . '[' ']' ')' ASSIGN vector\l"]
  205 -> 241 [style=solid label="'['"]
  206 [label="State 206\n\l 87 vmdeclaration: VVARIABLE '(' expr ')' . ASSIGN expr\l118 expr: VVARIABLE '(' expr ')' .  [NEWLINE, CONJUNCTION, '<', '>', '+', '-', '/', ')']\l"]
  206 -> 242 [style=solid label="ASSIGN"]
  206 -> "206R118" [style=solid]
 "206R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
  207 [label="State 207\n\l 69 matrix: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 83 vector: error expr .  [ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  207 -> 121 [style=solid label="CONJUNCTION"]
  207 -> 122 [style=solid label="'<'"]
  207 -> 123 [style=solid label="'>'"]
  207 -> 124 [style=solid label="'+'"]
  207 -> 125 [style=solid label="'-'"]
  207 -> 126 [style=solid label="'/'"]
  207 -> "207R69" [style=solid]
 "207R69" [label="R69", fillcolor=3, shape=diamond, style=filled]
  207 -> "207R83d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "207R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  208 [label="State 208\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 55       | MVARIABLE '(' . vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 56       | MVARIABLE '(' . '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 57       | MVARIABLE '(' . matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 75       | MVARIABLE '(' . expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 76       | MVARIABLE '(' . '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  208 -> 58 [style=dotted]
  208 -> 5 [style=solid label="BOOL"]
  208 -> 6 [style=solid label="INTEGER"]
  208 -> 59 [style=solid label="VARIABLE"]
  208 -> 60 [style=solid label="VVARIABLE"]
  208 -> 61 [style=solid label="MVARIABLE"]
  208 -> 27 [style=solid label="MOVE"]
  208 -> 30 [style=solid label="ROBEX"]
  208 -> 31 [style=solid label="WALL"]
  208 -> 32 [style=solid label="'-'"]
  208 -> 33 [style=solid label="'!'"]
  208 -> 64 [style=solid label="'('"]
  208 -> 195 [style=solid label="'['"]
  208 -> 36 [style=solid label="'{'"]
  208 -> 40 [style=dashed label="robotmove"]
  208 -> 43 [style=dashed label="robotwall"]
  208 -> 44 [style=dashed label="robotexit"]
  208 -> 196 [style=dashed label="matrix"]
  208 -> 197 [style=dashed label="vector"]
  208 -> 240 [style=dashed label="expr"]
  208 -> 57 [style=dashed label="const"]
  209 [label="State 209\n\l 56 matrix: MVARIABLE '(' '[' ']' . ',' vector ')'\l 76 vector: MVARIABLE '(' '[' ']' . ',' expr ')'\l 91 vmdeclaration: MVARIABLE '(' '[' ']' . ',' expr ')' ASSIGN vector\l 93              | MVARIABLE '(' '[' ']' . ',' vector ')' ASSIGN matrix\l"]
  209 -> 243 [style=solid label="','"]
  210 [label="State 210\n\l 57 matrix: MVARIABLE '(' matrix ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l 94 vmdeclaration: MVARIABLE '(' matrix ')' . ASSIGN matrix\l"]
  210 -> 244 [style=solid label="ASSIGN"]
  210 -> "210R57" [style=solid]
 "210R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
  211 [label="State 211\n\l 55 matrix: MVARIABLE '(' vector ',' . '[' ']' ')'\l 92 vmdeclaration: MVARIABLE '(' vector ',' . '[' ']' ')' ASSIGN matrix\l"]
  211 -> 245 [style=solid label="'['"]
  212 [label="State 212\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 75 vector: MVARIABLE '(' expr ',' . '[' ']' ')'\l 89 vmdeclaration: MVARIABLE '(' expr ',' . expr ')' ASSIGN expr\l 90              | MVARIABLE '(' expr ',' . '[' ']' ')' ASSIGN vector\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l119     | MVARIABLE '(' expr ',' . expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  212 -> 83 [style=dotted]
  212 -> 5 [style=solid label="BOOL"]
  212 -> 6 [style=solid label="INTEGER"]
  212 -> 59 [style=solid label="VARIABLE"]
  212 -> 77 [style=solid label="VVARIABLE"]
  212 -> 78 [style=solid label="MVARIABLE"]
  212 -> 27 [style=solid label="MOVE"]
  212 -> 30 [style=solid label="ROBEX"]
  212 -> 31 [style=solid label="WALL"]
  212 -> 32 [style=solid label="'-'"]
  212 -> 33 [style=solid label="'!'"]
  212 -> 64 [style=solid label="'('"]
  212 -> 246 [style=solid label="'['"]
  212 -> 40 [style=dashed label="robotmove"]
  212 -> 43 [style=dashed label="robotwall"]
  212 -> 44 [style=dashed label="robotexit"]
  212 -> 247 [style=dashed label="expr"]
  212 -> 57 [style=dashed label="const"]
  213 [label="State 213\n\l 52 callfunction: FVARIABLE '[' callfunc_args ']' .\l"]
  213 -> "213R52" [style=solid]
 "213R52" [label="R52", fillcolor=3, shape=diamond, style=filled]
  214 [label="State 214\n\l102 print: PRINT '(' VVARIABLE ')' .\l"]
  214 -> "214R102" [style=solid]
 "214R102" [label="R102", fillcolor=3, shape=diamond, style=filled]
  215 [label="State 215\n\l103 print: PRINT '(' MVARIABLE ')' .\l"]
  215 -> "215R103" [style=solid]
 "215R103" [label="R103", fillcolor=3, shape=diamond, style=filled]
  216 [label="State 216\n\l101 print: PRINT '(' expr ')' .\l"]
  216 -> "216R101" [style=solid]
 "216R101" [label="R101", fillcolor=3, shape=diamond, style=filled]
  217 [label="State 217\n\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l119     | MVARIABLE '(' expr . ',' expr ')'\l"]
  217 -> 121 [style=solid label="CONJUNCTION"]
  217 -> 248 [style=solid label="','"]
  217 -> 122 [style=solid label="'<'"]
  217 -> 123 [style=solid label="'>'"]
  217 -> 124 [style=solid label="'+'"]
  217 -> 125 [style=solid label="'-'"]
  217 -> 126 [style=solid label="'/'"]
  218 [label="State 218\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE BEGIF stmts ENDIF\l 31    | IF expr NEWLINE BEGIF . stmts ENDIF\l 32    | . IF error ENDIF\l 33 forr: . FORR declaration DOUBLEDOT expr NEWLINE BEGFOR stmts ENDFOR\l 34     | . FORR error ENDFOR\l 42 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 43         | . error E\l 52 callfunction: . FVARIABLE '[' callfunc_args ']'\l 53             | . error '[' callfunc_args ']'\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 87 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 88              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 89              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 90              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 91              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 92              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 93              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 94              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 95 declaration: . type VAR DECLARE expr\l 96            | . type VAR DECLARE vector\l 97            | . type VAR DECLARE matrix\l 98 assignment: . VARIABLE ASSIGN expr\l 99           | . VVARIABLE ASSIGN vector\l100           | . MVARIABLE ASSIGN matrix\l101 print: . PRINT '(' expr ')'\l102      | . PRINT '(' VVARIABLE ')'\l103      | . PRINT '(' MVARIABLE ')'\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l121 type: . INT\l122     | . CINT\l123     | . VINT\l124     | . MINT\l125     | . CVINT\l126     | . CMINT\l127     | . BOOLEAN\l128     | . CBOOLEAN\l129     | . VBOOLEAN\l130     | . MBOOLEAN\l131     | . CVBOOLEAN\l132     | . CMBOOLEAN\l133 const: . INTEGER\l134      | . BOOL\l"]
  218 -> 86 [style=dotted]
  218 -> 5 [style=solid label="BOOL"]
  218 -> 6 [style=solid label="INTEGER"]
  218 -> 7 [style=solid label="VARIABLE"]
  218 -> 8 [style=solid label="VVARIABLE"]
  218 -> 9 [style=solid label="MVARIABLE"]
  218 -> 10 [style=solid label="FVARIABLE"]
  218 -> 11 [style=solid label="CINT"]
  218 -> 12 [style=solid label="VINT"]
  218 -> 13 [style=solid label="MINT"]
  218 -> 14 [style=solid label="INT"]
  218 -> 15 [style=solid label="CVINT"]
  218 -> 16 [style=solid label="CMINT"]
  218 -> 17 [style=solid label="BOOLEAN"]
  218 -> 18 [style=solid label="CBOOLEAN"]
  218 -> 19 [style=solid label="VBOOLEAN"]
  218 -> 20 [style=solid label="MBOOLEAN"]
  218 -> 21 [style=solid label="CVBOOLEAN"]
  218 -> 22 [style=solid label="CMBOOLEAN"]
  218 -> 23 [style=solid label="NEWLINE"]
  218 -> 24 [style=solid label="PRINT"]
  218 -> 25 [style=solid label="IF"]
  218 -> 26 [style=solid label="FORR"]
  218 -> 27 [style=solid label="MOVE"]
  218 -> 28 [style=solid label="RIGHT"]
  218 -> 29 [style=solid label="LEFT"]
  218 -> 30 [style=solid label="ROBEX"]
  218 -> 31 [style=solid label="WALL"]
  218 -> 32 [style=solid label="'-'"]
  218 -> 33 [style=solid label="'!'"]
  218 -> 34 [style=solid label="'('"]
  218 -> 35 [style=solid label="'['"]
  218 -> 36 [style=solid label="'{'"]
  218 -> 249 [style=dashed label="stmts"]
  218 -> 38 [style=dashed label="stmt"]
  218 -> 39 [style=dashed label="robotactions"]
  218 -> 40 [style=dashed label="robotmove"]
  218 -> 41 [style=dashed label="robotright"]
  218 -> 42 [style=dashed label="robotleft"]
  218 -> 43 [style=dashed label="robotwall"]
  218 -> 44 [style=dashed label="robotexit"]
  218 -> 45 [style=dashed label="iff"]
  218 -> 46 [style=dashed label="forr"]
  218 -> 47 [style=dashed label="function"]
  218 -> 48 [style=dashed label="callfunction"]
  218 -> 49 [style=dashed label="matrix"]
  218 -> 50 [style=dashed label="vector"]
  218 -> 51 [style=dashed label="vmdeclaration"]
  218 -> 52 [style=dashed label="declaration"]
  218 -> 53 [style=dashed label="assignment"]
  218 -> 54 [style=dashed label="print"]
  218 -> 55 [style=dashed label="expr"]
  218 -> 56 [style=dashed label="type"]
  218 -> 57 [style=dashed label="const"]
  219 [label="State 219\n\l 33 forr: FORR declaration DOUBLEDOT expr . NEWLINE BEGFOR stmts ENDFOR\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  219 -> 250 [style=solid label="NEWLINE"]
  219 -> 121 [style=solid label="CONJUNCTION"]
  219 -> 122 [style=solid label="'<'"]
  219 -> 123 [style=solid label="'>'"]
  219 -> 124 [style=solid label="'+'"]
  219 -> 125 [style=solid label="'-'"]
  219 -> 126 [style=solid label="'/'"]
  220 [label="State 220\n\l 26 robotmove: MOVE '(' expr ')' .\l"]
  220 -> "220R26" [style=solid]
 "220R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  221 [label="State 221\n\l 36 return_func: return_func ',' type . VAR\l"]
  221 -> 251 [style=solid label="VAR"]
  222 [label="State 222\n\l 42 function: '[' return_func ']' DECLARE . FUNC VAR '(' args_func ')' B NEWLINE stmts E\l"]
  222 -> 252 [style=solid label="FUNC"]
  223 [label="State 223\n\l 76 vector: MVARIABLE '(' '[' . ']' ',' expr ')'\l"]
  223 -> 253 [style=solid label="']'"]
  224 [label="State 224\n\l 71 listexprs: listexprs ',' vector .  [error, ',', '}']\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l"]
  224 -> 112 [style=solid label="ELEMMULT"]
  224 -> 114 [style=solid label="LEFTSHIFT"]
  224 -> 115 [style=solid label="RIGHTSHIFT"]
  224 -> "224R71" [style=solid]
 "224R71" [label="R71", fillcolor=3, shape=diamond, style=filled]
  225 [label="State 225\n\l 70 listexprs: vector ',' vector .  [error, ',', '}']\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l"]
  225 -> 112 [style=solid label="ELEMMULT"]
  225 -> 114 [style=solid label="LEFTSHIFT"]
  225 -> 115 [style=solid label="RIGHTSHIFT"]
  225 -> "225R70" [style=solid]
 "225R70" [label="R70", fillcolor=3, shape=diamond, style=filled]
  226 [label="State 226\n\l 85 exprs: exprs ',' expr .  [error, ',', '}']\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  226 -> 121 [style=solid label="CONJUNCTION"]
  226 -> 122 [style=solid label="'<'"]
  226 -> 123 [style=solid label="'>'"]
  226 -> 124 [style=solid label="'+'"]
  226 -> 125 [style=solid label="'-'"]
  226 -> 126 [style=solid label="'/'"]
  226 -> "226R85" [style=solid]
 "226R85" [label="R85", fillcolor=3, shape=diamond, style=filled]
  227 [label="State 227\n\l 84 exprs: expr ',' expr .  [error, ',', '}']\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  227 -> 121 [style=solid label="CONJUNCTION"]
  227 -> 122 [style=solid label="'<'"]
  227 -> 123 [style=solid label="'>'"]
  227 -> 124 [style=solid label="'+'"]
  227 -> 125 [style=solid label="'-'"]
  227 -> 126 [style=solid label="'/'"]
  227 -> "227R84" [style=solid]
 "227R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
  228 [label="State 228\n\l 59 matrix: matrix . '*' matrix\l 60       | matrix . ELEMMULT matrix\l 61       | matrix . '\\''\l 62       | matrix . RIGHTSHIFT\l 63       | matrix . LEFTSHIFT\l 65       | matrix . ELEMMULT vector\l 66       | matrix . ELEMMULT expr\l 97 declaration: type VAR DECLARE matrix .  [NEWLINE, DOUBLEDOT]\l"]
  228 -> 106 [style=solid label="ELEMMULT"]
  228 -> 107 [style=solid label="'\\''"]
  228 -> 108 [style=solid label="LEFTSHIFT"]
  228 -> 109 [style=solid label="RIGHTSHIFT"]
  228 -> 110 [style=solid label="'*'"]
  228 -> "228R97" [style=solid]
 "228R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  229 [label="State 229\n\l 64 matrix: vector . '\\''\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l 96 declaration: type VAR DECLARE vector .  [NEWLINE, DOUBLEDOT]\l"]
  229 -> 112 [style=solid label="ELEMMULT"]
  229 -> 113 [style=solid label="'\\''"]
  229 -> 114 [style=solid label="LEFTSHIFT"]
  229 -> 115 [style=solid label="RIGHTSHIFT"]
  229 -> "229R96" [style=solid]
 "229R96" [label="R96", fillcolor=3, shape=diamond, style=filled]
  230 [label="State 230\n\l 95 declaration: type VAR DECLARE expr .  [NEWLINE, DOUBLEDOT]\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  230 -> 121 [style=solid label="CONJUNCTION"]
  230 -> 122 [style=solid label="'<'"]
  230 -> 123 [style=solid label="'>'"]
  230 -> 124 [style=solid label="'+'"]
  230 -> 125 [style=solid label="'-'"]
  230 -> 126 [style=solid label="'/'"]
  230 -> "230R95" [style=solid]
 "230R95" [label="R95", fillcolor=3, shape=diamond, style=filled]
  231 [label="State 231\n\l 74 vector: VVARIABLE '(' vector ',' . '[' ']' ')'\l"]
  231 -> 254 [style=solid label="'['"]
  232 [label="State 232\n\l118 expr: VVARIABLE '(' expr ')' .\l"]
  232 -> "232R118" [style=solid]
 "232R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
  233 [label="State 233\n\l 56 matrix: MVARIABLE '(' '[' ']' . ',' vector ')'\l 76 vector: MVARIABLE '(' '[' ']' . ',' expr ')'\l"]
  233 -> 255 [style=solid label="','"]
  234 [label="State 234\n\l 57 matrix: MVARIABLE '(' matrix ')' .\l"]
  234 -> "234R57" [style=solid]
 "234R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
  235 [label="State 235\n\l 55 matrix: MVARIABLE '(' vector ',' . '[' ']' ')'\l"]
  235 -> 256 [style=solid label="'['"]
  236 [label="State 236\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 75 vector: MVARIABLE '(' expr ',' . '[' ']' ')'\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l119     | MVARIABLE '(' expr ',' . expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  236 -> 83 [style=dotted]
  236 -> 5 [style=solid label="BOOL"]
  236 -> 6 [style=solid label="INTEGER"]
  236 -> 59 [style=solid label="VARIABLE"]
  236 -> 77 [style=solid label="VVARIABLE"]
  236 -> 78 [style=solid label="MVARIABLE"]
  236 -> 27 [style=solid label="MOVE"]
  236 -> 30 [style=solid label="ROBEX"]
  236 -> 31 [style=solid label="WALL"]
  236 -> 32 [style=solid label="'-'"]
  236 -> 33 [style=solid label="'!'"]
  236 -> 64 [style=solid label="'('"]
  236 -> 257 [style=solid label="'['"]
  236 -> 40 [style=dashed label="robotmove"]
  236 -> 43 [style=dashed label="robotwall"]
  236 -> 44 [style=dashed label="robotexit"]
  236 -> 258 [style=dashed label="expr"]
  236 -> 57 [style=dashed label="const"]
  237 [label="State 237\n\l 49 callfunc_args: callfunc_args ',' matrix .  [error, ',', ']']\l 59 matrix: matrix . '*' matrix\l 60       | matrix . ELEMMULT matrix\l 61       | matrix . '\\''\l 62       | matrix . RIGHTSHIFT\l 63       | matrix . LEFTSHIFT\l 65       | matrix . ELEMMULT vector\l 66       | matrix . ELEMMULT expr\l"]
  237 -> 106 [style=solid label="ELEMMULT"]
  237 -> 107 [style=solid label="'\\''"]
  237 -> 108 [style=solid label="LEFTSHIFT"]
  237 -> 109 [style=solid label="RIGHTSHIFT"]
  237 -> 110 [style=solid label="'*'"]
  237 -> "237R49" [style=solid]
 "237R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
  238 [label="State 238\n\l 48 callfunc_args: callfunc_args ',' vector .  [error, ',', ']']\l 64 matrix: vector . '\\''\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l"]
  238 -> 112 [style=solid label="ELEMMULT"]
  238 -> 113 [style=solid label="'\\''"]
  238 -> 114 [style=solid label="LEFTSHIFT"]
  238 -> 115 [style=solid label="RIGHTSHIFT"]
  238 -> "238R48" [style=solid]
 "238R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  239 [label="State 239\n\l 47 callfunc_args: callfunc_args ',' expr .  [error, ',', ']']\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  239 -> 121 [style=solid label="CONJUNCTION"]
  239 -> 122 [style=solid label="'<'"]
  239 -> 123 [style=solid label="'>'"]
  239 -> 124 [style=solid label="'+'"]
  239 -> 125 [style=solid label="'-'"]
  239 -> 126 [style=solid label="'/'"]
  239 -> "239R47" [style=solid]
 "239R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  240 [label="State 240\n\l 75 vector: MVARIABLE '(' expr . ',' '[' ']' ')'\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  240 -> 121 [style=solid label="CONJUNCTION"]
  240 -> 259 [style=solid label="','"]
  240 -> 122 [style=solid label="'<'"]
  240 -> 123 [style=solid label="'>'"]
  240 -> 124 [style=solid label="'+'"]
  240 -> 125 [style=solid label="'-'"]
  240 -> 126 [style=solid label="'/'"]
  241 [label="State 241\n\l 74 vector: VVARIABLE '(' vector ',' '[' . ']' ')'\l 88 vmdeclaration: VVARIABLE '(' vector ',' '[' . ']' ')' ASSIGN vector\l"]
  241 -> 260 [style=solid label="']'"]
  242 [label="State 242\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 87 vmdeclaration: VVARIABLE '(' expr ')' ASSIGN . expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  242 -> 83 [style=dotted]
  242 -> 5 [style=solid label="BOOL"]
  242 -> 6 [style=solid label="INTEGER"]
  242 -> 59 [style=solid label="VARIABLE"]
  242 -> 77 [style=solid label="VVARIABLE"]
  242 -> 78 [style=solid label="MVARIABLE"]
  242 -> 27 [style=solid label="MOVE"]
  242 -> 30 [style=solid label="ROBEX"]
  242 -> 31 [style=solid label="WALL"]
  242 -> 32 [style=solid label="'-'"]
  242 -> 33 [style=solid label="'!'"]
  242 -> 64 [style=solid label="'('"]
  242 -> 40 [style=dashed label="robotmove"]
  242 -> 43 [style=dashed label="robotwall"]
  242 -> 44 [style=dashed label="robotexit"]
  242 -> 261 [style=dashed label="expr"]
  242 -> 57 [style=dashed label="const"]
  243 [label="State 243\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 56 matrix: MVARIABLE '(' '[' ']' ',' . vector ')'\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 76       | MVARIABLE '(' '[' ']' ',' . expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 91 vmdeclaration: MVARIABLE '(' '[' ']' ',' . expr ')' ASSIGN vector\l 93              | MVARIABLE '(' '[' ']' ',' . vector ')' ASSIGN matrix\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  243 -> 91 [style=dotted]
  243 -> 5 [style=solid label="BOOL"]
  243 -> 6 [style=solid label="INTEGER"]
  243 -> 59 [style=solid label="VARIABLE"]
  243 -> 60 [style=solid label="VVARIABLE"]
  243 -> 92 [style=solid label="MVARIABLE"]
  243 -> 27 [style=solid label="MOVE"]
  243 -> 30 [style=solid label="ROBEX"]
  243 -> 31 [style=solid label="WALL"]
  243 -> 32 [style=solid label="'-'"]
  243 -> 33 [style=solid label="'!'"]
  243 -> 64 [style=solid label="'('"]
  243 -> 93 [style=solid label="'{'"]
  243 -> 40 [style=dashed label="robotmove"]
  243 -> 43 [style=dashed label="robotwall"]
  243 -> 44 [style=dashed label="robotexit"]
  243 -> 262 [style=dashed label="vector"]
  243 -> 263 [style=dashed label="expr"]
  243 -> 57 [style=dashed label="const"]
  244 [label="State 244\n\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 94 vmdeclaration: MVARIABLE '(' matrix ')' ASSIGN . matrix\l"]
  244 -> 143 [style=dotted]
  244 -> 138 [style=solid label="VVARIABLE"]
  244 -> 144 [style=solid label="MVARIABLE"]
  244 -> 36 [style=solid label="'{'"]
  244 -> 264 [style=dashed label="matrix"]
  244 -> 146 [style=dashed label="vector"]
  245 [label="State 245\n\l 55 matrix: MVARIABLE '(' vector ',' '[' . ']' ')'\l 92 vmdeclaration: MVARIABLE '(' vector ',' '[' . ']' ')' ASSIGN matrix\l"]
  245 -> 265 [style=solid label="']'"]
  246 [label="State 246\n\l 75 vector: MVARIABLE '(' expr ',' '[' . ']' ')'\l 90 vmdeclaration: MVARIABLE '(' expr ',' '[' . ']' ')' ASSIGN vector\l"]
  246 -> 266 [style=solid label="']'"]
  247 [label="State 247\n\l 89 vmdeclaration: MVARIABLE '(' expr ',' expr . ')' ASSIGN expr\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l119     | MVARIABLE '(' expr ',' expr . ')'\l"]
  247 -> 121 [style=solid label="CONJUNCTION"]
  247 -> 122 [style=solid label="'<'"]
  247 -> 123 [style=solid label="'>'"]
  247 -> 124 [style=solid label="'+'"]
  247 -> 125 [style=solid label="'-'"]
  247 -> 126 [style=solid label="'/'"]
  247 -> 267 [style=solid label="')'"]
  248 [label="State 248\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l119     | MVARIABLE '(' expr ',' . expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  248 -> 83 [style=dotted]
  248 -> 5 [style=solid label="BOOL"]
  248 -> 6 [style=solid label="INTEGER"]
  248 -> 59 [style=solid label="VARIABLE"]
  248 -> 77 [style=solid label="VVARIABLE"]
  248 -> 78 [style=solid label="MVARIABLE"]
  248 -> 27 [style=solid label="MOVE"]
  248 -> 30 [style=solid label="ROBEX"]
  248 -> 31 [style=solid label="WALL"]
  248 -> 32 [style=solid label="'-'"]
  248 -> 33 [style=solid label="'!'"]
  248 -> 64 [style=solid label="'('"]
  248 -> 40 [style=dashed label="robotmove"]
  248 -> 43 [style=dashed label="robotwall"]
  248 -> 44 [style=dashed label="robotexit"]
  248 -> 258 [style=dashed label="expr"]
  248 -> 57 [style=dashed label="const"]
  249 [label="State 249\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE BEGIF stmts ENDIF\l 31    | IF expr NEWLINE BEGIF stmts . ENDIF\l 32    | . IF error ENDIF\l 33 forr: . FORR declaration DOUBLEDOT expr NEWLINE BEGFOR stmts ENDFOR\l 34     | . FORR error ENDFOR\l 42 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 43         | . error E\l 52 callfunction: . FVARIABLE '[' callfunc_args ']'\l 53             | . error '[' callfunc_args ']'\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 87 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 88              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 89              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 90              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 91              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 92              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 93              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 94              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 95 declaration: . type VAR DECLARE expr\l 96            | . type VAR DECLARE vector\l 97            | . type VAR DECLARE matrix\l 98 assignment: . VARIABLE ASSIGN expr\l 99           | . VVARIABLE ASSIGN vector\l100           | . MVARIABLE ASSIGN matrix\l101 print: . PRINT '(' expr ')'\l102      | . PRINT '(' VVARIABLE ')'\l103      | . PRINT '(' MVARIABLE ')'\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l121 type: . INT\l122     | . CINT\l123     | . VINT\l124     | . MINT\l125     | . CVINT\l126     | . CMINT\l127     | . BOOLEAN\l128     | . CBOOLEAN\l129     | . VBOOLEAN\l130     | . MBOOLEAN\l131     | . CVBOOLEAN\l132     | . CMBOOLEAN\l133 const: . INTEGER\l134      | . BOOL\l"]
  249 -> 98 [style=dotted]
  249 -> 5 [style=solid label="BOOL"]
  249 -> 6 [style=solid label="INTEGER"]
  249 -> 7 [style=solid label="VARIABLE"]
  249 -> 8 [style=solid label="VVARIABLE"]
  249 -> 9 [style=solid label="MVARIABLE"]
  249 -> 10 [style=solid label="FVARIABLE"]
  249 -> 11 [style=solid label="CINT"]
  249 -> 12 [style=solid label="VINT"]
  249 -> 13 [style=solid label="MINT"]
  249 -> 14 [style=solid label="INT"]
  249 -> 15 [style=solid label="CVINT"]
  249 -> 16 [style=solid label="CMINT"]
  249 -> 17 [style=solid label="BOOLEAN"]
  249 -> 18 [style=solid label="CBOOLEAN"]
  249 -> 19 [style=solid label="VBOOLEAN"]
  249 -> 20 [style=solid label="MBOOLEAN"]
  249 -> 21 [style=solid label="CVBOOLEAN"]
  249 -> 22 [style=solid label="CMBOOLEAN"]
  249 -> 23 [style=solid label="NEWLINE"]
  249 -> 24 [style=solid label="PRINT"]
  249 -> 25 [style=solid label="IF"]
  249 -> 26 [style=solid label="FORR"]
  249 -> 268 [style=solid label="ENDIF"]
  249 -> 27 [style=solid label="MOVE"]
  249 -> 28 [style=solid label="RIGHT"]
  249 -> 29 [style=solid label="LEFT"]
  249 -> 30 [style=solid label="ROBEX"]
  249 -> 31 [style=solid label="WALL"]
  249 -> 32 [style=solid label="'-'"]
  249 -> 33 [style=solid label="'!'"]
  249 -> 34 [style=solid label="'('"]
  249 -> 35 [style=solid label="'['"]
  249 -> 36 [style=solid label="'{'"]
  249 -> 99 [style=dashed label="stmt"]
  249 -> 39 [style=dashed label="robotactions"]
  249 -> 40 [style=dashed label="robotmove"]
  249 -> 41 [style=dashed label="robotright"]
  249 -> 42 [style=dashed label="robotleft"]
  249 -> 43 [style=dashed label="robotwall"]
  249 -> 44 [style=dashed label="robotexit"]
  249 -> 45 [style=dashed label="iff"]
  249 -> 46 [style=dashed label="forr"]
  249 -> 47 [style=dashed label="function"]
  249 -> 48 [style=dashed label="callfunction"]
  249 -> 49 [style=dashed label="matrix"]
  249 -> 50 [style=dashed label="vector"]
  249 -> 51 [style=dashed label="vmdeclaration"]
  249 -> 52 [style=dashed label="declaration"]
  249 -> 53 [style=dashed label="assignment"]
  249 -> 54 [style=dashed label="print"]
  249 -> 55 [style=dashed label="expr"]
  249 -> 56 [style=dashed label="type"]
  249 -> 57 [style=dashed label="const"]
  250 [label="State 250\n\l 33 forr: FORR declaration DOUBLEDOT expr NEWLINE . BEGFOR stmts ENDFOR\l"]
  250 -> 269 [style=solid label="BEGFOR"]
  251 [label="State 251\n\l 36 return_func: return_func ',' type VAR .\l"]
  251 -> "251R36" [style=solid]
 "251R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  252 [label="State 252\n\l 42 function: '[' return_func ']' DECLARE FUNC . VAR '(' args_func ')' B NEWLINE stmts E\l"]
  252 -> 270 [style=solid label="VAR"]
  253 [label="State 253\n\l 76 vector: MVARIABLE '(' '[' ']' . ',' expr ')'\l"]
  253 -> 271 [style=solid label="','"]
  254 [label="State 254\n\l 74 vector: VVARIABLE '(' vector ',' '[' . ']' ')'\l"]
  254 -> 272 [style=solid label="']'"]
  255 [label="State 255\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 56 matrix: MVARIABLE '(' '[' ']' ',' . vector ')'\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 76       | MVARIABLE '(' '[' ']' ',' . expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  255 -> 91 [style=dotted]
  255 -> 5 [style=solid label="BOOL"]
  255 -> 6 [style=solid label="INTEGER"]
  255 -> 59 [style=solid label="VARIABLE"]
  255 -> 60 [style=solid label="VVARIABLE"]
  255 -> 92 [style=solid label="MVARIABLE"]
  255 -> 27 [style=solid label="MOVE"]
  255 -> 30 [style=solid label="ROBEX"]
  255 -> 31 [style=solid label="WALL"]
  255 -> 32 [style=solid label="'-'"]
  255 -> 33 [style=solid label="'!'"]
  255 -> 64 [style=solid label="'('"]
  255 -> 93 [style=solid label="'{'"]
  255 -> 40 [style=dashed label="robotmove"]
  255 -> 43 [style=dashed label="robotwall"]
  255 -> 44 [style=dashed label="robotexit"]
  255 -> 273 [style=dashed label="vector"]
  255 -> 274 [style=dashed label="expr"]
  255 -> 57 [style=dashed label="const"]
  256 [label="State 256\n\l 55 matrix: MVARIABLE '(' vector ',' '[' . ']' ')'\l"]
  256 -> 275 [style=solid label="']'"]
  257 [label="State 257\n\l 75 vector: MVARIABLE '(' expr ',' '[' . ']' ')'\l"]
  257 -> 276 [style=solid label="']'"]
  258 [label="State 258\n\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l119     | MVARIABLE '(' expr ',' expr . ')'\l"]
  258 -> 121 [style=solid label="CONJUNCTION"]
  258 -> 122 [style=solid label="'<'"]
  258 -> 123 [style=solid label="'>'"]
  258 -> 124 [style=solid label="'+'"]
  258 -> 125 [style=solid label="'-'"]
  258 -> 126 [style=solid label="'/'"]
  258 -> 277 [style=solid label="')'"]
  259 [label="State 259\n\l 75 vector: MVARIABLE '(' expr ',' . '[' ']' ')'\l"]
  259 -> 257 [style=solid label="'['"]
  260 [label="State 260\n\l 74 vector: VVARIABLE '(' vector ',' '[' ']' . ')'\l 88 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' . ')' ASSIGN vector\l"]
  260 -> 278 [style=solid label="')'"]
  261 [label="State 261\n\l 87 vmdeclaration: VVARIABLE '(' expr ')' ASSIGN expr .  [NEWLINE]\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  261 -> 121 [style=solid label="CONJUNCTION"]
  261 -> 122 [style=solid label="'<'"]
  261 -> 123 [style=solid label="'>'"]
  261 -> 124 [style=solid label="'+'"]
  261 -> 125 [style=solid label="'-'"]
  261 -> 126 [style=solid label="'/'"]
  261 -> "261R87" [style=solid]
 "261R87" [label="R87", fillcolor=3, shape=diamond, style=filled]
  262 [label="State 262\n\l 56 matrix: MVARIABLE '(' '[' ']' ',' vector . ')'\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l 93 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector . ')' ASSIGN matrix\l"]
  262 -> 112 [style=solid label="ELEMMULT"]
  262 -> 114 [style=solid label="LEFTSHIFT"]
  262 -> 115 [style=solid label="RIGHTSHIFT"]
  262 -> 279 [style=solid label="')'"]
  263 [label="State 263\n\l 76 vector: MVARIABLE '(' '[' ']' ',' expr . ')'\l 91 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr . ')' ASSIGN vector\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  263 -> 121 [style=solid label="CONJUNCTION"]
  263 -> 122 [style=solid label="'<'"]
  263 -> 123 [style=solid label="'>'"]
  263 -> 124 [style=solid label="'+'"]
  263 -> 125 [style=solid label="'-'"]
  263 -> 126 [style=solid label="'/'"]
  263 -> 280 [style=solid label="')'"]
  264 [label="State 264\n\l 59 matrix: matrix . '*' matrix\l 60       | matrix . ELEMMULT matrix\l 61       | matrix . '\\''\l 62       | matrix . RIGHTSHIFT\l 63       | matrix . LEFTSHIFT\l 65       | matrix . ELEMMULT vector\l 66       | matrix . ELEMMULT expr\l 94 vmdeclaration: MVARIABLE '(' matrix ')' ASSIGN matrix .  [NEWLINE]\l"]
  264 -> 106 [style=solid label="ELEMMULT"]
  264 -> 107 [style=solid label="'\\''"]
  264 -> 108 [style=solid label="LEFTSHIFT"]
  264 -> 109 [style=solid label="RIGHTSHIFT"]
  264 -> 110 [style=solid label="'*'"]
  264 -> "264R94" [style=solid]
 "264R94" [label="R94", fillcolor=3, shape=diamond, style=filled]
  265 [label="State 265\n\l 55 matrix: MVARIABLE '(' vector ',' '[' ']' . ')'\l 92 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' . ')' ASSIGN matrix\l"]
  265 -> 281 [style=solid label="')'"]
  266 [label="State 266\n\l 75 vector: MVARIABLE '(' expr ',' '[' ']' . ')'\l 90 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' . ')' ASSIGN vector\l"]
  266 -> 282 [style=solid label="')'"]
  267 [label="State 267\n\l 89 vmdeclaration: MVARIABLE '(' expr ',' expr ')' . ASSIGN expr\l119 expr: MVARIABLE '(' expr ',' expr ')' .  [NEWLINE, CONJUNCTION, '<', '>', '+', '-', '/', ')']\l"]
  267 -> 283 [style=solid label="ASSIGN"]
  267 -> "267R119" [style=solid]
 "267R119" [label="R119", fillcolor=3, shape=diamond, style=filled]
  268 [label="State 268\n\l 31 iff: IF expr NEWLINE BEGIF stmts ENDIF .\l"]
  268 -> "268R31" [style=solid]
 "268R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  269 [label="State 269\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE BEGIF stmts ENDIF\l 32    | . IF error ENDIF\l 33 forr: . FORR declaration DOUBLEDOT expr NEWLINE BEGFOR stmts ENDFOR\l 33     | FORR declaration DOUBLEDOT expr NEWLINE BEGFOR . stmts ENDFOR\l 34     | . FORR error ENDFOR\l 42 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 43         | . error E\l 52 callfunction: . FVARIABLE '[' callfunc_args ']'\l 53             | . error '[' callfunc_args ']'\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 87 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 88              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 89              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 90              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 91              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 92              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 93              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 94              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 95 declaration: . type VAR DECLARE expr\l 96            | . type VAR DECLARE vector\l 97            | . type VAR DECLARE matrix\l 98 assignment: . VARIABLE ASSIGN expr\l 99           | . VVARIABLE ASSIGN vector\l100           | . MVARIABLE ASSIGN matrix\l101 print: . PRINT '(' expr ')'\l102      | . PRINT '(' VVARIABLE ')'\l103      | . PRINT '(' MVARIABLE ')'\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l121 type: . INT\l122     | . CINT\l123     | . VINT\l124     | . MINT\l125     | . CVINT\l126     | . CMINT\l127     | . BOOLEAN\l128     | . CBOOLEAN\l129     | . VBOOLEAN\l130     | . MBOOLEAN\l131     | . CVBOOLEAN\l132     | . CMBOOLEAN\l133 const: . INTEGER\l134      | . BOOL\l"]
  269 -> 86 [style=dotted]
  269 -> 5 [style=solid label="BOOL"]
  269 -> 6 [style=solid label="INTEGER"]
  269 -> 7 [style=solid label="VARIABLE"]
  269 -> 8 [style=solid label="VVARIABLE"]
  269 -> 9 [style=solid label="MVARIABLE"]
  269 -> 10 [style=solid label="FVARIABLE"]
  269 -> 11 [style=solid label="CINT"]
  269 -> 12 [style=solid label="VINT"]
  269 -> 13 [style=solid label="MINT"]
  269 -> 14 [style=solid label="INT"]
  269 -> 15 [style=solid label="CVINT"]
  269 -> 16 [style=solid label="CMINT"]
  269 -> 17 [style=solid label="BOOLEAN"]
  269 -> 18 [style=solid label="CBOOLEAN"]
  269 -> 19 [style=solid label="VBOOLEAN"]
  269 -> 20 [style=solid label="MBOOLEAN"]
  269 -> 21 [style=solid label="CVBOOLEAN"]
  269 -> 22 [style=solid label="CMBOOLEAN"]
  269 -> 23 [style=solid label="NEWLINE"]
  269 -> 24 [style=solid label="PRINT"]
  269 -> 25 [style=solid label="IF"]
  269 -> 26 [style=solid label="FORR"]
  269 -> 27 [style=solid label="MOVE"]
  269 -> 28 [style=solid label="RIGHT"]
  269 -> 29 [style=solid label="LEFT"]
  269 -> 30 [style=solid label="ROBEX"]
  269 -> 31 [style=solid label="WALL"]
  269 -> 32 [style=solid label="'-'"]
  269 -> 33 [style=solid label="'!'"]
  269 -> 34 [style=solid label="'('"]
  269 -> 35 [style=solid label="'['"]
  269 -> 36 [style=solid label="'{'"]
  269 -> 284 [style=dashed label="stmts"]
  269 -> 38 [style=dashed label="stmt"]
  269 -> 39 [style=dashed label="robotactions"]
  269 -> 40 [style=dashed label="robotmove"]
  269 -> 41 [style=dashed label="robotright"]
  269 -> 42 [style=dashed label="robotleft"]
  269 -> 43 [style=dashed label="robotwall"]
  269 -> 44 [style=dashed label="robotexit"]
  269 -> 45 [style=dashed label="iff"]
  269 -> 46 [style=dashed label="forr"]
  269 -> 47 [style=dashed label="function"]
  269 -> 48 [style=dashed label="callfunction"]
  269 -> 49 [style=dashed label="matrix"]
  269 -> 50 [style=dashed label="vector"]
  269 -> 51 [style=dashed label="vmdeclaration"]
  269 -> 52 [style=dashed label="declaration"]
  269 -> 53 [style=dashed label="assignment"]
  269 -> 54 [style=dashed label="print"]
  269 -> 55 [style=dashed label="expr"]
  269 -> 56 [style=dashed label="type"]
  269 -> 57 [style=dashed label="const"]
  270 [label="State 270\n\l 42 function: '[' return_func ']' DECLARE FUNC VAR . '(' args_func ')' B NEWLINE stmts E\l"]
  270 -> 285 [style=solid label="'('"]
  271 [label="State 271\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 76 vector: MVARIABLE '(' '[' ']' ',' . expr ')'\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  271 -> 83 [style=dotted]
  271 -> 5 [style=solid label="BOOL"]
  271 -> 6 [style=solid label="INTEGER"]
  271 -> 59 [style=solid label="VARIABLE"]
  271 -> 77 [style=solid label="VVARIABLE"]
  271 -> 78 [style=solid label="MVARIABLE"]
  271 -> 27 [style=solid label="MOVE"]
  271 -> 30 [style=solid label="ROBEX"]
  271 -> 31 [style=solid label="WALL"]
  271 -> 32 [style=solid label="'-'"]
  271 -> 33 [style=solid label="'!'"]
  271 -> 64 [style=solid label="'('"]
  271 -> 40 [style=dashed label="robotmove"]
  271 -> 43 [style=dashed label="robotwall"]
  271 -> 44 [style=dashed label="robotexit"]
  271 -> 274 [style=dashed label="expr"]
  271 -> 57 [style=dashed label="const"]
  272 [label="State 272\n\l 74 vector: VVARIABLE '(' vector ',' '[' ']' . ')'\l"]
  272 -> 286 [style=solid label="')'"]
  273 [label="State 273\n\l 56 matrix: MVARIABLE '(' '[' ']' ',' vector . ')'\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l"]
  273 -> 112 [style=solid label="ELEMMULT"]
  273 -> 114 [style=solid label="LEFTSHIFT"]
  273 -> 115 [style=solid label="RIGHTSHIFT"]
  273 -> 287 [style=solid label="')'"]
  274 [label="State 274\n\l 76 vector: MVARIABLE '(' '[' ']' ',' expr . ')'\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  274 -> 121 [style=solid label="CONJUNCTION"]
  274 -> 122 [style=solid label="'<'"]
  274 -> 123 [style=solid label="'>'"]
  274 -> 124 [style=solid label="'+'"]
  274 -> 125 [style=solid label="'-'"]
  274 -> 126 [style=solid label="'/'"]
  274 -> 288 [style=solid label="')'"]
  275 [label="State 275\n\l 55 matrix: MVARIABLE '(' vector ',' '[' ']' . ')'\l"]
  275 -> 289 [style=solid label="')'"]
  276 [label="State 276\n\l 75 vector: MVARIABLE '(' expr ',' '[' ']' . ')'\l"]
  276 -> 290 [style=solid label="')'"]
  277 [label="State 277\n\l119 expr: MVARIABLE '(' expr ',' expr ')' .\l"]
  277 -> "277R119" [style=solid]
 "277R119" [label="R119", fillcolor=3, shape=diamond, style=filled]
  278 [label="State 278\n\l 74 vector: VVARIABLE '(' vector ',' '[' ']' ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l 88 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' ')' . ASSIGN vector\l"]
  278 -> 291 [style=solid label="ASSIGN"]
  278 -> "278R74" [style=solid]
 "278R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  279 [label="State 279\n\l 56 matrix: MVARIABLE '(' '[' ']' ',' vector ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l 93 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector ')' . ASSIGN matrix\l"]
  279 -> 292 [style=solid label="ASSIGN"]
  279 -> "279R56" [style=solid]
 "279R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  280 [label="State 280\n\l 76 vector: MVARIABLE '(' '[' ']' ',' expr ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l 91 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr ')' . ASSIGN vector\l"]
  280 -> 293 [style=solid label="ASSIGN"]
  280 -> "280R76" [style=solid]
 "280R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
  281 [label="State 281\n\l 55 matrix: MVARIABLE '(' vector ',' '[' ']' ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l 92 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' ')' . ASSIGN matrix\l"]
  281 -> 294 [style=solid label="ASSIGN"]
  281 -> "281R55" [style=solid]
 "281R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  282 [label="State 282\n\l 75 vector: MVARIABLE '(' expr ',' '[' ']' ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l 90 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' ')' . ASSIGN vector\l"]
  282 -> 295 [style=solid label="ASSIGN"]
  282 -> "282R75" [style=solid]
 "282R75" [label="R75", fillcolor=3, shape=diamond, style=filled]
  283 [label="State 283\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 89 vmdeclaration: MVARIABLE '(' expr ',' expr ')' ASSIGN . expr\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l133 const: . INTEGER\l134      | . BOOL\l"]
  283 -> 83 [style=dotted]
  283 -> 5 [style=solid label="BOOL"]
  283 -> 6 [style=solid label="INTEGER"]
  283 -> 59 [style=solid label="VARIABLE"]
  283 -> 77 [style=solid label="VVARIABLE"]
  283 -> 78 [style=solid label="MVARIABLE"]
  283 -> 27 [style=solid label="MOVE"]
  283 -> 30 [style=solid label="ROBEX"]
  283 -> 31 [style=solid label="WALL"]
  283 -> 32 [style=solid label="'-'"]
  283 -> 33 [style=solid label="'!'"]
  283 -> 64 [style=solid label="'('"]
  283 -> 40 [style=dashed label="robotmove"]
  283 -> 43 [style=dashed label="robotwall"]
  283 -> 44 [style=dashed label="robotexit"]
  283 -> 296 [style=dashed label="expr"]
  283 -> 57 [style=dashed label="const"]
  284 [label="State 284\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE BEGIF stmts ENDIF\l 32    | . IF error ENDIF\l 33 forr: . FORR declaration DOUBLEDOT expr NEWLINE BEGFOR stmts ENDFOR\l 33     | FORR declaration DOUBLEDOT expr NEWLINE BEGFOR stmts . ENDFOR\l 34     | . FORR error ENDFOR\l 42 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 43         | . error E\l 52 callfunction: . FVARIABLE '[' callfunc_args ']'\l 53             | . error '[' callfunc_args ']'\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 87 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 88              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 89              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 90              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 91              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 92              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 93              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 94              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 95 declaration: . type VAR DECLARE expr\l 96            | . type VAR DECLARE vector\l 97            | . type VAR DECLARE matrix\l 98 assignment: . VARIABLE ASSIGN expr\l 99           | . VVARIABLE ASSIGN vector\l100           | . MVARIABLE ASSIGN matrix\l101 print: . PRINT '(' expr ')'\l102      | . PRINT '(' VVARIABLE ')'\l103      | . PRINT '(' MVARIABLE ')'\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l121 type: . INT\l122     | . CINT\l123     | . VINT\l124     | . MINT\l125     | . CVINT\l126     | . CMINT\l127     | . BOOLEAN\l128     | . CBOOLEAN\l129     | . VBOOLEAN\l130     | . MBOOLEAN\l131     | . CVBOOLEAN\l132     | . CMBOOLEAN\l133 const: . INTEGER\l134      | . BOOL\l"]
  284 -> 98 [style=dotted]
  284 -> 5 [style=solid label="BOOL"]
  284 -> 6 [style=solid label="INTEGER"]
  284 -> 7 [style=solid label="VARIABLE"]
  284 -> 8 [style=solid label="VVARIABLE"]
  284 -> 9 [style=solid label="MVARIABLE"]
  284 -> 10 [style=solid label="FVARIABLE"]
  284 -> 11 [style=solid label="CINT"]
  284 -> 12 [style=solid label="VINT"]
  284 -> 13 [style=solid label="MINT"]
  284 -> 14 [style=solid label="INT"]
  284 -> 15 [style=solid label="CVINT"]
  284 -> 16 [style=solid label="CMINT"]
  284 -> 17 [style=solid label="BOOLEAN"]
  284 -> 18 [style=solid label="CBOOLEAN"]
  284 -> 19 [style=solid label="VBOOLEAN"]
  284 -> 20 [style=solid label="MBOOLEAN"]
  284 -> 21 [style=solid label="CVBOOLEAN"]
  284 -> 22 [style=solid label="CMBOOLEAN"]
  284 -> 23 [style=solid label="NEWLINE"]
  284 -> 24 [style=solid label="PRINT"]
  284 -> 25 [style=solid label="IF"]
  284 -> 26 [style=solid label="FORR"]
  284 -> 297 [style=solid label="ENDFOR"]
  284 -> 27 [style=solid label="MOVE"]
  284 -> 28 [style=solid label="RIGHT"]
  284 -> 29 [style=solid label="LEFT"]
  284 -> 30 [style=solid label="ROBEX"]
  284 -> 31 [style=solid label="WALL"]
  284 -> 32 [style=solid label="'-'"]
  284 -> 33 [style=solid label="'!'"]
  284 -> 34 [style=solid label="'('"]
  284 -> 35 [style=solid label="'['"]
  284 -> 36 [style=solid label="'{'"]
  284 -> 99 [style=dashed label="stmt"]
  284 -> 39 [style=dashed label="robotactions"]
  284 -> 40 [style=dashed label="robotmove"]
  284 -> 41 [style=dashed label="robotright"]
  284 -> 42 [style=dashed label="robotleft"]
  284 -> 43 [style=dashed label="robotwall"]
  284 -> 44 [style=dashed label="robotexit"]
  284 -> 45 [style=dashed label="iff"]
  284 -> 46 [style=dashed label="forr"]
  284 -> 47 [style=dashed label="function"]
  284 -> 48 [style=dashed label="callfunction"]
  284 -> 49 [style=dashed label="matrix"]
  284 -> 50 [style=dashed label="vector"]
  284 -> 51 [style=dashed label="vmdeclaration"]
  284 -> 52 [style=dashed label="declaration"]
  284 -> 53 [style=dashed label="assignment"]
  284 -> 54 [style=dashed label="print"]
  284 -> 55 [style=dashed label="expr"]
  284 -> 56 [style=dashed label="type"]
  284 -> 57 [style=dashed label="const"]
  285 [label="State 285\n\l 38 args_func: . '[' type VAR ']'\l 39          | . args_func ',' '[' type VAR ']'\l 40          | . args_func error\l 41          | . error\l 42 function: '[' return_func ']' DECLARE FUNC VAR '(' . args_func ')' B NEWLINE stmts E\l"]
  285 -> 298 [style=dotted]
  285 -> 299 [style=solid label="'['"]
  285 -> 300 [style=dashed label="args_func"]
  286 [label="State 286\n\l 74 vector: VVARIABLE '(' vector ',' '[' ']' ')' .\l"]
  286 -> "286R74" [style=solid]
 "286R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  287 [label="State 287\n\l 56 matrix: MVARIABLE '(' '[' ']' ',' vector ')' .\l"]
  287 -> "287R56" [style=solid]
 "287R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  288 [label="State 288\n\l 76 vector: MVARIABLE '(' '[' ']' ',' expr ')' .\l"]
  288 -> "288R76" [style=solid]
 "288R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
  289 [label="State 289\n\l 55 matrix: MVARIABLE '(' vector ',' '[' ']' ')' .\l"]
  289 -> "289R55" [style=solid]
 "289R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  290 [label="State 290\n\l 75 vector: MVARIABLE '(' expr ',' '[' ']' ')' .\l"]
  290 -> "290R75" [style=solid]
 "290R75" [label="R75", fillcolor=3, shape=diamond, style=filled]
  291 [label="State 291\n\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 88 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN . vector\l"]
  291 -> 137 [style=dotted]
  291 -> 138 [style=solid label="VVARIABLE"]
  291 -> 139 [style=solid label="MVARIABLE"]
  291 -> 93 [style=solid label="'{'"]
  291 -> 301 [style=dashed label="vector"]
  292 [label="State 292\n\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 93 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN . matrix\l"]
  292 -> 143 [style=dotted]
  292 -> 138 [style=solid label="VVARIABLE"]
  292 -> 144 [style=solid label="MVARIABLE"]
  292 -> 36 [style=solid label="'{'"]
  292 -> 302 [style=dashed label="matrix"]
  292 -> 146 [style=dashed label="vector"]
  293 [label="State 293\n\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 91 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN . vector\l"]
  293 -> 137 [style=dotted]
  293 -> 138 [style=solid label="VVARIABLE"]
  293 -> 139 [style=solid label="MVARIABLE"]
  293 -> 93 [style=solid label="'{'"]
  293 -> 303 [style=dashed label="vector"]
  294 [label="State 294\n\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 92 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN . matrix\l"]
  294 -> 143 [style=dotted]
  294 -> 138 [style=solid label="VVARIABLE"]
  294 -> 144 [style=solid label="MVARIABLE"]
  294 -> 36 [style=solid label="'{'"]
  294 -> 304 [style=dashed label="matrix"]
  294 -> 146 [style=dashed label="vector"]
  295 [label="State 295\n\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 90 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN . vector\l"]
  295 -> 137 [style=dotted]
  295 -> 138 [style=solid label="VVARIABLE"]
  295 -> 139 [style=solid label="MVARIABLE"]
  295 -> 93 [style=solid label="'{'"]
  295 -> 305 [style=dashed label="vector"]
  296 [label="State 296\n\l 89 vmdeclaration: MVARIABLE '(' expr ',' expr ')' ASSIGN expr .  [NEWLINE]\l110 expr: expr . '+' expr\l111     | expr . '-' expr\l112     | expr . '/' expr\l113     | expr . '<' expr\l114     | expr . '>' expr\l116     | expr . CONJUNCTION expr\l"]
  296 -> 121 [style=solid label="CONJUNCTION"]
  296 -> 122 [style=solid label="'<'"]
  296 -> 123 [style=solid label="'>'"]
  296 -> 124 [style=solid label="'+'"]
  296 -> 125 [style=solid label="'-'"]
  296 -> 126 [style=solid label="'/'"]
  296 -> "296R89" [style=solid]
 "296R89" [label="R89", fillcolor=3, shape=diamond, style=filled]
  297 [label="State 297\n\l 33 forr: FORR declaration DOUBLEDOT expr NEWLINE BEGFOR stmts ENDFOR .\l"]
  297 -> "297R33" [style=solid]
 "297R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  298 [label="State 298\n\l 41 args_func: error .\l"]
  298 -> "298R41" [style=solid]
 "298R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  299 [label="State 299\n\l 38 args_func: '[' . type VAR ']'\l121 type: . INT\l122     | . CINT\l123     | . VINT\l124     | . MINT\l125     | . CVINT\l126     | . CMINT\l127     | . BOOLEAN\l128     | . CBOOLEAN\l129     | . VBOOLEAN\l130     | . MBOOLEAN\l131     | . CVBOOLEAN\l132     | . CMBOOLEAN\l"]
  299 -> 11 [style=solid label="CINT"]
  299 -> 12 [style=solid label="VINT"]
  299 -> 13 [style=solid label="MINT"]
  299 -> 14 [style=solid label="INT"]
  299 -> 15 [style=solid label="CVINT"]
  299 -> 16 [style=solid label="CMINT"]
  299 -> 17 [style=solid label="BOOLEAN"]
  299 -> 18 [style=solid label="CBOOLEAN"]
  299 -> 19 [style=solid label="VBOOLEAN"]
  299 -> 20 [style=solid label="MBOOLEAN"]
  299 -> 21 [style=solid label="CVBOOLEAN"]
  299 -> 22 [style=solid label="CMBOOLEAN"]
  299 -> 306 [style=dashed label="type"]
  300 [label="State 300\n\l 39 args_func: args_func . ',' '[' type VAR ']'\l 40          | args_func . error\l 42 function: '[' return_func ']' DECLARE FUNC VAR '(' args_func . ')' B NEWLINE stmts E\l"]
  300 -> 307 [style=dotted]
  300 -> 308 [style=solid label="','"]
  300 -> 309 [style=solid label="')'"]
  301 [label="State 301\n\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l 88 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector .  [NEWLINE]\l"]
  301 -> 112 [style=solid label="ELEMMULT"]
  301 -> 114 [style=solid label="LEFTSHIFT"]
  301 -> 115 [style=solid label="RIGHTSHIFT"]
  301 -> "301R88" [style=solid]
 "301R88" [label="R88", fillcolor=3, shape=diamond, style=filled]
  302 [label="State 302\n\l 59 matrix: matrix . '*' matrix\l 60       | matrix . ELEMMULT matrix\l 61       | matrix . '\\''\l 62       | matrix . RIGHTSHIFT\l 63       | matrix . LEFTSHIFT\l 65       | matrix . ELEMMULT vector\l 66       | matrix . ELEMMULT expr\l 93 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix .  [NEWLINE]\l"]
  302 -> 106 [style=solid label="ELEMMULT"]
  302 -> 107 [style=solid label="'\\''"]
  302 -> 108 [style=solid label="LEFTSHIFT"]
  302 -> 109 [style=solid label="RIGHTSHIFT"]
  302 -> 110 [style=solid label="'*'"]
  302 -> "302R93" [style=solid]
 "302R93" [label="R93", fillcolor=3, shape=diamond, style=filled]
  303 [label="State 303\n\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l 91 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector .  [NEWLINE]\l"]
  303 -> 112 [style=solid label="ELEMMULT"]
  303 -> 114 [style=solid label="LEFTSHIFT"]
  303 -> 115 [style=solid label="RIGHTSHIFT"]
  303 -> "303R91" [style=solid]
 "303R91" [label="R91", fillcolor=3, shape=diamond, style=filled]
  304 [label="State 304\n\l 59 matrix: matrix . '*' matrix\l 60       | matrix . ELEMMULT matrix\l 61       | matrix . '\\''\l 62       | matrix . RIGHTSHIFT\l 63       | matrix . LEFTSHIFT\l 65       | matrix . ELEMMULT vector\l 66       | matrix . ELEMMULT expr\l 92 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix .  [NEWLINE]\l"]
  304 -> 106 [style=solid label="ELEMMULT"]
  304 -> 107 [style=solid label="'\\''"]
  304 -> 108 [style=solid label="LEFTSHIFT"]
  304 -> 109 [style=solid label="RIGHTSHIFT"]
  304 -> 110 [style=solid label="'*'"]
  304 -> "304R92" [style=solid]
 "304R92" [label="R92", fillcolor=3, shape=diamond, style=filled]
  305 [label="State 305\n\l 78 vector: vector . ELEMMULT vector\l 79       | vector . RIGHTSHIFT\l 80       | vector . LEFTSHIFT\l 81       | vector . ELEMMULT expr\l 90 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector .  [NEWLINE]\l"]
  305 -> 112 [style=solid label="ELEMMULT"]
  305 -> 114 [style=solid label="LEFTSHIFT"]
  305 -> 115 [style=solid label="RIGHTSHIFT"]
  305 -> "305R90" [style=solid]
 "305R90" [label="R90", fillcolor=3, shape=diamond, style=filled]
  306 [label="State 306\n\l 38 args_func: '[' type . VAR ']'\l"]
  306 -> 310 [style=solid label="VAR"]
  307 [label="State 307\n\l 40 args_func: args_func error .\l"]
  307 -> "307R40" [style=solid]
 "307R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  308 [label="State 308\n\l 39 args_func: args_func ',' . '[' type VAR ']'\l"]
  308 -> 311 [style=solid label="'['"]
  309 [label="State 309\n\l 42 function: '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' . B NEWLINE stmts E\l"]
  309 -> 312 [style=solid label="B"]
  310 [label="State 310\n\l 38 args_func: '[' type VAR . ']'\l"]
  310 -> 313 [style=solid label="']'"]
  311 [label="State 311\n\l 39 args_func: args_func ',' '[' . type VAR ']'\l121 type: . INT\l122     | . CINT\l123     | . VINT\l124     | . MINT\l125     | . CVINT\l126     | . CMINT\l127     | . BOOLEAN\l128     | . CBOOLEAN\l129     | . VBOOLEAN\l130     | . MBOOLEAN\l131     | . CVBOOLEAN\l132     | . CMBOOLEAN\l"]
  311 -> 11 [style=solid label="CINT"]
  311 -> 12 [style=solid label="VINT"]
  311 -> 13 [style=solid label="MINT"]
  311 -> 14 [style=solid label="INT"]
  311 -> 15 [style=solid label="CVINT"]
  311 -> 16 [style=solid label="CMINT"]
  311 -> 17 [style=solid label="BOOLEAN"]
  311 -> 18 [style=solid label="CBOOLEAN"]
  311 -> 19 [style=solid label="VBOOLEAN"]
  311 -> 20 [style=solid label="MBOOLEAN"]
  311 -> 21 [style=solid label="CVBOOLEAN"]
  311 -> 22 [style=solid label="CMBOOLEAN"]
  311 -> 314 [style=dashed label="type"]
  312 [label="State 312\n\l 42 function: '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B . NEWLINE stmts E\l"]
  312 -> 315 [style=solid label="NEWLINE"]
  313 [label="State 313\n\l 38 args_func: '[' type VAR ']' .\l"]
  313 -> "313R38" [style=solid]
 "313R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  314 [label="State 314\n\l 39 args_func: args_func ',' '[' type . VAR ']'\l"]
  314 -> 316 [style=solid label="VAR"]
  315 [label="State 315\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE BEGIF stmts ENDIF\l 32    | . IF error ENDIF\l 33 forr: . FORR declaration DOUBLEDOT expr NEWLINE BEGFOR stmts ENDFOR\l 34     | . FORR error ENDFOR\l 42 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 42         | '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE . stmts E\l 43         | . error E\l 52 callfunction: . FVARIABLE '[' callfunc_args ']'\l 53             | . error '[' callfunc_args ']'\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 87 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 88              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 89              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 90              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 91              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 92              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 93              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 94              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 95 declaration: . type VAR DECLARE expr\l 96            | . type VAR DECLARE vector\l 97            | . type VAR DECLARE matrix\l 98 assignment: . VARIABLE ASSIGN expr\l 99           | . VVARIABLE ASSIGN vector\l100           | . MVARIABLE ASSIGN matrix\l101 print: . PRINT '(' expr ')'\l102      | . PRINT '(' VVARIABLE ')'\l103      | . PRINT '(' MVARIABLE ')'\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l121 type: . INT\l122     | . CINT\l123     | . VINT\l124     | . MINT\l125     | . CVINT\l126     | . CMINT\l127     | . BOOLEAN\l128     | . CBOOLEAN\l129     | . VBOOLEAN\l130     | . MBOOLEAN\l131     | . CVBOOLEAN\l132     | . CMBOOLEAN\l133 const: . INTEGER\l134      | . BOOL\l"]
  315 -> 86 [style=dotted]
  315 -> 5 [style=solid label="BOOL"]
  315 -> 6 [style=solid label="INTEGER"]
  315 -> 7 [style=solid label="VARIABLE"]
  315 -> 8 [style=solid label="VVARIABLE"]
  315 -> 9 [style=solid label="MVARIABLE"]
  315 -> 10 [style=solid label="FVARIABLE"]
  315 -> 11 [style=solid label="CINT"]
  315 -> 12 [style=solid label="VINT"]
  315 -> 13 [style=solid label="MINT"]
  315 -> 14 [style=solid label="INT"]
  315 -> 15 [style=solid label="CVINT"]
  315 -> 16 [style=solid label="CMINT"]
  315 -> 17 [style=solid label="BOOLEAN"]
  315 -> 18 [style=solid label="CBOOLEAN"]
  315 -> 19 [style=solid label="VBOOLEAN"]
  315 -> 20 [style=solid label="MBOOLEAN"]
  315 -> 21 [style=solid label="CVBOOLEAN"]
  315 -> 22 [style=solid label="CMBOOLEAN"]
  315 -> 23 [style=solid label="NEWLINE"]
  315 -> 24 [style=solid label="PRINT"]
  315 -> 25 [style=solid label="IF"]
  315 -> 26 [style=solid label="FORR"]
  315 -> 27 [style=solid label="MOVE"]
  315 -> 28 [style=solid label="RIGHT"]
  315 -> 29 [style=solid label="LEFT"]
  315 -> 30 [style=solid label="ROBEX"]
  315 -> 31 [style=solid label="WALL"]
  315 -> 32 [style=solid label="'-'"]
  315 -> 33 [style=solid label="'!'"]
  315 -> 34 [style=solid label="'('"]
  315 -> 35 [style=solid label="'['"]
  315 -> 36 [style=solid label="'{'"]
  315 -> 317 [style=dashed label="stmts"]
  315 -> 38 [style=dashed label="stmt"]
  315 -> 39 [style=dashed label="robotactions"]
  315 -> 40 [style=dashed label="robotmove"]
  315 -> 41 [style=dashed label="robotright"]
  315 -> 42 [style=dashed label="robotleft"]
  315 -> 43 [style=dashed label="robotwall"]
  315 -> 44 [style=dashed label="robotexit"]
  315 -> 45 [style=dashed label="iff"]
  315 -> 46 [style=dashed label="forr"]
  315 -> 47 [style=dashed label="function"]
  315 -> 48 [style=dashed label="callfunction"]
  315 -> 49 [style=dashed label="matrix"]
  315 -> 50 [style=dashed label="vector"]
  315 -> 51 [style=dashed label="vmdeclaration"]
  315 -> 52 [style=dashed label="declaration"]
  315 -> 53 [style=dashed label="assignment"]
  315 -> 54 [style=dashed label="print"]
  315 -> 55 [style=dashed label="expr"]
  315 -> 56 [style=dashed label="type"]
  315 -> 57 [style=dashed label="const"]
  316 [label="State 316\n\l 39 args_func: args_func ',' '[' type VAR . ']'\l"]
  316 -> 318 [style=solid label="']'"]
  317 [label="State 317\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE BEGIF stmts ENDIF\l 32    | . IF error ENDIF\l 33 forr: . FORR declaration DOUBLEDOT expr NEWLINE BEGFOR stmts ENDFOR\l 34     | . FORR error ENDFOR\l 42 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 42         | '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts . E\l 43         | . error E\l 52 callfunction: . FVARIABLE '[' callfunc_args ']'\l 53             | . error '[' callfunc_args ']'\l 54 matrix: . '{' listexprs '}'\l 55       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 56       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 57       | . MVARIABLE '(' matrix ')'\l 58       | . MVARIABLE\l 59       | . matrix '*' matrix\l 60       | . matrix ELEMMULT matrix\l 61       | . matrix '\\''\l 62       | . matrix RIGHTSHIFT\l 63       | . matrix LEFTSHIFT\l 64       | . vector '\\''\l 65       | . matrix ELEMMULT vector\l 66       | . matrix ELEMMULT expr\l 67       | . error matrix\l 68       | . error vector\l 69       | . error expr\l 73 vector: . '{' exprs '}'\l 74       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 75       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 76       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 77       | . VVARIABLE\l 78       | . vector ELEMMULT vector\l 79       | . vector RIGHTSHIFT\l 80       | . vector LEFTSHIFT\l 81       | . vector ELEMMULT expr\l 82       | . error vector\l 83       | . error expr\l 87 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 88              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 89              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 90              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 91              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 92              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 93              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 94              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 95 declaration: . type VAR DECLARE expr\l 96            | . type VAR DECLARE vector\l 97            | . type VAR DECLARE matrix\l 98 assignment: . VARIABLE ASSIGN expr\l 99           | . VVARIABLE ASSIGN vector\l100           | . MVARIABLE ASSIGN matrix\l101 print: . PRINT '(' expr ')'\l102      | . PRINT '(' VVARIABLE ')'\l103      | . PRINT '(' MVARIABLE ')'\l104 expr: . const\l105     | . robotexit\l106     | . robotmove\l107     | . robotwall\l108     | . VARIABLE\l109     | . '-' expr\l110     | . expr '+' expr\l111     | . expr '-' expr\l112     | . expr '/' expr\l113     | . expr '<' expr\l114     | . expr '>' expr\l115     | . '!' expr\l116     | . expr CONJUNCTION expr\l117     | . '(' expr ')'\l118     | . VVARIABLE '(' expr ')'\l119     | . MVARIABLE '(' expr ',' expr ')'\l120     | . error expr\l121 type: . INT\l122     | . CINT\l123     | . VINT\l124     | . MINT\l125     | . CVINT\l126     | . CMINT\l127     | . BOOLEAN\l128     | . CBOOLEAN\l129     | . VBOOLEAN\l130     | . MBOOLEAN\l131     | . CVBOOLEAN\l132     | . CMBOOLEAN\l133 const: . INTEGER\l134      | . BOOL\l"]
  317 -> 98 [style=dotted]
  317 -> 5 [style=solid label="BOOL"]
  317 -> 6 [style=solid label="INTEGER"]
  317 -> 7 [style=solid label="VARIABLE"]
  317 -> 8 [style=solid label="VVARIABLE"]
  317 -> 9 [style=solid label="MVARIABLE"]
  317 -> 10 [style=solid label="FVARIABLE"]
  317 -> 11 [style=solid label="CINT"]
  317 -> 12 [style=solid label="VINT"]
  317 -> 13 [style=solid label="MINT"]
  317 -> 14 [style=solid label="INT"]
  317 -> 15 [style=solid label="CVINT"]
  317 -> 16 [style=solid label="CMINT"]
  317 -> 17 [style=solid label="BOOLEAN"]
  317 -> 18 [style=solid label="CBOOLEAN"]
  317 -> 19 [style=solid label="VBOOLEAN"]
  317 -> 20 [style=solid label="MBOOLEAN"]
  317 -> 21 [style=solid label="CVBOOLEAN"]
  317 -> 22 [style=solid label="CMBOOLEAN"]
  317 -> 23 [style=solid label="NEWLINE"]
  317 -> 24 [style=solid label="PRINT"]
  317 -> 25 [style=solid label="IF"]
  317 -> 26 [style=solid label="FORR"]
  317 -> 319 [style=solid label="E"]
  317 -> 27 [style=solid label="MOVE"]
  317 -> 28 [style=solid label="RIGHT"]
  317 -> 29 [style=solid label="LEFT"]
  317 -> 30 [style=solid label="ROBEX"]
  317 -> 31 [style=solid label="WALL"]
  317 -> 32 [style=solid label="'-'"]
  317 -> 33 [style=solid label="'!'"]
  317 -> 34 [style=solid label="'('"]
  317 -> 35 [style=solid label="'['"]
  317 -> 36 [style=solid label="'{'"]
  317 -> 99 [style=dashed label="stmt"]
  317 -> 39 [style=dashed label="robotactions"]
  317 -> 40 [style=dashed label="robotmove"]
  317 -> 41 [style=dashed label="robotright"]
  317 -> 42 [style=dashed label="robotleft"]
  317 -> 43 [style=dashed label="robotwall"]
  317 -> 44 [style=dashed label="robotexit"]
  317 -> 45 [style=dashed label="iff"]
  317 -> 46 [style=dashed label="forr"]
  317 -> 47 [style=dashed label="function"]
  317 -> 48 [style=dashed label="callfunction"]
  317 -> 49 [style=dashed label="matrix"]
  317 -> 50 [style=dashed label="vector"]
  317 -> 51 [style=dashed label="vmdeclaration"]
  317 -> 52 [style=dashed label="declaration"]
  317 -> 53 [style=dashed label="assignment"]
  317 -> 54 [style=dashed label="print"]
  317 -> 55 [style=dashed label="expr"]
  317 -> 56 [style=dashed label="type"]
  317 -> 57 [style=dashed label="const"]
  318 [label="State 318\n\l 39 args_func: args_func ',' '[' type VAR ']' .\l"]
  318 -> "318R39" [style=solid]
 "318R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  319 [label="State 319\n\l 42 function: '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E .\l"]
  319 -> "319R42" [style=solid]
 "319R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
}
