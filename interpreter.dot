// Generated by GNU Bison 3.3.2.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <http://www.gnu.org/software/bison/>.

digraph "interpreter.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: . program $end\l  1 program: . func\l  2 func: . func stmts\l  3     | . func error\l  4     | . %empty\l"]
  0 -> 1 [style=dashed label="program"]
  0 -> 2 [style=dashed label="func"]
  0 -> "0R4" [style=solid]
 "0R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  1 [label="State 1\n\l  0 $accept: program . $end\l"]
  1 -> 3 [style=solid label="$end"]
  2 [label="State 2\n\l  1 program: func .  [$end]\l  2 func: func . stmts\l  3     | func . error\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 48 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 49         | . error E\l 58 callfunction: . FVARIABLE '[' callfunc_args ']'\l 59             | . error '[' callfunc_args ']'\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 93 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 94              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 95              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 96              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 97              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 98              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 99              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l100              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l101 declaration: . type VAR DECLARE expr\l102            | . type VAR DECLARE vector\l103            | . type VAR DECLARE matrix\l104 assignment: . VARIABLE ASSIGN expr\l105           | . VVARIABLE ASSIGN vector\l106           | . MVARIABLE ASSIGN matrix\l107 print: . PRINT '(' expr ')'\l108      | . PRINT '(' VVARIABLE ')'\l109      | . PRINT '(' MVARIABLE ')'\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l127 type: . INT\l128     | . CINT\l129     | . VINT\l130     | . MINT\l131     | . CVINT\l132     | . CMINT\l133     | . BOOLEAN\l134     | . CBOOLEAN\l135     | . VBOOLEAN\l136     | . MBOOLEAN\l137     | . CVBOOLEAN\l138     | . CMBOOLEAN\l139 const: . INTEGER\l140      | . BOOL\l"]
  2 -> 4 [style=dotted]
  2 -> 5 [style=solid label="BOOL"]
  2 -> 6 [style=solid label="INTEGER"]
  2 -> 7 [style=solid label="VARIABLE"]
  2 -> 8 [style=solid label="VVARIABLE"]
  2 -> 9 [style=solid label="MVARIABLE"]
  2 -> 10 [style=solid label="FVARIABLE"]
  2 -> 11 [style=solid label="CINT"]
  2 -> 12 [style=solid label="VINT"]
  2 -> 13 [style=solid label="MINT"]
  2 -> 14 [style=solid label="INT"]
  2 -> 15 [style=solid label="CVINT"]
  2 -> 16 [style=solid label="CMINT"]
  2 -> 17 [style=solid label="BOOLEAN"]
  2 -> 18 [style=solid label="CBOOLEAN"]
  2 -> 19 [style=solid label="VBOOLEAN"]
  2 -> 20 [style=solid label="MBOOLEAN"]
  2 -> 21 [style=solid label="CVBOOLEAN"]
  2 -> 22 [style=solid label="CMBOOLEAN"]
  2 -> 23 [style=solid label="NEWLINE"]
  2 -> 24 [style=solid label="PRINT"]
  2 -> 25 [style=solid label="IF"]
  2 -> 26 [style=solid label="FORR"]
  2 -> 27 [style=solid label="MOVE"]
  2 -> 28 [style=solid label="RIGHT"]
  2 -> 29 [style=solid label="LEFT"]
  2 -> 30 [style=solid label="ROBEX"]
  2 -> 31 [style=solid label="WALL"]
  2 -> 32 [style=solid label="'-'"]
  2 -> 33 [style=solid label="'!'"]
  2 -> 34 [style=solid label="'('"]
  2 -> 35 [style=solid label="'['"]
  2 -> 36 [style=solid label="'{'"]
  2 -> 37 [style=dashed label="stmts"]
  2 -> 38 [style=dashed label="stmt"]
  2 -> 39 [style=dashed label="robotactions"]
  2 -> 40 [style=dashed label="robotmove"]
  2 -> 41 [style=dashed label="robotright"]
  2 -> 42 [style=dashed label="robotleft"]
  2 -> 43 [style=dashed label="robotwall"]
  2 -> 44 [style=dashed label="robotexit"]
  2 -> 45 [style=dashed label="iff"]
  2 -> 46 [style=dashed label="forr"]
  2 -> 47 [style=dashed label="function"]
  2 -> 48 [style=dashed label="callfunction"]
  2 -> 49 [style=dashed label="matrix"]
  2 -> 50 [style=dashed label="vector"]
  2 -> 51 [style=dashed label="vmdeclaration"]
  2 -> 52 [style=dashed label="declaration"]
  2 -> 53 [style=dashed label="assignment"]
  2 -> 54 [style=dashed label="print"]
  2 -> 55 [style=dashed label="expr"]
  2 -> 56 [style=dashed label="type"]
  2 -> 57 [style=dashed label="const"]
  2 -> "2R1" [label="[$end]", style=solid]
 "2R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  3 [label="State 3\n\l  0 $accept: program $end .\l"]
  3 -> "3R0" [style=solid]
 "3R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  4 [label="State 4\n\l  3 func: func error .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']\l  8 stmts: error .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']\l 23 stmt: error . NEWLINE\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 49 function: error . E\l 59 callfunction: error . '[' callfunc_args ']'\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 73       | error . matrix\l 74       | . error vector\l 74       | error . vector\l 75       | . error expr\l 75       | error . expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 88       | error . vector\l 89       | . error expr\l 89       | error . expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l126     | error . expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  4 -> 58 [style=dotted]
  4 -> 5 [style=solid label="BOOL"]
  4 -> 6 [style=solid label="INTEGER"]
  4 -> 59 [style=solid label="VARIABLE"]
  4 -> 60 [style=solid label="VVARIABLE"]
  4 -> 61 [style=solid label="MVARIABLE"]
  4 -> 62 [style=solid label="NEWLINE"]
  4 -> 63 [style=solid label="E"]
  4 -> 27 [style=solid label="MOVE"]
  4 -> 30 [style=solid label="ROBEX"]
  4 -> 31 [style=solid label="WALL"]
  4 -> 32 [style=solid label="'-'"]
  4 -> 33 [style=solid label="'!'"]
  4 -> 64 [style=solid label="'('"]
  4 -> 65 [style=solid label="'['"]
  4 -> 36 [style=solid label="'{'"]
  4 -> 40 [style=dashed label="robotmove"]
  4 -> 43 [style=dashed label="robotwall"]
  4 -> 44 [style=dashed label="robotexit"]
  4 -> 66 [style=dashed label="matrix"]
  4 -> 67 [style=dashed label="vector"]
  4 -> 68 [style=dashed label="expr"]
  4 -> 57 [style=dashed label="const"]
  4 -> "4R3d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, NEWLINE, MOVE, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "4R3d" [label="R3", fillcolor=5, shape=diamond, style=filled]
  4 -> "4R3" [label="[$end, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, PRINT, IF, FORR, RIGHT, LEFT]", style=solid]
 "4R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  4 -> "4R8d" [label="[$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "4R8d" [label="R8", fillcolor=5, shape=diamond, style=filled]
  5 [label="State 5\n\l140 const: BOOL .\l"]
  5 -> "5R140" [style=solid]
 "5R140" [label="R140", fillcolor=3, shape=diamond, style=filled]
  6 [label="State 6\n\l139 const: INTEGER .\l"]
  6 -> "6R139" [style=solid]
 "6R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
  7 [label="State 7\n\l104 assignment: VARIABLE . ASSIGN expr\l114 expr: VARIABLE .  [NEWLINE, CONJUNCTION, '<', '>', '+', '-', '/', ')']\l"]
  7 -> 69 [style=solid label="ASSIGN"]
  7 -> "7R114" [style=solid]
 "7R114" [label="R114", fillcolor=3, shape=diamond, style=filled]
  8 [label="State 8\n\l 80 vector: VVARIABLE . '(' vector ',' '[' ']' ')'\l 83       | VVARIABLE .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l 93 vmdeclaration: VVARIABLE . '(' expr ')' ASSIGN expr\l 94              | VVARIABLE . '(' vector ',' '[' ']' ')' ASSIGN vector\l105 assignment: VVARIABLE . ASSIGN vector\l124 expr: VVARIABLE . '(' expr ')'\l"]
  8 -> 70 [style=solid label="ASSIGN"]
  8 -> 71 [style=solid label="'('"]
  8 -> "8R83" [style=solid]
 "8R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  9 [label="State 9\n\l 61 matrix: MVARIABLE . '(' vector ',' '[' ']' ')'\l 62       | MVARIABLE . '(' '[' ']' ',' vector ')'\l 63       | MVARIABLE . '(' matrix ')'\l 64       | MVARIABLE .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l 81 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 82       | MVARIABLE . '(' '[' ']' ',' expr ')'\l 95 vmdeclaration: MVARIABLE . '(' expr ',' expr ')' ASSIGN expr\l 96              | MVARIABLE . '(' expr ',' '[' ']' ')' ASSIGN vector\l 97              | MVARIABLE . '(' '[' ']' ',' expr ')' ASSIGN vector\l 98              | MVARIABLE . '(' vector ',' '[' ']' ')' ASSIGN matrix\l 99              | MVARIABLE . '(' '[' ']' ',' vector ')' ASSIGN matrix\l100              | MVARIABLE . '(' matrix ')' ASSIGN matrix\l106 assignment: MVARIABLE . ASSIGN matrix\l125 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  9 -> 72 [style=solid label="ASSIGN"]
  9 -> 73 [style=solid label="'('"]
  9 -> "9R64" [style=solid]
 "9R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
  10 [label="State 10\n\l 58 callfunction: FVARIABLE . '[' callfunc_args ']'\l"]
  10 -> 74 [style=solid label="'['"]
  11 [label="State 11\n\l128 type: CINT .\l"]
  11 -> "11R128" [style=solid]
 "11R128" [label="R128", fillcolor=3, shape=diamond, style=filled]
  12 [label="State 12\n\l129 type: VINT .\l"]
  12 -> "12R129" [style=solid]
 "12R129" [label="R129", fillcolor=3, shape=diamond, style=filled]
  13 [label="State 13\n\l130 type: MINT .\l"]
  13 -> "13R130" [style=solid]
 "13R130" [label="R130", fillcolor=3, shape=diamond, style=filled]
  14 [label="State 14\n\l127 type: INT .\l"]
  14 -> "14R127" [style=solid]
 "14R127" [label="R127", fillcolor=3, shape=diamond, style=filled]
  15 [label="State 15\n\l131 type: CVINT .\l"]
  15 -> "15R131" [style=solid]
 "15R131" [label="R131", fillcolor=3, shape=diamond, style=filled]
  16 [label="State 16\n\l132 type: CMINT .\l"]
  16 -> "16R132" [style=solid]
 "16R132" [label="R132", fillcolor=3, shape=diamond, style=filled]
  17 [label="State 17\n\l133 type: BOOLEAN .\l"]
  17 -> "17R133" [style=solid]
 "17R133" [label="R133", fillcolor=3, shape=diamond, style=filled]
  18 [label="State 18\n\l134 type: CBOOLEAN .\l"]
  18 -> "18R134" [style=solid]
 "18R134" [label="R134", fillcolor=3, shape=diamond, style=filled]
  19 [label="State 19\n\l135 type: VBOOLEAN .\l"]
  19 -> "19R135" [style=solid]
 "19R135" [label="R135", fillcolor=3, shape=diamond, style=filled]
  20 [label="State 20\n\l136 type: MBOOLEAN .\l"]
  20 -> "20R136" [style=solid]
 "20R136" [label="R136", fillcolor=3, shape=diamond, style=filled]
  21 [label="State 21\n\l137 type: CVBOOLEAN .\l"]
  21 -> "21R137" [style=solid]
 "21R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
  22 [label="State 22\n\l138 type: CMBOOLEAN .\l"]
  22 -> "22R138" [style=solid]
 "22R138" [label="R138", fillcolor=3, shape=diamond, style=filled]
  23 [label="State 23\n\l  9 stmt: NEWLINE .\l"]
  23 -> "23R9" [style=solid]
 "23R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  24 [label="State 24\n\l107 print: PRINT . '(' expr ')'\l108      | PRINT . '(' VVARIABLE ')'\l109      | PRINT . '(' MVARIABLE ')'\l"]
  24 -> 75 [style=solid label="'('"]
  25 [label="State 25\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: IF . expr NEWLINE begif stmts endif\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  25 -> 76 [style=dotted]
  25 -> 5 [style=solid label="BOOL"]
  25 -> 6 [style=solid label="INTEGER"]
  25 -> 59 [style=solid label="VARIABLE"]
  25 -> 77 [style=solid label="VVARIABLE"]
  25 -> 78 [style=solid label="MVARIABLE"]
  25 -> 27 [style=solid label="MOVE"]
  25 -> 30 [style=solid label="ROBEX"]
  25 -> 31 [style=solid label="WALL"]
  25 -> 32 [style=solid label="'-'"]
  25 -> 33 [style=solid label="'!'"]
  25 -> 64 [style=solid label="'('"]
  25 -> 40 [style=dashed label="robotmove"]
  25 -> 43 [style=dashed label="robotwall"]
  25 -> 44 [style=dashed label="robotexit"]
  25 -> 79 [style=dashed label="expr"]
  25 -> 57 [style=dashed label="const"]
  26 [label="State 26\n\l 40 forr: FORR . declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l101 declaration: . type VAR DECLARE expr\l102            | . type VAR DECLARE vector\l103            | . type VAR DECLARE matrix\l127 type: . INT\l128     | . CINT\l129     | . VINT\l130     | . MINT\l131     | . CVINT\l132     | . CMINT\l133     | . BOOLEAN\l134     | . CBOOLEAN\l135     | . VBOOLEAN\l136     | . MBOOLEAN\l137     | . CVBOOLEAN\l138     | . CMBOOLEAN\l"]
  26 -> 11 [style=solid label="CINT"]
  26 -> 12 [style=solid label="VINT"]
  26 -> 13 [style=solid label="MINT"]
  26 -> 14 [style=solid label="INT"]
  26 -> 15 [style=solid label="CVINT"]
  26 -> 16 [style=solid label="CMINT"]
  26 -> 17 [style=solid label="BOOLEAN"]
  26 -> 18 [style=solid label="CBOOLEAN"]
  26 -> 19 [style=solid label="VBOOLEAN"]
  26 -> 20 [style=solid label="MBOOLEAN"]
  26 -> 21 [style=solid label="CVBOOLEAN"]
  26 -> 22 [style=solid label="CMBOOLEAN"]
  26 -> 80 [style=dashed label="declaration"]
  26 -> 56 [style=dashed label="type"]
  27 [label="State 27\n\l 26 robotmove: MOVE . '(' expr ')'\l"]
  27 -> 81 [style=solid label="'('"]
  28 [label="State 28\n\l 27 robotright: RIGHT .\l"]
  28 -> "28R27" [style=solid]
 "28R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  29 [label="State 29\n\l 28 robotleft: LEFT .\l"]
  29 -> "29R28" [style=solid]
 "29R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  30 [label="State 30\n\l 30 robotexit: ROBEX .\l"]
  30 -> "30R30" [style=solid]
 "30R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  31 [label="State 31\n\l 29 robotwall: WALL .\l"]
  31 -> "31R29" [style=solid]
 "31R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  32 [label="State 32\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l115     | '-' . expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  32 -> 76 [style=dotted]
  32 -> 5 [style=solid label="BOOL"]
  32 -> 6 [style=solid label="INTEGER"]
  32 -> 59 [style=solid label="VARIABLE"]
  32 -> 77 [style=solid label="VVARIABLE"]
  32 -> 78 [style=solid label="MVARIABLE"]
  32 -> 27 [style=solid label="MOVE"]
  32 -> 30 [style=solid label="ROBEX"]
  32 -> 31 [style=solid label="WALL"]
  32 -> 32 [style=solid label="'-'"]
  32 -> 33 [style=solid label="'!'"]
  32 -> 64 [style=solid label="'('"]
  32 -> 40 [style=dashed label="robotmove"]
  32 -> 43 [style=dashed label="robotwall"]
  32 -> 44 [style=dashed label="robotexit"]
  32 -> 82 [style=dashed label="expr"]
  32 -> 57 [style=dashed label="const"]
  33 [label="State 33\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l121     | '!' . expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  33 -> 76 [style=dotted]
  33 -> 5 [style=solid label="BOOL"]
  33 -> 6 [style=solid label="INTEGER"]
  33 -> 59 [style=solid label="VARIABLE"]
  33 -> 77 [style=solid label="VVARIABLE"]
  33 -> 78 [style=solid label="MVARIABLE"]
  33 -> 27 [style=solid label="MOVE"]
  33 -> 30 [style=solid label="ROBEX"]
  33 -> 31 [style=solid label="WALL"]
  33 -> 32 [style=solid label="'-'"]
  33 -> 33 [style=solid label="'!'"]
  33 -> 64 [style=solid label="'('"]
  33 -> 40 [style=dashed label="robotmove"]
  33 -> 43 [style=dashed label="robotwall"]
  33 -> 44 [style=dashed label="robotexit"]
  33 -> 83 [style=dashed label="expr"]
  33 -> 57 [style=dashed label="const"]
  34 [label="State 34\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 22     | '(' . stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 48 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 49         | . error E\l 58 callfunction: . FVARIABLE '[' callfunc_args ']'\l 59             | . error '[' callfunc_args ']'\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 93 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 94              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 95              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 96              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 97              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 98              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 99              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l100              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l101 declaration: . type VAR DECLARE expr\l102            | . type VAR DECLARE vector\l103            | . type VAR DECLARE matrix\l104 assignment: . VARIABLE ASSIGN expr\l105           | . VVARIABLE ASSIGN vector\l106           | . MVARIABLE ASSIGN matrix\l107 print: . PRINT '(' expr ')'\l108      | . PRINT '(' VVARIABLE ')'\l109      | . PRINT '(' MVARIABLE ')'\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l123     | '(' . expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l127 type: . INT\l128     | . CINT\l129     | . VINT\l130     | . MINT\l131     | . CVINT\l132     | . CMINT\l133     | . BOOLEAN\l134     | . CBOOLEAN\l135     | . VBOOLEAN\l136     | . MBOOLEAN\l137     | . CVBOOLEAN\l138     | . CMBOOLEAN\l139 const: . INTEGER\l140      | . BOOL\l"]
  34 -> 84 [style=dotted]
  34 -> 5 [style=solid label="BOOL"]
  34 -> 6 [style=solid label="INTEGER"]
  34 -> 7 [style=solid label="VARIABLE"]
  34 -> 8 [style=solid label="VVARIABLE"]
  34 -> 9 [style=solid label="MVARIABLE"]
  34 -> 10 [style=solid label="FVARIABLE"]
  34 -> 11 [style=solid label="CINT"]
  34 -> 12 [style=solid label="VINT"]
  34 -> 13 [style=solid label="MINT"]
  34 -> 14 [style=solid label="INT"]
  34 -> 15 [style=solid label="CVINT"]
  34 -> 16 [style=solid label="CMINT"]
  34 -> 17 [style=solid label="BOOLEAN"]
  34 -> 18 [style=solid label="CBOOLEAN"]
  34 -> 19 [style=solid label="VBOOLEAN"]
  34 -> 20 [style=solid label="MBOOLEAN"]
  34 -> 21 [style=solid label="CVBOOLEAN"]
  34 -> 22 [style=solid label="CMBOOLEAN"]
  34 -> 23 [style=solid label="NEWLINE"]
  34 -> 24 [style=solid label="PRINT"]
  34 -> 25 [style=solid label="IF"]
  34 -> 26 [style=solid label="FORR"]
  34 -> 27 [style=solid label="MOVE"]
  34 -> 28 [style=solid label="RIGHT"]
  34 -> 29 [style=solid label="LEFT"]
  34 -> 30 [style=solid label="ROBEX"]
  34 -> 31 [style=solid label="WALL"]
  34 -> 32 [style=solid label="'-'"]
  34 -> 33 [style=solid label="'!'"]
  34 -> 34 [style=solid label="'('"]
  34 -> 35 [style=solid label="'['"]
  34 -> 36 [style=solid label="'{'"]
  34 -> 85 [style=dashed label="stmts"]
  34 -> 38 [style=dashed label="stmt"]
  34 -> 39 [style=dashed label="robotactions"]
  34 -> 40 [style=dashed label="robotmove"]
  34 -> 41 [style=dashed label="robotright"]
  34 -> 42 [style=dashed label="robotleft"]
  34 -> 43 [style=dashed label="robotwall"]
  34 -> 44 [style=dashed label="robotexit"]
  34 -> 45 [style=dashed label="iff"]
  34 -> 46 [style=dashed label="forr"]
  34 -> 47 [style=dashed label="function"]
  34 -> 48 [style=dashed label="callfunction"]
  34 -> 49 [style=dashed label="matrix"]
  34 -> 50 [style=dashed label="vector"]
  34 -> 51 [style=dashed label="vmdeclaration"]
  34 -> 52 [style=dashed label="declaration"]
  34 -> 53 [style=dashed label="assignment"]
  34 -> 54 [style=dashed label="print"]
  34 -> 86 [style=dashed label="expr"]
  34 -> 56 [style=dashed label="type"]
  34 -> 57 [style=dashed label="const"]
  35 [label="State 35\n\l 41 return_func: . type VAR\l 42            | . return_func ',' type VAR\l 43            | . return_func error\l 48 function: '[' . return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l127 type: . INT\l128     | . CINT\l129     | . VINT\l130     | . MINT\l131     | . CVINT\l132     | . CMINT\l133     | . BOOLEAN\l134     | . CBOOLEAN\l135     | . VBOOLEAN\l136     | . MBOOLEAN\l137     | . CVBOOLEAN\l138     | . CMBOOLEAN\l"]
  35 -> 11 [style=solid label="CINT"]
  35 -> 12 [style=solid label="VINT"]
  35 -> 13 [style=solid label="MINT"]
  35 -> 14 [style=solid label="INT"]
  35 -> 15 [style=solid label="CVINT"]
  35 -> 16 [style=solid label="CMINT"]
  35 -> 17 [style=solid label="BOOLEAN"]
  35 -> 18 [style=solid label="CBOOLEAN"]
  35 -> 19 [style=solid label="VBOOLEAN"]
  35 -> 20 [style=solid label="MBOOLEAN"]
  35 -> 21 [style=solid label="CVBOOLEAN"]
  35 -> 22 [style=solid label="CMBOOLEAN"]
  35 -> 87 [style=dashed label="return_func"]
  35 -> 88 [style=dashed label="type"]
  36 [label="State 36\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 60 matrix: '{' . listexprs '}'\l 76 listexprs: . vector ',' vector\l 77          | . listexprs ',' vector\l 78          | . listexprs error\l 79 vector: . '{' exprs '}'\l 79       | '{' . exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 90 exprs: . expr ',' expr\l 91      | . exprs ',' expr\l 92      | . exprs error\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  36 -> 89 [style=dotted]
  36 -> 5 [style=solid label="BOOL"]
  36 -> 6 [style=solid label="INTEGER"]
  36 -> 59 [style=solid label="VARIABLE"]
  36 -> 60 [style=solid label="VVARIABLE"]
  36 -> 90 [style=solid label="MVARIABLE"]
  36 -> 27 [style=solid label="MOVE"]
  36 -> 30 [style=solid label="ROBEX"]
  36 -> 31 [style=solid label="WALL"]
  36 -> 32 [style=solid label="'-'"]
  36 -> 33 [style=solid label="'!'"]
  36 -> 64 [style=solid label="'('"]
  36 -> 91 [style=solid label="'{'"]
  36 -> 40 [style=dashed label="robotmove"]
  36 -> 43 [style=dashed label="robotwall"]
  36 -> 44 [style=dashed label="robotexit"]
  36 -> 92 [style=dashed label="listexprs"]
  36 -> 93 [style=dashed label="vector"]
  36 -> 94 [style=dashed label="exprs"]
  36 -> 95 [style=dashed label="expr"]
  36 -> 57 [style=dashed label="const"]
  37 [label="State 37\n\l  2 func: func stmts .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 48 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 49         | . error E\l 58 callfunction: . FVARIABLE '[' callfunc_args ']'\l 59             | . error '[' callfunc_args ']'\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 93 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 94              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 95              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 96              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 97              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 98              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 99              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l100              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l101 declaration: . type VAR DECLARE expr\l102            | . type VAR DECLARE vector\l103            | . type VAR DECLARE matrix\l104 assignment: . VARIABLE ASSIGN expr\l105           | . VVARIABLE ASSIGN vector\l106           | . MVARIABLE ASSIGN matrix\l107 print: . PRINT '(' expr ')'\l108      | . PRINT '(' VVARIABLE ')'\l109      | . PRINT '(' MVARIABLE ')'\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l127 type: . INT\l128     | . CINT\l129     | . VINT\l130     | . MINT\l131     | . CVINT\l132     | . CMINT\l133     | . BOOLEAN\l134     | . CBOOLEAN\l135     | . VBOOLEAN\l136     | . MBOOLEAN\l137     | . CVBOOLEAN\l138     | . CMBOOLEAN\l139 const: . INTEGER\l140      | . BOOL\l"]
  37 -> 96 [style=dotted]
  37 -> 5 [style=solid label="BOOL"]
  37 -> 6 [style=solid label="INTEGER"]
  37 -> 7 [style=solid label="VARIABLE"]
  37 -> 8 [style=solid label="VVARIABLE"]
  37 -> 9 [style=solid label="MVARIABLE"]
  37 -> 10 [style=solid label="FVARIABLE"]
  37 -> 11 [style=solid label="CINT"]
  37 -> 12 [style=solid label="VINT"]
  37 -> 13 [style=solid label="MINT"]
  37 -> 14 [style=solid label="INT"]
  37 -> 15 [style=solid label="CVINT"]
  37 -> 16 [style=solid label="CMINT"]
  37 -> 17 [style=solid label="BOOLEAN"]
  37 -> 18 [style=solid label="CBOOLEAN"]
  37 -> 19 [style=solid label="VBOOLEAN"]
  37 -> 20 [style=solid label="MBOOLEAN"]
  37 -> 21 [style=solid label="CVBOOLEAN"]
  37 -> 22 [style=solid label="CMBOOLEAN"]
  37 -> 23 [style=solid label="NEWLINE"]
  37 -> 24 [style=solid label="PRINT"]
  37 -> 25 [style=solid label="IF"]
  37 -> 26 [style=solid label="FORR"]
  37 -> 27 [style=solid label="MOVE"]
  37 -> 28 [style=solid label="RIGHT"]
  37 -> 29 [style=solid label="LEFT"]
  37 -> 30 [style=solid label="ROBEX"]
  37 -> 31 [style=solid label="WALL"]
  37 -> 32 [style=solid label="'-'"]
  37 -> 33 [style=solid label="'!'"]
  37 -> 34 [style=solid label="'('"]
  37 -> 35 [style=solid label="'['"]
  37 -> 36 [style=solid label="'{'"]
  37 -> 97 [style=dashed label="stmt"]
  37 -> 39 [style=dashed label="robotactions"]
  37 -> 40 [style=dashed label="robotmove"]
  37 -> 41 [style=dashed label="robotright"]
  37 -> 42 [style=dashed label="robotleft"]
  37 -> 43 [style=dashed label="robotwall"]
  37 -> 44 [style=dashed label="robotexit"]
  37 -> 45 [style=dashed label="iff"]
  37 -> 46 [style=dashed label="forr"]
  37 -> 47 [style=dashed label="function"]
  37 -> 48 [style=dashed label="callfunction"]
  37 -> 49 [style=dashed label="matrix"]
  37 -> 50 [style=dashed label="vector"]
  37 -> 51 [style=dashed label="vmdeclaration"]
  37 -> 52 [style=dashed label="declaration"]
  37 -> 53 [style=dashed label="assignment"]
  37 -> 54 [style=dashed label="print"]
  37 -> 55 [style=dashed label="expr"]
  37 -> 56 [style=dashed label="type"]
  37 -> 57 [style=dashed label="const"]
  37 -> "37R2d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "37R2d" [label="R2", fillcolor=5, shape=diamond, style=filled]
  37 -> "37R2" [label="[$end]", style=solid]
 "37R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  38 [label="State 38\n\l  5 stmts: stmt .\l"]
  38 -> "38R5" [style=solid]
 "38R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  39 [label="State 39\n\l 21 stmt: robotactions . NEWLINE\l"]
  39 -> 98 [style=solid label="NEWLINE"]
  40 [label="State 40\n\l112 expr: robotmove .\l"]
  40 -> "40R112" [style=solid]
 "40R112" [label="R112", fillcolor=3, shape=diamond, style=filled]
  41 [label="State 41\n\l 24 robotactions: robotright .\l"]
  41 -> "41R24" [style=solid]
 "41R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  42 [label="State 42\n\l 25 robotactions: robotleft .\l"]
  42 -> "42R25" [style=solid]
 "42R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  43 [label="State 43\n\l113 expr: robotwall .\l"]
  43 -> "43R113" [style=solid]
 "43R113" [label="R113", fillcolor=3, shape=diamond, style=filled]
  44 [label="State 44\n\l111 expr: robotexit .\l"]
  44 -> "44R111" [style=solid]
 "44R111" [label="R111", fillcolor=3, shape=diamond, style=filled]
  45 [label="State 45\n\l 17 stmt: iff . NEWLINE\l"]
  45 -> 99 [style=solid label="NEWLINE"]
  46 [label="State 46\n\l 18 stmt: forr . NEWLINE\l"]
  46 -> 100 [style=solid label="NEWLINE"]
  47 [label="State 47\n\l 19 stmt: function . NEWLINE\l"]
  47 -> 101 [style=solid label="NEWLINE"]
  48 [label="State 48\n\l 20 stmt: callfunction . NEWLINE\l"]
  48 -> 102 [style=solid label="NEWLINE"]
  49 [label="State 49\n\l 12 stmt: matrix . NEWLINE\l 65 matrix: matrix . '*' matrix\l 66       | matrix . ELEMMULT matrix\l 67       | matrix . '\\''\l 68       | matrix . RIGHTSHIFT\l 69       | matrix . LEFTSHIFT\l 71       | matrix . ELEMMULT vector\l 72       | matrix . ELEMMULT expr\l"]
  49 -> 103 [style=solid label="NEWLINE"]
  49 -> 104 [style=solid label="ELEMMULT"]
  49 -> 105 [style=solid label="'\\''"]
  49 -> 106 [style=solid label="LEFTSHIFT"]
  49 -> 107 [style=solid label="RIGHTSHIFT"]
  49 -> 108 [style=solid label="'*'"]
  50 [label="State 50\n\l 11 stmt: vector . NEWLINE\l 70 matrix: vector . '\\''\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l"]
  50 -> 109 [style=solid label="NEWLINE"]
  50 -> 110 [style=solid label="ELEMMULT"]
  50 -> 111 [style=solid label="'\\''"]
  50 -> 112 [style=solid label="LEFTSHIFT"]
  50 -> 113 [style=solid label="RIGHTSHIFT"]
  51 [label="State 51\n\l 14 stmt: vmdeclaration . NEWLINE\l"]
  51 -> 114 [style=solid label="NEWLINE"]
  52 [label="State 52\n\l 15 stmt: declaration . NEWLINE\l"]
  52 -> 115 [style=solid label="NEWLINE"]
  53 [label="State 53\n\l 16 stmt: assignment . NEWLINE\l"]
  53 -> 116 [style=solid label="NEWLINE"]
  54 [label="State 54\n\l 13 stmt: print . NEWLINE\l"]
  54 -> 117 [style=solid label="NEWLINE"]
  55 [label="State 55\n\l 10 stmt: expr . NEWLINE\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  55 -> 118 [style=solid label="NEWLINE"]
  55 -> 119 [style=solid label="CONJUNCTION"]
  55 -> 120 [style=solid label="'<'"]
  55 -> 121 [style=solid label="'>'"]
  55 -> 122 [style=solid label="'+'"]
  55 -> 123 [style=solid label="'-'"]
  55 -> 124 [style=solid label="'/'"]
  56 [label="State 56\n\l101 declaration: type . VAR DECLARE expr\l102            | type . VAR DECLARE vector\l103            | type . VAR DECLARE matrix\l"]
  56 -> 125 [style=solid label="VAR"]
  57 [label="State 57\n\l110 expr: const .\l"]
  57 -> "57R110" [style=solid]
 "57R110" [label="R110", fillcolor=3, shape=diamond, style=filled]
  58 [label="State 58\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 73       | error . matrix\l 74       | . error vector\l 74       | error . vector\l 75       | . error expr\l 75       | error . expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 88       | error . vector\l 89       | . error expr\l 89       | error . expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l126     | error . expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  58 -> 58 [style=dotted]
  58 -> 5 [style=solid label="BOOL"]
  58 -> 6 [style=solid label="INTEGER"]
  58 -> 59 [style=solid label="VARIABLE"]
  58 -> 60 [style=solid label="VVARIABLE"]
  58 -> 61 [style=solid label="MVARIABLE"]
  58 -> 27 [style=solid label="MOVE"]
  58 -> 30 [style=solid label="ROBEX"]
  58 -> 31 [style=solid label="WALL"]
  58 -> 32 [style=solid label="'-'"]
  58 -> 33 [style=solid label="'!'"]
  58 -> 64 [style=solid label="'('"]
  58 -> 36 [style=solid label="'{'"]
  58 -> 40 [style=dashed label="robotmove"]
  58 -> 43 [style=dashed label="robotwall"]
  58 -> 44 [style=dashed label="robotexit"]
  58 -> 66 [style=dashed label="matrix"]
  58 -> 67 [style=dashed label="vector"]
  58 -> 68 [style=dashed label="expr"]
  58 -> 57 [style=dashed label="const"]
  59 [label="State 59\n\l114 expr: VARIABLE .\l"]
  59 -> "59R114" [style=solid]
 "59R114" [label="R114", fillcolor=3, shape=diamond, style=filled]
  60 [label="State 60\n\l 80 vector: VVARIABLE . '(' vector ',' '[' ']' ')'\l 83       | VVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l124 expr: VVARIABLE . '(' expr ')'\l"]
  60 -> 126 [style=solid label="'('"]
  60 -> "60R83" [style=solid]
 "60R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  61 [label="State 61\n\l 61 matrix: MVARIABLE . '(' vector ',' '[' ']' ')'\l 62       | MVARIABLE . '(' '[' ']' ',' vector ')'\l 63       | MVARIABLE . '(' matrix ')'\l 64       | MVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 81 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 82       | MVARIABLE . '(' '[' ']' ',' expr ')'\l125 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  61 -> 127 [style=solid label="'('"]
  61 -> "61R64" [style=solid]
 "61R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
  62 [label="State 62\n\l 23 stmt: error NEWLINE .\l"]
  62 -> "62R23" [style=solid]
 "62R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  63 [label="State 63\n\l 49 function: error E .\l"]
  63 -> "63R49" [style=solid]
 "63R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
  64 [label="State 64\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l123     | '(' . expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  64 -> 76 [style=dotted]
  64 -> 5 [style=solid label="BOOL"]
  64 -> 6 [style=solid label="INTEGER"]
  64 -> 59 [style=solid label="VARIABLE"]
  64 -> 77 [style=solid label="VVARIABLE"]
  64 -> 78 [style=solid label="MVARIABLE"]
  64 -> 27 [style=solid label="MOVE"]
  64 -> 30 [style=solid label="ROBEX"]
  64 -> 31 [style=solid label="WALL"]
  64 -> 32 [style=solid label="'-'"]
  64 -> 33 [style=solid label="'!'"]
  64 -> 64 [style=solid label="'('"]
  64 -> 40 [style=dashed label="robotmove"]
  64 -> 43 [style=dashed label="robotwall"]
  64 -> 44 [style=dashed label="robotexit"]
  64 -> 128 [style=dashed label="expr"]
  64 -> 57 [style=dashed label="const"]
  65 [label="State 65\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 50 callfunc_args: . expr\l 51              | . vector\l 52              | . matrix\l 53              | . callfunc_args ',' expr\l 54              | . callfunc_args ',' vector\l 55              | . callfunc_args ',' matrix\l 56              | . callfunc_args error\l 57              | . error\l 59 callfunction: error '[' . callfunc_args ']'\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  65 -> 129 [style=dotted]
  65 -> 5 [style=solid label="BOOL"]
  65 -> 6 [style=solid label="INTEGER"]
  65 -> 59 [style=solid label="VARIABLE"]
  65 -> 60 [style=solid label="VVARIABLE"]
  65 -> 61 [style=solid label="MVARIABLE"]
  65 -> 27 [style=solid label="MOVE"]
  65 -> 30 [style=solid label="ROBEX"]
  65 -> 31 [style=solid label="WALL"]
  65 -> 32 [style=solid label="'-'"]
  65 -> 33 [style=solid label="'!'"]
  65 -> 64 [style=solid label="'('"]
  65 -> 36 [style=solid label="'{'"]
  65 -> 40 [style=dashed label="robotmove"]
  65 -> 43 [style=dashed label="robotwall"]
  65 -> 44 [style=dashed label="robotexit"]
  65 -> 130 [style=dashed label="callfunc_args"]
  65 -> 131 [style=dashed label="matrix"]
  65 -> 132 [style=dashed label="vector"]
  65 -> 133 [style=dashed label="expr"]
  65 -> 57 [style=dashed label="const"]
  66 [label="State 66\n\l 65 matrix: matrix . '*' matrix\l 66       | matrix . ELEMMULT matrix\l 67       | matrix . '\\''\l 68       | matrix . RIGHTSHIFT\l 69       | matrix . LEFTSHIFT\l 71       | matrix . ELEMMULT vector\l 72       | matrix . ELEMMULT expr\l 73       | error matrix .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l"]
  66 -> 104 [style=solid label="ELEMMULT"]
  66 -> 105 [style=solid label="'\\''"]
  66 -> 106 [style=solid label="LEFTSHIFT"]
  66 -> 107 [style=solid label="RIGHTSHIFT"]
  66 -> 108 [style=solid label="'*'"]
  66 -> "66R73d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']", style=solid]
 "66R73d" [label="R73", fillcolor=5, shape=diamond, style=filled]
  66 -> "66R73" [style=solid]
 "66R73" [label="R73", fillcolor=3, shape=diamond, style=filled]
  67 [label="State 67\n\l 70 matrix: vector . '\\''\l 74       | error vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l 88       | error vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l"]
  67 -> 110 [style=solid label="ELEMMULT"]
  67 -> 111 [style=solid label="'\\''"]
  67 -> 112 [style=solid label="LEFTSHIFT"]
  67 -> 113 [style=solid label="RIGHTSHIFT"]
  67 -> "67R74d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "67R74d" [label="R74", fillcolor=5, shape=diamond, style=filled]
  67 -> "67R74" [style=solid]
 "67R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  67 -> "67R88d" [label="[error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']", style=solid]
 "67R88d" [label="R88", fillcolor=5, shape=diamond, style=filled]
  68 [label="State 68\n\l 75 matrix: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 89 vector: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l126     | error expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']']\l"]
  68 -> 119 [style=solid label="CONJUNCTION"]
  68 -> 120 [style=solid label="'<'"]
  68 -> 121 [style=solid label="'>'"]
  68 -> 122 [style=solid label="'+'"]
  68 -> 123 [style=solid label="'-'"]
  68 -> 124 [style=solid label="'/'"]
  68 -> "68R75" [style=solid]
 "68R75" [label="R75", fillcolor=3, shape=diamond, style=filled]
  68 -> "68R89d" [label="[error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']", style=solid]
 "68R89d" [label="R89", fillcolor=5, shape=diamond, style=filled]
  68 -> "68R126d" [label="[error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']']", style=solid]
 "68R126d" [label="R126", fillcolor=5, shape=diamond, style=filled]
  69 [label="State 69\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l104 assignment: VARIABLE ASSIGN . expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  69 -> 76 [style=dotted]
  69 -> 5 [style=solid label="BOOL"]
  69 -> 6 [style=solid label="INTEGER"]
  69 -> 59 [style=solid label="VARIABLE"]
  69 -> 77 [style=solid label="VVARIABLE"]
  69 -> 78 [style=solid label="MVARIABLE"]
  69 -> 27 [style=solid label="MOVE"]
  69 -> 30 [style=solid label="ROBEX"]
  69 -> 31 [style=solid label="WALL"]
  69 -> 32 [style=solid label="'-'"]
  69 -> 33 [style=solid label="'!'"]
  69 -> 64 [style=solid label="'('"]
  69 -> 40 [style=dashed label="robotmove"]
  69 -> 43 [style=dashed label="robotwall"]
  69 -> 44 [style=dashed label="robotexit"]
  69 -> 134 [style=dashed label="expr"]
  69 -> 57 [style=dashed label="const"]
  70 [label="State 70\n\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l105 assignment: VVARIABLE ASSIGN . vector\l"]
  70 -> 135 [style=dotted]
  70 -> 136 [style=solid label="VVARIABLE"]
  70 -> 137 [style=solid label="MVARIABLE"]
  70 -> 91 [style=solid label="'{'"]
  70 -> 138 [style=dashed label="vector"]
  71 [label="State 71\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 80       | VVARIABLE '(' . vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 93 vmdeclaration: VVARIABLE '(' . expr ')' ASSIGN expr\l 94              | VVARIABLE '(' . vector ',' '[' ']' ')' ASSIGN vector\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l124     | VVARIABLE '(' . expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  71 -> 89 [style=dotted]
  71 -> 5 [style=solid label="BOOL"]
  71 -> 6 [style=solid label="INTEGER"]
  71 -> 59 [style=solid label="VARIABLE"]
  71 -> 60 [style=solid label="VVARIABLE"]
  71 -> 90 [style=solid label="MVARIABLE"]
  71 -> 27 [style=solid label="MOVE"]
  71 -> 30 [style=solid label="ROBEX"]
  71 -> 31 [style=solid label="WALL"]
  71 -> 32 [style=solid label="'-'"]
  71 -> 33 [style=solid label="'!'"]
  71 -> 64 [style=solid label="'('"]
  71 -> 91 [style=solid label="'{'"]
  71 -> 40 [style=dashed label="robotmove"]
  71 -> 43 [style=dashed label="robotwall"]
  71 -> 44 [style=dashed label="robotexit"]
  71 -> 139 [style=dashed label="vector"]
  71 -> 140 [style=dashed label="expr"]
  71 -> 57 [style=dashed label="const"]
  72 [label="State 72\n\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l106 assignment: MVARIABLE ASSIGN . matrix\l"]
  72 -> 141 [style=dotted]
  72 -> 136 [style=solid label="VVARIABLE"]
  72 -> 142 [style=solid label="MVARIABLE"]
  72 -> 36 [style=solid label="'{'"]
  72 -> 143 [style=dashed label="matrix"]
  72 -> 144 [style=dashed label="vector"]
  73 [label="State 73\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 61       | MVARIABLE '(' . vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 62       | MVARIABLE '(' . '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 63       | MVARIABLE '(' . matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 81       | MVARIABLE '(' . expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 82       | MVARIABLE '(' . '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 95 vmdeclaration: MVARIABLE '(' . expr ',' expr ')' ASSIGN expr\l 96              | MVARIABLE '(' . expr ',' '[' ']' ')' ASSIGN vector\l 97              | MVARIABLE '(' . '[' ']' ',' expr ')' ASSIGN vector\l 98              | MVARIABLE '(' . vector ',' '[' ']' ')' ASSIGN matrix\l 99              | MVARIABLE '(' . '[' ']' ',' vector ')' ASSIGN matrix\l100              | MVARIABLE '(' . matrix ')' ASSIGN matrix\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l125     | MVARIABLE '(' . expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  73 -> 58 [style=dotted]
  73 -> 5 [style=solid label="BOOL"]
  73 -> 6 [style=solid label="INTEGER"]
  73 -> 59 [style=solid label="VARIABLE"]
  73 -> 60 [style=solid label="VVARIABLE"]
  73 -> 61 [style=solid label="MVARIABLE"]
  73 -> 27 [style=solid label="MOVE"]
  73 -> 30 [style=solid label="ROBEX"]
  73 -> 31 [style=solid label="WALL"]
  73 -> 32 [style=solid label="'-'"]
  73 -> 33 [style=solid label="'!'"]
  73 -> 64 [style=solid label="'('"]
  73 -> 145 [style=solid label="'['"]
  73 -> 36 [style=solid label="'{'"]
  73 -> 40 [style=dashed label="robotmove"]
  73 -> 43 [style=dashed label="robotwall"]
  73 -> 44 [style=dashed label="robotexit"]
  73 -> 146 [style=dashed label="matrix"]
  73 -> 147 [style=dashed label="vector"]
  73 -> 148 [style=dashed label="expr"]
  73 -> 57 [style=dashed label="const"]
  74 [label="State 74\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 50 callfunc_args: . expr\l 51              | . vector\l 52              | . matrix\l 53              | . callfunc_args ',' expr\l 54              | . callfunc_args ',' vector\l 55              | . callfunc_args ',' matrix\l 56              | . callfunc_args error\l 57              | . error\l 58 callfunction: FVARIABLE '[' . callfunc_args ']'\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  74 -> 129 [style=dotted]
  74 -> 5 [style=solid label="BOOL"]
  74 -> 6 [style=solid label="INTEGER"]
  74 -> 59 [style=solid label="VARIABLE"]
  74 -> 60 [style=solid label="VVARIABLE"]
  74 -> 61 [style=solid label="MVARIABLE"]
  74 -> 27 [style=solid label="MOVE"]
  74 -> 30 [style=solid label="ROBEX"]
  74 -> 31 [style=solid label="WALL"]
  74 -> 32 [style=solid label="'-'"]
  74 -> 33 [style=solid label="'!'"]
  74 -> 64 [style=solid label="'('"]
  74 -> 36 [style=solid label="'{'"]
  74 -> 40 [style=dashed label="robotmove"]
  74 -> 43 [style=dashed label="robotwall"]
  74 -> 44 [style=dashed label="robotexit"]
  74 -> 149 [style=dashed label="callfunc_args"]
  74 -> 131 [style=dashed label="matrix"]
  74 -> 132 [style=dashed label="vector"]
  74 -> 133 [style=dashed label="expr"]
  74 -> 57 [style=dashed label="const"]
  75 [label="State 75\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l107 print: PRINT '(' . expr ')'\l108      | PRINT '(' . VVARIABLE ')'\l109      | PRINT '(' . MVARIABLE ')'\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  75 -> 76 [style=dotted]
  75 -> 5 [style=solid label="BOOL"]
  75 -> 6 [style=solid label="INTEGER"]
  75 -> 59 [style=solid label="VARIABLE"]
  75 -> 150 [style=solid label="VVARIABLE"]
  75 -> 151 [style=solid label="MVARIABLE"]
  75 -> 27 [style=solid label="MOVE"]
  75 -> 30 [style=solid label="ROBEX"]
  75 -> 31 [style=solid label="WALL"]
  75 -> 32 [style=solid label="'-'"]
  75 -> 33 [style=solid label="'!'"]
  75 -> 64 [style=solid label="'('"]
  75 -> 40 [style=dashed label="robotmove"]
  75 -> 43 [style=dashed label="robotwall"]
  75 -> 44 [style=dashed label="robotexit"]
  75 -> 152 [style=dashed label="expr"]
  75 -> 57 [style=dashed label="const"]
  76 [label="State 76\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l126     | error . expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  76 -> 76 [style=dotted]
  76 -> 5 [style=solid label="BOOL"]
  76 -> 6 [style=solid label="INTEGER"]
  76 -> 59 [style=solid label="VARIABLE"]
  76 -> 77 [style=solid label="VVARIABLE"]
  76 -> 78 [style=solid label="MVARIABLE"]
  76 -> 27 [style=solid label="MOVE"]
  76 -> 30 [style=solid label="ROBEX"]
  76 -> 31 [style=solid label="WALL"]
  76 -> 32 [style=solid label="'-'"]
  76 -> 33 [style=solid label="'!'"]
  76 -> 64 [style=solid label="'('"]
  76 -> 40 [style=dashed label="robotmove"]
  76 -> 43 [style=dashed label="robotwall"]
  76 -> 44 [style=dashed label="robotexit"]
  76 -> 153 [style=dashed label="expr"]
  76 -> 57 [style=dashed label="const"]
  77 [label="State 77\n\l124 expr: VVARIABLE . '(' expr ')'\l"]
  77 -> 154 [style=solid label="'('"]
  78 [label="State 78\n\l125 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  78 -> 155 [style=solid label="'('"]
  79 [label="State 79\n\l 31 iff: IF expr . NEWLINE begif stmts endif\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  79 -> 156 [style=solid label="NEWLINE"]
  79 -> 119 [style=solid label="CONJUNCTION"]
  79 -> 120 [style=solid label="'<'"]
  79 -> 121 [style=solid label="'>'"]
  79 -> 122 [style=solid label="'+'"]
  79 -> 123 [style=solid label="'-'"]
  79 -> 124 [style=solid label="'/'"]
  80 [label="State 80\n\l 40 forr: FORR declaration . DOUBLEDOT expr NEWLINE begfor stmts endfor\l"]
  80 -> 157 [style=solid label="DOUBLEDOT"]
  81 [label="State 81\n\l 26 robotmove: . MOVE '(' expr ')'\l 26          | MOVE '(' . expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  81 -> 76 [style=dotted]
  81 -> 5 [style=solid label="BOOL"]
  81 -> 6 [style=solid label="INTEGER"]
  81 -> 59 [style=solid label="VARIABLE"]
  81 -> 77 [style=solid label="VVARIABLE"]
  81 -> 78 [style=solid label="MVARIABLE"]
  81 -> 27 [style=solid label="MOVE"]
  81 -> 30 [style=solid label="ROBEX"]
  81 -> 31 [style=solid label="WALL"]
  81 -> 32 [style=solid label="'-'"]
  81 -> 33 [style=solid label="'!'"]
  81 -> 64 [style=solid label="'('"]
  81 -> 40 [style=dashed label="robotmove"]
  81 -> 43 [style=dashed label="robotwall"]
  81 -> 44 [style=dashed label="robotexit"]
  81 -> 158 [style=dashed label="expr"]
  81 -> 57 [style=dashed label="const"]
  82 [label="State 82\n\l115 expr: '-' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l116     | expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  82 -> 119 [style=solid label="CONJUNCTION"]
  82 -> "82R115d" [label="[CONJUNCTION]", style=solid]
 "82R115d" [label="R115", fillcolor=5, shape=diamond, style=filled]
  82 -> "82R115" [style=solid]
 "82R115" [label="R115", fillcolor=3, shape=diamond, style=filled]
  83 [label="State 83\n\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l121     | '!' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l122     | expr . CONJUNCTION expr\l"]
  83 -> 119 [style=solid label="CONJUNCTION"]
  83 -> "83R121d" [label="[CONJUNCTION]", style=solid]
 "83R121d" [label="R121", fillcolor=5, shape=diamond, style=filled]
  83 -> "83R121" [style=solid]
 "83R121" [label="R121", fillcolor=3, shape=diamond, style=filled]
  84 [label="State 84\n\l  8 stmts: error .  [error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, E, MOVE, RIGHT, LEFT, ROBEX, WALL, ENDIF, ENDFOR, '-', '!', '(', ')', '[', '{']\l 23 stmt: error . NEWLINE\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 49 function: error . E\l 59 callfunction: error . '[' callfunc_args ']'\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 73       | error . matrix\l 74       | . error vector\l 74       | error . vector\l 75       | . error expr\l 75       | error . expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 88       | error . vector\l 89       | . error expr\l 89       | error . expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l126     | error . expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  84 -> 58 [style=dotted]
  84 -> 5 [style=solid label="BOOL"]
  84 -> 6 [style=solid label="INTEGER"]
  84 -> 59 [style=solid label="VARIABLE"]
  84 -> 60 [style=solid label="VVARIABLE"]
  84 -> 61 [style=solid label="MVARIABLE"]
  84 -> 62 [style=solid label="NEWLINE"]
  84 -> 63 [style=solid label="E"]
  84 -> 27 [style=solid label="MOVE"]
  84 -> 30 [style=solid label="ROBEX"]
  84 -> 31 [style=solid label="WALL"]
  84 -> 32 [style=solid label="'-'"]
  84 -> 33 [style=solid label="'!'"]
  84 -> 64 [style=solid label="'('"]
  84 -> 65 [style=solid label="'['"]
  84 -> 36 [style=solid label="'{'"]
  84 -> 40 [style=dashed label="robotmove"]
  84 -> 43 [style=dashed label="robotwall"]
  84 -> 44 [style=dashed label="robotexit"]
  84 -> 66 [style=dashed label="matrix"]
  84 -> 67 [style=dashed label="vector"]
  84 -> 68 [style=dashed label="expr"]
  84 -> 57 [style=dashed label="const"]
  84 -> "84R8d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, NEWLINE, E, MOVE, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "84R8d" [label="R8", fillcolor=5, shape=diamond, style=filled]
  84 -> "84R8" [label="[FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, PRINT, IF, FORR, RIGHT, LEFT, ENDIF, ENDFOR, ')']", style=solid]
 "84R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  85 [label="State 85\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 22     | '(' stmts . ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 48 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 49         | . error E\l 58 callfunction: . FVARIABLE '[' callfunc_args ']'\l 59             | . error '[' callfunc_args ']'\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 93 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 94              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 95              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 96              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 97              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 98              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 99              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l100              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l101 declaration: . type VAR DECLARE expr\l102            | . type VAR DECLARE vector\l103            | . type VAR DECLARE matrix\l104 assignment: . VARIABLE ASSIGN expr\l105           | . VVARIABLE ASSIGN vector\l106           | . MVARIABLE ASSIGN matrix\l107 print: . PRINT '(' expr ')'\l108      | . PRINT '(' VVARIABLE ')'\l109      | . PRINT '(' MVARIABLE ')'\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l127 type: . INT\l128     | . CINT\l129     | . VINT\l130     | . MINT\l131     | . CVINT\l132     | . CMINT\l133     | . BOOLEAN\l134     | . CBOOLEAN\l135     | . VBOOLEAN\l136     | . MBOOLEAN\l137     | . CVBOOLEAN\l138     | . CMBOOLEAN\l139 const: . INTEGER\l140      | . BOOL\l"]
  85 -> 96 [style=dotted]
  85 -> 5 [style=solid label="BOOL"]
  85 -> 6 [style=solid label="INTEGER"]
  85 -> 7 [style=solid label="VARIABLE"]
  85 -> 8 [style=solid label="VVARIABLE"]
  85 -> 9 [style=solid label="MVARIABLE"]
  85 -> 10 [style=solid label="FVARIABLE"]
  85 -> 11 [style=solid label="CINT"]
  85 -> 12 [style=solid label="VINT"]
  85 -> 13 [style=solid label="MINT"]
  85 -> 14 [style=solid label="INT"]
  85 -> 15 [style=solid label="CVINT"]
  85 -> 16 [style=solid label="CMINT"]
  85 -> 17 [style=solid label="BOOLEAN"]
  85 -> 18 [style=solid label="CBOOLEAN"]
  85 -> 19 [style=solid label="VBOOLEAN"]
  85 -> 20 [style=solid label="MBOOLEAN"]
  85 -> 21 [style=solid label="CVBOOLEAN"]
  85 -> 22 [style=solid label="CMBOOLEAN"]
  85 -> 23 [style=solid label="NEWLINE"]
  85 -> 24 [style=solid label="PRINT"]
  85 -> 25 [style=solid label="IF"]
  85 -> 26 [style=solid label="FORR"]
  85 -> 27 [style=solid label="MOVE"]
  85 -> 28 [style=solid label="RIGHT"]
  85 -> 29 [style=solid label="LEFT"]
  85 -> 30 [style=solid label="ROBEX"]
  85 -> 31 [style=solid label="WALL"]
  85 -> 32 [style=solid label="'-'"]
  85 -> 33 [style=solid label="'!'"]
  85 -> 34 [style=solid label="'('"]
  85 -> 159 [style=solid label="')'"]
  85 -> 35 [style=solid label="'['"]
  85 -> 36 [style=solid label="'{'"]
  85 -> 97 [style=dashed label="stmt"]
  85 -> 39 [style=dashed label="robotactions"]
  85 -> 40 [style=dashed label="robotmove"]
  85 -> 41 [style=dashed label="robotright"]
  85 -> 42 [style=dashed label="robotleft"]
  85 -> 43 [style=dashed label="robotwall"]
  85 -> 44 [style=dashed label="robotexit"]
  85 -> 45 [style=dashed label="iff"]
  85 -> 46 [style=dashed label="forr"]
  85 -> 47 [style=dashed label="function"]
  85 -> 48 [style=dashed label="callfunction"]
  85 -> 49 [style=dashed label="matrix"]
  85 -> 50 [style=dashed label="vector"]
  85 -> 51 [style=dashed label="vmdeclaration"]
  85 -> 52 [style=dashed label="declaration"]
  85 -> 53 [style=dashed label="assignment"]
  85 -> 54 [style=dashed label="print"]
  85 -> 55 [style=dashed label="expr"]
  85 -> 56 [style=dashed label="type"]
  85 -> 57 [style=dashed label="const"]
  86 [label="State 86\n\l 10 stmt: expr . NEWLINE\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l123     | '(' expr . ')'\l"]
  86 -> 118 [style=solid label="NEWLINE"]
  86 -> 119 [style=solid label="CONJUNCTION"]
  86 -> 120 [style=solid label="'<'"]
  86 -> 121 [style=solid label="'>'"]
  86 -> 122 [style=solid label="'+'"]
  86 -> 123 [style=solid label="'-'"]
  86 -> 124 [style=solid label="'/'"]
  86 -> 160 [style=solid label="')'"]
  87 [label="State 87\n\l 42 return_func: return_func . ',' type VAR\l 43            | return_func . error\l 48 function: '[' return_func . ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l"]
  87 -> 161 [style=dotted]
  87 -> 162 [style=solid label="','"]
  87 -> 163 [style=solid label="']'"]
  88 [label="State 88\n\l 41 return_func: type . VAR\l"]
  88 -> 164 [style=solid label="VAR"]
  89 [label="State 89\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 88       | error . vector\l 89       | . error expr\l 89       | error . expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l126     | error . expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  89 -> 89 [style=dotted]
  89 -> 5 [style=solid label="BOOL"]
  89 -> 6 [style=solid label="INTEGER"]
  89 -> 59 [style=solid label="VARIABLE"]
  89 -> 60 [style=solid label="VVARIABLE"]
  89 -> 90 [style=solid label="MVARIABLE"]
  89 -> 27 [style=solid label="MOVE"]
  89 -> 30 [style=solid label="ROBEX"]
  89 -> 31 [style=solid label="WALL"]
  89 -> 32 [style=solid label="'-'"]
  89 -> 33 [style=solid label="'!'"]
  89 -> 64 [style=solid label="'('"]
  89 -> 91 [style=solid label="'{'"]
  89 -> 40 [style=dashed label="robotmove"]
  89 -> 43 [style=dashed label="robotwall"]
  89 -> 44 [style=dashed label="robotexit"]
  89 -> 165 [style=dashed label="vector"]
  89 -> 166 [style=dashed label="expr"]
  89 -> 57 [style=dashed label="const"]
  90 [label="State 90\n\l 81 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 82       | MVARIABLE . '(' '[' ']' ',' expr ')'\l125 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  90 -> 167 [style=solid label="'('"]
  91 [label="State 91\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 79 vector: '{' . exprs '}'\l 90 exprs: . expr ',' expr\l 91      | . exprs ',' expr\l 92      | . exprs error\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  91 -> 76 [style=dotted]
  91 -> 5 [style=solid label="BOOL"]
  91 -> 6 [style=solid label="INTEGER"]
  91 -> 59 [style=solid label="VARIABLE"]
  91 -> 77 [style=solid label="VVARIABLE"]
  91 -> 78 [style=solid label="MVARIABLE"]
  91 -> 27 [style=solid label="MOVE"]
  91 -> 30 [style=solid label="ROBEX"]
  91 -> 31 [style=solid label="WALL"]
  91 -> 32 [style=solid label="'-'"]
  91 -> 33 [style=solid label="'!'"]
  91 -> 64 [style=solid label="'('"]
  91 -> 40 [style=dashed label="robotmove"]
  91 -> 43 [style=dashed label="robotwall"]
  91 -> 44 [style=dashed label="robotexit"]
  91 -> 94 [style=dashed label="exprs"]
  91 -> 95 [style=dashed label="expr"]
  91 -> 57 [style=dashed label="const"]
  92 [label="State 92\n\l 60 matrix: '{' listexprs . '}'\l 77 listexprs: listexprs . ',' vector\l 78          | listexprs . error\l"]
  92 -> 168 [style=dotted]
  92 -> 169 [style=solid label="','"]
  92 -> 170 [style=solid label="'}'"]
  93 [label="State 93\n\l 76 listexprs: vector . ',' vector\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l"]
  93 -> 110 [style=solid label="ELEMMULT"]
  93 -> 112 [style=solid label="LEFTSHIFT"]
  93 -> 113 [style=solid label="RIGHTSHIFT"]
  93 -> 171 [style=solid label="','"]
  94 [label="State 94\n\l 79 vector: '{' exprs . '}'\l 91 exprs: exprs . ',' expr\l 92      | exprs . error\l"]
  94 -> 172 [style=dotted]
  94 -> 173 [style=solid label="','"]
  94 -> 174 [style=solid label="'}'"]
  95 [label="State 95\n\l 90 exprs: expr . ',' expr\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  95 -> 119 [style=solid label="CONJUNCTION"]
  95 -> 175 [style=solid label="','"]
  95 -> 120 [style=solid label="'<'"]
  95 -> 121 [style=solid label="'>'"]
  95 -> 122 [style=solid label="'+'"]
  95 -> 123 [style=solid label="'-'"]
  95 -> 124 [style=solid label="'/'"]
  96 [label="State 96\n\l  7 stmts: stmts error .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, E, MOVE, RIGHT, LEFT, ROBEX, WALL, ENDIF, ENDFOR, '-', '!', '(', ')', '[', '{']\l 23 stmt: error . NEWLINE\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 49 function: error . E\l 59 callfunction: error . '[' callfunc_args ']'\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 73       | error . matrix\l 74       | . error vector\l 74       | error . vector\l 75       | . error expr\l 75       | error . expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 88       | error . vector\l 89       | . error expr\l 89       | error . expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l126     | error . expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  96 -> 58 [style=dotted]
  96 -> 5 [style=solid label="BOOL"]
  96 -> 6 [style=solid label="INTEGER"]
  96 -> 59 [style=solid label="VARIABLE"]
  96 -> 60 [style=solid label="VVARIABLE"]
  96 -> 61 [style=solid label="MVARIABLE"]
  96 -> 62 [style=solid label="NEWLINE"]
  96 -> 63 [style=solid label="E"]
  96 -> 27 [style=solid label="MOVE"]
  96 -> 30 [style=solid label="ROBEX"]
  96 -> 31 [style=solid label="WALL"]
  96 -> 32 [style=solid label="'-'"]
  96 -> 33 [style=solid label="'!'"]
  96 -> 64 [style=solid label="'('"]
  96 -> 65 [style=solid label="'['"]
  96 -> 36 [style=solid label="'{'"]
  96 -> 40 [style=dashed label="robotmove"]
  96 -> 43 [style=dashed label="robotwall"]
  96 -> 44 [style=dashed label="robotexit"]
  96 -> 66 [style=dashed label="matrix"]
  96 -> 67 [style=dashed label="vector"]
  96 -> 68 [style=dashed label="expr"]
  96 -> 57 [style=dashed label="const"]
  96 -> "96R7d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, NEWLINE, E, MOVE, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "96R7d" [label="R7", fillcolor=5, shape=diamond, style=filled]
  96 -> "96R7" [label="[$end, FVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, PRINT, IF, FORR, RIGHT, LEFT, ENDIF, ENDFOR, ')']", style=solid]
 "96R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  97 [label="State 97\n\l  6 stmts: stmts stmt .\l"]
  97 -> "97R6" [style=solid]
 "97R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  98 [label="State 98\n\l 21 stmt: robotactions NEWLINE .\l"]
  98 -> "98R21" [style=solid]
 "98R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  99 [label="State 99\n\l 17 stmt: iff NEWLINE .\l"]
  99 -> "99R17" [style=solid]
 "99R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  100 [label="State 100\n\l 18 stmt: forr NEWLINE .\l"]
  100 -> "100R18" [style=solid]
 "100R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  101 [label="State 101\n\l 19 stmt: function NEWLINE .\l"]
  101 -> "101R19" [style=solid]
 "101R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  102 [label="State 102\n\l 20 stmt: callfunction NEWLINE .\l"]
  102 -> "102R20" [style=solid]
 "102R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  103 [label="State 103\n\l 12 stmt: matrix NEWLINE .\l"]
  103 -> "103R12" [style=solid]
 "103R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  104 [label="State 104\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 66       | matrix ELEMMULT . matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 71       | matrix ELEMMULT . vector\l 72       | . matrix ELEMMULT expr\l 72       | matrix ELEMMULT . expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  104 -> 58 [style=dotted]
  104 -> 5 [style=solid label="BOOL"]
  104 -> 6 [style=solid label="INTEGER"]
  104 -> 59 [style=solid label="VARIABLE"]
  104 -> 60 [style=solid label="VVARIABLE"]
  104 -> 61 [style=solid label="MVARIABLE"]
  104 -> 27 [style=solid label="MOVE"]
  104 -> 30 [style=solid label="ROBEX"]
  104 -> 31 [style=solid label="WALL"]
  104 -> 32 [style=solid label="'-'"]
  104 -> 33 [style=solid label="'!'"]
  104 -> 64 [style=solid label="'('"]
  104 -> 36 [style=solid label="'{'"]
  104 -> 40 [style=dashed label="robotmove"]
  104 -> 43 [style=dashed label="robotwall"]
  104 -> 44 [style=dashed label="robotexit"]
  104 -> 176 [style=dashed label="matrix"]
  104 -> 177 [style=dashed label="vector"]
  104 -> 178 [style=dashed label="expr"]
  104 -> 57 [style=dashed label="const"]
  105 [label="State 105\n\l 67 matrix: matrix '\\'' .\l"]
  105 -> "105R67" [style=solid]
 "105R67" [label="R67", fillcolor=3, shape=diamond, style=filled]
  106 [label="State 106\n\l 69 matrix: matrix LEFTSHIFT .\l"]
  106 -> "106R69" [style=solid]
 "106R69" [label="R69", fillcolor=3, shape=diamond, style=filled]
  107 [label="State 107\n\l 68 matrix: matrix RIGHTSHIFT .\l"]
  107 -> "107R68" [style=solid]
 "107R68" [label="R68", fillcolor=3, shape=diamond, style=filled]
  108 [label="State 108\n\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 65       | matrix '*' . matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l"]
  108 -> 141 [style=dotted]
  108 -> 136 [style=solid label="VVARIABLE"]
  108 -> 142 [style=solid label="MVARIABLE"]
  108 -> 36 [style=solid label="'{'"]
  108 -> 179 [style=dashed label="matrix"]
  108 -> 144 [style=dashed label="vector"]
  109 [label="State 109\n\l 11 stmt: vector NEWLINE .\l"]
  109 -> "109R11" [style=solid]
 "109R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  110 [label="State 110\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 84       | vector ELEMMULT . vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 87       | vector ELEMMULT . expr\l 88       | . error vector\l 89       | . error expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  110 -> 89 [style=dotted]
  110 -> 5 [style=solid label="BOOL"]
  110 -> 6 [style=solid label="INTEGER"]
  110 -> 59 [style=solid label="VARIABLE"]
  110 -> 60 [style=solid label="VVARIABLE"]
  110 -> 90 [style=solid label="MVARIABLE"]
  110 -> 27 [style=solid label="MOVE"]
  110 -> 30 [style=solid label="ROBEX"]
  110 -> 31 [style=solid label="WALL"]
  110 -> 32 [style=solid label="'-'"]
  110 -> 33 [style=solid label="'!'"]
  110 -> 64 [style=solid label="'('"]
  110 -> 91 [style=solid label="'{'"]
  110 -> 40 [style=dashed label="robotmove"]
  110 -> 43 [style=dashed label="robotwall"]
  110 -> 44 [style=dashed label="robotexit"]
  110 -> 180 [style=dashed label="vector"]
  110 -> 181 [style=dashed label="expr"]
  110 -> 57 [style=dashed label="const"]
  111 [label="State 111\n\l 70 matrix: vector '\\'' .\l"]
  111 -> "111R70" [style=solid]
 "111R70" [label="R70", fillcolor=3, shape=diamond, style=filled]
  112 [label="State 112\n\l 86 vector: vector LEFTSHIFT .\l"]
  112 -> "112R86" [style=solid]
 "112R86" [label="R86", fillcolor=3, shape=diamond, style=filled]
  113 [label="State 113\n\l 85 vector: vector RIGHTSHIFT .\l"]
  113 -> "113R85" [style=solid]
 "113R85" [label="R85", fillcolor=3, shape=diamond, style=filled]
  114 [label="State 114\n\l 14 stmt: vmdeclaration NEWLINE .\l"]
  114 -> "114R14" [style=solid]
 "114R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  115 [label="State 115\n\l 15 stmt: declaration NEWLINE .\l"]
  115 -> "115R15" [style=solid]
 "115R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  116 [label="State 116\n\l 16 stmt: assignment NEWLINE .\l"]
  116 -> "116R16" [style=solid]
 "116R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  117 [label="State 117\n\l 13 stmt: print NEWLINE .\l"]
  117 -> "117R13" [style=solid]
 "117R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  118 [label="State 118\n\l 10 stmt: expr NEWLINE .\l"]
  118 -> "118R10" [style=solid]
 "118R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  119 [label="State 119\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l122     | expr CONJUNCTION . expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  119 -> 76 [style=dotted]
  119 -> 5 [style=solid label="BOOL"]
  119 -> 6 [style=solid label="INTEGER"]
  119 -> 59 [style=solid label="VARIABLE"]
  119 -> 77 [style=solid label="VVARIABLE"]
  119 -> 78 [style=solid label="MVARIABLE"]
  119 -> 27 [style=solid label="MOVE"]
  119 -> 30 [style=solid label="ROBEX"]
  119 -> 31 [style=solid label="WALL"]
  119 -> 32 [style=solid label="'-'"]
  119 -> 33 [style=solid label="'!'"]
  119 -> 64 [style=solid label="'('"]
  119 -> 40 [style=dashed label="robotmove"]
  119 -> 43 [style=dashed label="robotwall"]
  119 -> 44 [style=dashed label="robotexit"]
  119 -> 182 [style=dashed label="expr"]
  119 -> 57 [style=dashed label="const"]
  120 [label="State 120\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l119     | expr '<' . expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  120 -> 76 [style=dotted]
  120 -> 5 [style=solid label="BOOL"]
  120 -> 6 [style=solid label="INTEGER"]
  120 -> 59 [style=solid label="VARIABLE"]
  120 -> 77 [style=solid label="VVARIABLE"]
  120 -> 78 [style=solid label="MVARIABLE"]
  120 -> 27 [style=solid label="MOVE"]
  120 -> 30 [style=solid label="ROBEX"]
  120 -> 31 [style=solid label="WALL"]
  120 -> 32 [style=solid label="'-'"]
  120 -> 33 [style=solid label="'!'"]
  120 -> 64 [style=solid label="'('"]
  120 -> 40 [style=dashed label="robotmove"]
  120 -> 43 [style=dashed label="robotwall"]
  120 -> 44 [style=dashed label="robotexit"]
  120 -> 183 [style=dashed label="expr"]
  120 -> 57 [style=dashed label="const"]
  121 [label="State 121\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l120     | expr '>' . expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  121 -> 76 [style=dotted]
  121 -> 5 [style=solid label="BOOL"]
  121 -> 6 [style=solid label="INTEGER"]
  121 -> 59 [style=solid label="VARIABLE"]
  121 -> 77 [style=solid label="VVARIABLE"]
  121 -> 78 [style=solid label="MVARIABLE"]
  121 -> 27 [style=solid label="MOVE"]
  121 -> 30 [style=solid label="ROBEX"]
  121 -> 31 [style=solid label="WALL"]
  121 -> 32 [style=solid label="'-'"]
  121 -> 33 [style=solid label="'!'"]
  121 -> 64 [style=solid label="'('"]
  121 -> 40 [style=dashed label="robotmove"]
  121 -> 43 [style=dashed label="robotwall"]
  121 -> 44 [style=dashed label="robotexit"]
  121 -> 184 [style=dashed label="expr"]
  121 -> 57 [style=dashed label="const"]
  122 [label="State 122\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l116     | expr '+' . expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  122 -> 76 [style=dotted]
  122 -> 5 [style=solid label="BOOL"]
  122 -> 6 [style=solid label="INTEGER"]
  122 -> 59 [style=solid label="VARIABLE"]
  122 -> 77 [style=solid label="VVARIABLE"]
  122 -> 78 [style=solid label="MVARIABLE"]
  122 -> 27 [style=solid label="MOVE"]
  122 -> 30 [style=solid label="ROBEX"]
  122 -> 31 [style=solid label="WALL"]
  122 -> 32 [style=solid label="'-'"]
  122 -> 33 [style=solid label="'!'"]
  122 -> 64 [style=solid label="'('"]
  122 -> 40 [style=dashed label="robotmove"]
  122 -> 43 [style=dashed label="robotwall"]
  122 -> 44 [style=dashed label="robotexit"]
  122 -> 185 [style=dashed label="expr"]
  122 -> 57 [style=dashed label="const"]
  123 [label="State 123\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l117     | expr '-' . expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  123 -> 76 [style=dotted]
  123 -> 5 [style=solid label="BOOL"]
  123 -> 6 [style=solid label="INTEGER"]
  123 -> 59 [style=solid label="VARIABLE"]
  123 -> 77 [style=solid label="VVARIABLE"]
  123 -> 78 [style=solid label="MVARIABLE"]
  123 -> 27 [style=solid label="MOVE"]
  123 -> 30 [style=solid label="ROBEX"]
  123 -> 31 [style=solid label="WALL"]
  123 -> 32 [style=solid label="'-'"]
  123 -> 33 [style=solid label="'!'"]
  123 -> 64 [style=solid label="'('"]
  123 -> 40 [style=dashed label="robotmove"]
  123 -> 43 [style=dashed label="robotwall"]
  123 -> 44 [style=dashed label="robotexit"]
  123 -> 186 [style=dashed label="expr"]
  123 -> 57 [style=dashed label="const"]
  124 [label="State 124\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l118     | expr '/' . expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  124 -> 76 [style=dotted]
  124 -> 5 [style=solid label="BOOL"]
  124 -> 6 [style=solid label="INTEGER"]
  124 -> 59 [style=solid label="VARIABLE"]
  124 -> 77 [style=solid label="VVARIABLE"]
  124 -> 78 [style=solid label="MVARIABLE"]
  124 -> 27 [style=solid label="MOVE"]
  124 -> 30 [style=solid label="ROBEX"]
  124 -> 31 [style=solid label="WALL"]
  124 -> 32 [style=solid label="'-'"]
  124 -> 33 [style=solid label="'!'"]
  124 -> 64 [style=solid label="'('"]
  124 -> 40 [style=dashed label="robotmove"]
  124 -> 43 [style=dashed label="robotwall"]
  124 -> 44 [style=dashed label="robotexit"]
  124 -> 187 [style=dashed label="expr"]
  124 -> 57 [style=dashed label="const"]
  125 [label="State 125\n\l101 declaration: type VAR . DECLARE expr\l102            | type VAR . DECLARE vector\l103            | type VAR . DECLARE matrix\l"]
  125 -> 188 [style=solid label="DECLARE"]
  126 [label="State 126\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 80       | VVARIABLE '(' . vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l124     | VVARIABLE '(' . expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  126 -> 89 [style=dotted]
  126 -> 5 [style=solid label="BOOL"]
  126 -> 6 [style=solid label="INTEGER"]
  126 -> 59 [style=solid label="VARIABLE"]
  126 -> 60 [style=solid label="VVARIABLE"]
  126 -> 90 [style=solid label="MVARIABLE"]
  126 -> 27 [style=solid label="MOVE"]
  126 -> 30 [style=solid label="ROBEX"]
  126 -> 31 [style=solid label="WALL"]
  126 -> 32 [style=solid label="'-'"]
  126 -> 33 [style=solid label="'!'"]
  126 -> 64 [style=solid label="'('"]
  126 -> 91 [style=solid label="'{'"]
  126 -> 40 [style=dashed label="robotmove"]
  126 -> 43 [style=dashed label="robotwall"]
  126 -> 44 [style=dashed label="robotexit"]
  126 -> 189 [style=dashed label="vector"]
  126 -> 190 [style=dashed label="expr"]
  126 -> 57 [style=dashed label="const"]
  127 [label="State 127\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 61       | MVARIABLE '(' . vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 62       | MVARIABLE '(' . '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 63       | MVARIABLE '(' . matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 81       | MVARIABLE '(' . expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 82       | MVARIABLE '(' . '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l125     | MVARIABLE '(' . expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  127 -> 58 [style=dotted]
  127 -> 5 [style=solid label="BOOL"]
  127 -> 6 [style=solid label="INTEGER"]
  127 -> 59 [style=solid label="VARIABLE"]
  127 -> 60 [style=solid label="VVARIABLE"]
  127 -> 61 [style=solid label="MVARIABLE"]
  127 -> 27 [style=solid label="MOVE"]
  127 -> 30 [style=solid label="ROBEX"]
  127 -> 31 [style=solid label="WALL"]
  127 -> 32 [style=solid label="'-'"]
  127 -> 33 [style=solid label="'!'"]
  127 -> 64 [style=solid label="'('"]
  127 -> 191 [style=solid label="'['"]
  127 -> 36 [style=solid label="'{'"]
  127 -> 40 [style=dashed label="robotmove"]
  127 -> 43 [style=dashed label="robotwall"]
  127 -> 44 [style=dashed label="robotexit"]
  127 -> 192 [style=dashed label="matrix"]
  127 -> 193 [style=dashed label="vector"]
  127 -> 194 [style=dashed label="expr"]
  127 -> 57 [style=dashed label="const"]
  128 [label="State 128\n\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l123     | '(' expr . ')'\l"]
  128 -> 119 [style=solid label="CONJUNCTION"]
  128 -> 120 [style=solid label="'<'"]
  128 -> 121 [style=solid label="'>'"]
  128 -> 122 [style=solid label="'+'"]
  128 -> 123 [style=solid label="'-'"]
  128 -> 124 [style=solid label="'/'"]
  128 -> 160 [style=solid label="')'"]
  129 [label="State 129\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 57 callfunc_args: error .  [error, ',', ']']\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 73       | error . matrix\l 74       | . error vector\l 74       | error . vector\l 75       | . error expr\l 75       | error . expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 88       | error . vector\l 89       | . error expr\l 89       | error . expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l126     | error . expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  129 -> 58 [style=dotted]
  129 -> 5 [style=solid label="BOOL"]
  129 -> 6 [style=solid label="INTEGER"]
  129 -> 59 [style=solid label="VARIABLE"]
  129 -> 60 [style=solid label="VVARIABLE"]
  129 -> 61 [style=solid label="MVARIABLE"]
  129 -> 27 [style=solid label="MOVE"]
  129 -> 30 [style=solid label="ROBEX"]
  129 -> 31 [style=solid label="WALL"]
  129 -> 32 [style=solid label="'-'"]
  129 -> 33 [style=solid label="'!'"]
  129 -> 64 [style=solid label="'('"]
  129 -> 36 [style=solid label="'{'"]
  129 -> 40 [style=dashed label="robotmove"]
  129 -> 43 [style=dashed label="robotwall"]
  129 -> 44 [style=dashed label="robotexit"]
  129 -> 66 [style=dashed label="matrix"]
  129 -> 67 [style=dashed label="vector"]
  129 -> 68 [style=dashed label="expr"]
  129 -> 57 [style=dashed label="const"]
  129 -> "129R57d" [label="[error]", style=solid]
 "129R57d" [label="R57", fillcolor=5, shape=diamond, style=filled]
  129 -> "129R57" [label="[',', ']']", style=solid]
 "129R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
  130 [label="State 130\n\l 53 callfunc_args: callfunc_args . ',' expr\l 54              | callfunc_args . ',' vector\l 55              | callfunc_args . ',' matrix\l 56              | callfunc_args . error\l 59 callfunction: error '[' callfunc_args . ']'\l"]
  130 -> 195 [style=dotted]
  130 -> 196 [style=solid label="','"]
  130 -> 197 [style=solid label="']'"]
  131 [label="State 131\n\l 52 callfunc_args: matrix .  [error, ',', ']']\l 65 matrix: matrix . '*' matrix\l 66       | matrix . ELEMMULT matrix\l 67       | matrix . '\\''\l 68       | matrix . RIGHTSHIFT\l 69       | matrix . LEFTSHIFT\l 71       | matrix . ELEMMULT vector\l 72       | matrix . ELEMMULT expr\l"]
  131 -> 104 [style=solid label="ELEMMULT"]
  131 -> 105 [style=solid label="'\\''"]
  131 -> 106 [style=solid label="LEFTSHIFT"]
  131 -> 107 [style=solid label="RIGHTSHIFT"]
  131 -> 108 [style=solid label="'*'"]
  131 -> "131R52" [style=solid]
 "131R52" [label="R52", fillcolor=3, shape=diamond, style=filled]
  132 [label="State 132\n\l 51 callfunc_args: vector .  [error, ',', ']']\l 70 matrix: vector . '\\''\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l"]
  132 -> 110 [style=solid label="ELEMMULT"]
  132 -> 111 [style=solid label="'\\''"]
  132 -> 112 [style=solid label="LEFTSHIFT"]
  132 -> 113 [style=solid label="RIGHTSHIFT"]
  132 -> "132R51" [style=solid]
 "132R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
  133 [label="State 133\n\l 50 callfunc_args: expr .  [error, ',', ']']\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  133 -> 119 [style=solid label="CONJUNCTION"]
  133 -> 120 [style=solid label="'<'"]
  133 -> 121 [style=solid label="'>'"]
  133 -> 122 [style=solid label="'+'"]
  133 -> 123 [style=solid label="'-'"]
  133 -> 124 [style=solid label="'/'"]
  133 -> "133R50" [style=solid]
 "133R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
  134 [label="State 134\n\l104 assignment: VARIABLE ASSIGN expr .  [NEWLINE]\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  134 -> 119 [style=solid label="CONJUNCTION"]
  134 -> 120 [style=solid label="'<'"]
  134 -> 121 [style=solid label="'>'"]
  134 -> 122 [style=solid label="'+'"]
  134 -> 123 [style=solid label="'-'"]
  134 -> 124 [style=solid label="'/'"]
  134 -> "134R104" [style=solid]
 "134R104" [label="R104", fillcolor=3, shape=diamond, style=filled]
  135 [label="State 135\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 88       | error . vector\l 89       | . error expr\l 89       | error . expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  135 -> 89 [style=dotted]
  135 -> 5 [style=solid label="BOOL"]
  135 -> 6 [style=solid label="INTEGER"]
  135 -> 59 [style=solid label="VARIABLE"]
  135 -> 60 [style=solid label="VVARIABLE"]
  135 -> 90 [style=solid label="MVARIABLE"]
  135 -> 27 [style=solid label="MOVE"]
  135 -> 30 [style=solid label="ROBEX"]
  135 -> 31 [style=solid label="WALL"]
  135 -> 32 [style=solid label="'-'"]
  135 -> 33 [style=solid label="'!'"]
  135 -> 64 [style=solid label="'('"]
  135 -> 91 [style=solid label="'{'"]
  135 -> 40 [style=dashed label="robotmove"]
  135 -> 43 [style=dashed label="robotwall"]
  135 -> 44 [style=dashed label="robotexit"]
  135 -> 165 [style=dashed label="vector"]
  135 -> 198 [style=dashed label="expr"]
  135 -> 57 [style=dashed label="const"]
  136 [label="State 136\n\l 80 vector: VVARIABLE . '(' vector ',' '[' ']' ')'\l 83       | VVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', '}']\l"]
  136 -> 199 [style=solid label="'('"]
  136 -> "136R83" [style=solid]
 "136R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  137 [label="State 137\n\l 81 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 82       | MVARIABLE . '(' '[' ']' ',' expr ')'\l"]
  137 -> 200 [style=solid label="'('"]
  138 [label="State 138\n\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l105 assignment: VVARIABLE ASSIGN vector .  [NEWLINE]\l"]
  138 -> 110 [style=solid label="ELEMMULT"]
  138 -> 112 [style=solid label="LEFTSHIFT"]
  138 -> 113 [style=solid label="RIGHTSHIFT"]
  138 -> "138R105" [style=solid]
 "138R105" [label="R105", fillcolor=3, shape=diamond, style=filled]
  139 [label="State 139\n\l 80 vector: VVARIABLE '(' vector . ',' '[' ']' ')'\l 84       | vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l 94 vmdeclaration: VVARIABLE '(' vector . ',' '[' ']' ')' ASSIGN vector\l"]
  139 -> 110 [style=solid label="ELEMMULT"]
  139 -> 112 [style=solid label="LEFTSHIFT"]
  139 -> 113 [style=solid label="RIGHTSHIFT"]
  139 -> 201 [style=solid label="','"]
  140 [label="State 140\n\l 93 vmdeclaration: VVARIABLE '(' expr . ')' ASSIGN expr\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l124     | VVARIABLE '(' expr . ')'\l"]
  140 -> 119 [style=solid label="CONJUNCTION"]
  140 -> 120 [style=solid label="'<'"]
  140 -> 121 [style=solid label="'>'"]
  140 -> 122 [style=solid label="'+'"]
  140 -> 123 [style=solid label="'-'"]
  140 -> 124 [style=solid label="'/'"]
  140 -> 202 [style=solid label="')'"]
  141 [label="State 141\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 73       | error . matrix\l 74       | . error vector\l 74       | error . vector\l 75       | . error expr\l 75       | error . expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 88       | error . vector\l 89       | . error expr\l 89       | error . expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  141 -> 58 [style=dotted]
  141 -> 5 [style=solid label="BOOL"]
  141 -> 6 [style=solid label="INTEGER"]
  141 -> 59 [style=solid label="VARIABLE"]
  141 -> 60 [style=solid label="VVARIABLE"]
  141 -> 61 [style=solid label="MVARIABLE"]
  141 -> 27 [style=solid label="MOVE"]
  141 -> 30 [style=solid label="ROBEX"]
  141 -> 31 [style=solid label="WALL"]
  141 -> 32 [style=solid label="'-'"]
  141 -> 33 [style=solid label="'!'"]
  141 -> 64 [style=solid label="'('"]
  141 -> 36 [style=solid label="'{'"]
  141 -> 40 [style=dashed label="robotmove"]
  141 -> 43 [style=dashed label="robotwall"]
  141 -> 44 [style=dashed label="robotexit"]
  141 -> 66 [style=dashed label="matrix"]
  141 -> 67 [style=dashed label="vector"]
  141 -> 203 [style=dashed label="expr"]
  141 -> 57 [style=dashed label="const"]
  142 [label="State 142\n\l 61 matrix: MVARIABLE . '(' vector ',' '[' ']' ')'\l 62       | MVARIABLE . '(' '[' ']' ',' vector ')'\l 63       | MVARIABLE . '(' matrix ')'\l 64       | MVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 81 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 82       | MVARIABLE . '(' '[' ']' ',' expr ')'\l"]
  142 -> 204 [style=solid label="'('"]
  142 -> "142R64" [style=solid]
 "142R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
  143 [label="State 143\n\l 65 matrix: matrix . '*' matrix\l 66       | matrix . ELEMMULT matrix\l 67       | matrix . '\\''\l 68       | matrix . RIGHTSHIFT\l 69       | matrix . LEFTSHIFT\l 71       | matrix . ELEMMULT vector\l 72       | matrix . ELEMMULT expr\l106 assignment: MVARIABLE ASSIGN matrix .  [NEWLINE]\l"]
  143 -> 104 [style=solid label="ELEMMULT"]
  143 -> 105 [style=solid label="'\\''"]
  143 -> 106 [style=solid label="LEFTSHIFT"]
  143 -> 107 [style=solid label="RIGHTSHIFT"]
  143 -> 108 [style=solid label="'*'"]
  143 -> "143R106" [style=solid]
 "143R106" [label="R106", fillcolor=3, shape=diamond, style=filled]
  144 [label="State 144\n\l 70 matrix: vector . '\\''\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l"]
  144 -> 110 [style=solid label="ELEMMULT"]
  144 -> 111 [style=solid label="'\\''"]
  144 -> 112 [style=solid label="LEFTSHIFT"]
  144 -> 113 [style=solid label="RIGHTSHIFT"]
  145 [label="State 145\n\l 62 matrix: MVARIABLE '(' '[' . ']' ',' vector ')'\l 82 vector: MVARIABLE '(' '[' . ']' ',' expr ')'\l 97 vmdeclaration: MVARIABLE '(' '[' . ']' ',' expr ')' ASSIGN vector\l 99              | MVARIABLE '(' '[' . ']' ',' vector ')' ASSIGN matrix\l"]
  145 -> 205 [style=solid label="']'"]
  146 [label="State 146\n\l 63 matrix: MVARIABLE '(' matrix . ')'\l 65       | matrix . '*' matrix\l 66       | matrix . ELEMMULT matrix\l 67       | matrix . '\\''\l 68       | matrix . RIGHTSHIFT\l 69       | matrix . LEFTSHIFT\l 71       | matrix . ELEMMULT vector\l 72       | matrix . ELEMMULT expr\l100 vmdeclaration: MVARIABLE '(' matrix . ')' ASSIGN matrix\l"]
  146 -> 104 [style=solid label="ELEMMULT"]
  146 -> 105 [style=solid label="'\\''"]
  146 -> 106 [style=solid label="LEFTSHIFT"]
  146 -> 107 [style=solid label="RIGHTSHIFT"]
  146 -> 108 [style=solid label="'*'"]
  146 -> 206 [style=solid label="')'"]
  147 [label="State 147\n\l 61 matrix: MVARIABLE '(' vector . ',' '[' ']' ')'\l 70       | vector . '\\''\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l 98 vmdeclaration: MVARIABLE '(' vector . ',' '[' ']' ')' ASSIGN matrix\l"]
  147 -> 110 [style=solid label="ELEMMULT"]
  147 -> 111 [style=solid label="'\\''"]
  147 -> 112 [style=solid label="LEFTSHIFT"]
  147 -> 113 [style=solid label="RIGHTSHIFT"]
  147 -> 207 [style=solid label="','"]
  148 [label="State 148\n\l 81 vector: MVARIABLE '(' expr . ',' '[' ']' ')'\l 95 vmdeclaration: MVARIABLE '(' expr . ',' expr ')' ASSIGN expr\l 96              | MVARIABLE '(' expr . ',' '[' ']' ')' ASSIGN vector\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l125     | MVARIABLE '(' expr . ',' expr ')'\l"]
  148 -> 119 [style=solid label="CONJUNCTION"]
  148 -> 208 [style=solid label="','"]
  148 -> 120 [style=solid label="'<'"]
  148 -> 121 [style=solid label="'>'"]
  148 -> 122 [style=solid label="'+'"]
  148 -> 123 [style=solid label="'-'"]
  148 -> 124 [style=solid label="'/'"]
  149 [label="State 149\n\l 53 callfunc_args: callfunc_args . ',' expr\l 54              | callfunc_args . ',' vector\l 55              | callfunc_args . ',' matrix\l 56              | callfunc_args . error\l 58 callfunction: FVARIABLE '[' callfunc_args . ']'\l"]
  149 -> 195 [style=dotted]
  149 -> 196 [style=solid label="','"]
  149 -> 209 [style=solid label="']'"]
  150 [label="State 150\n\l108 print: PRINT '(' VVARIABLE . ')'\l124 expr: VVARIABLE . '(' expr ')'\l"]
  150 -> 154 [style=solid label="'('"]
  150 -> 210 [style=solid label="')'"]
  151 [label="State 151\n\l109 print: PRINT '(' MVARIABLE . ')'\l125 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  151 -> 155 [style=solid label="'('"]
  151 -> 211 [style=solid label="')'"]
  152 [label="State 152\n\l107 print: PRINT '(' expr . ')'\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  152 -> 119 [style=solid label="CONJUNCTION"]
  152 -> 120 [style=solid label="'<'"]
  152 -> 121 [style=solid label="'>'"]
  152 -> 122 [style=solid label="'+'"]
  152 -> 123 [style=solid label="'-'"]
  152 -> 124 [style=solid label="'/'"]
  152 -> 212 [style=solid label="')'"]
  153 [label="State 153\n\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l126     | error expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l"]
  153 -> 119 [style=solid label="CONJUNCTION"]
  153 -> 120 [style=solid label="'<'"]
  153 -> 121 [style=solid label="'>'"]
  153 -> 122 [style=solid label="'+'"]
  153 -> 123 [style=solid label="'-'"]
  153 -> 124 [style=solid label="'/'"]
  153 -> "153R126d" [label="[CONJUNCTION, '<', '>', '+', '-', '/']", style=solid]
 "153R126d" [label="R126", fillcolor=5, shape=diamond, style=filled]
  153 -> "153R126" [style=solid]
 "153R126" [label="R126", fillcolor=3, shape=diamond, style=filled]
  154 [label="State 154\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l124     | VVARIABLE '(' . expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  154 -> 76 [style=dotted]
  154 -> 5 [style=solid label="BOOL"]
  154 -> 6 [style=solid label="INTEGER"]
  154 -> 59 [style=solid label="VARIABLE"]
  154 -> 77 [style=solid label="VVARIABLE"]
  154 -> 78 [style=solid label="MVARIABLE"]
  154 -> 27 [style=solid label="MOVE"]
  154 -> 30 [style=solid label="ROBEX"]
  154 -> 31 [style=solid label="WALL"]
  154 -> 32 [style=solid label="'-'"]
  154 -> 33 [style=solid label="'!'"]
  154 -> 64 [style=solid label="'('"]
  154 -> 40 [style=dashed label="robotmove"]
  154 -> 43 [style=dashed label="robotwall"]
  154 -> 44 [style=dashed label="robotexit"]
  154 -> 190 [style=dashed label="expr"]
  154 -> 57 [style=dashed label="const"]
  155 [label="State 155\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l125     | MVARIABLE '(' . expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  155 -> 76 [style=dotted]
  155 -> 5 [style=solid label="BOOL"]
  155 -> 6 [style=solid label="INTEGER"]
  155 -> 59 [style=solid label="VARIABLE"]
  155 -> 77 [style=solid label="VVARIABLE"]
  155 -> 78 [style=solid label="MVARIABLE"]
  155 -> 27 [style=solid label="MOVE"]
  155 -> 30 [style=solid label="ROBEX"]
  155 -> 31 [style=solid label="WALL"]
  155 -> 32 [style=solid label="'-'"]
  155 -> 33 [style=solid label="'!'"]
  155 -> 64 [style=solid label="'('"]
  155 -> 40 [style=dashed label="robotmove"]
  155 -> 43 [style=dashed label="robotwall"]
  155 -> 44 [style=dashed label="robotexit"]
  155 -> 213 [style=dashed label="expr"]
  155 -> 57 [style=dashed label="const"]
  156 [label="State 156\n\l 31 iff: IF expr NEWLINE . begif stmts endif\l 32 begif: . B\l 33      | . BEGIF\l"]
  156 -> 214 [style=solid label="B"]
  156 -> 215 [style=solid label="BEGIF"]
  156 -> 216 [style=dashed label="begif"]
  157 [label="State 157\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 40 forr: FORR declaration DOUBLEDOT . expr NEWLINE begfor stmts endfor\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  157 -> 76 [style=dotted]
  157 -> 5 [style=solid label="BOOL"]
  157 -> 6 [style=solid label="INTEGER"]
  157 -> 59 [style=solid label="VARIABLE"]
  157 -> 77 [style=solid label="VVARIABLE"]
  157 -> 78 [style=solid label="MVARIABLE"]
  157 -> 27 [style=solid label="MOVE"]
  157 -> 30 [style=solid label="ROBEX"]
  157 -> 31 [style=solid label="WALL"]
  157 -> 32 [style=solid label="'-'"]
  157 -> 33 [style=solid label="'!'"]
  157 -> 64 [style=solid label="'('"]
  157 -> 40 [style=dashed label="robotmove"]
  157 -> 43 [style=dashed label="robotwall"]
  157 -> 44 [style=dashed label="robotexit"]
  157 -> 217 [style=dashed label="expr"]
  157 -> 57 [style=dashed label="const"]
  158 [label="State 158\n\l 26 robotmove: MOVE '(' expr . ')'\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  158 -> 119 [style=solid label="CONJUNCTION"]
  158 -> 120 [style=solid label="'<'"]
  158 -> 121 [style=solid label="'>'"]
  158 -> 122 [style=solid label="'+'"]
  158 -> 123 [style=solid label="'-'"]
  158 -> 124 [style=solid label="'/'"]
  158 -> 218 [style=solid label="')'"]
  159 [label="State 159\n\l 22 stmt: '(' stmts ')' .\l"]
  159 -> "159R22" [style=solid]
 "159R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  160 [label="State 160\n\l123 expr: '(' expr ')' .\l"]
  160 -> "160R123" [style=solid]
 "160R123" [label="R123", fillcolor=3, shape=diamond, style=filled]
  161 [label="State 161\n\l 43 return_func: return_func error .\l"]
  161 -> "161R43" [style=solid]
 "161R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  162 [label="State 162\n\l 42 return_func: return_func ',' . type VAR\l127 type: . INT\l128     | . CINT\l129     | . VINT\l130     | . MINT\l131     | . CVINT\l132     | . CMINT\l133     | . BOOLEAN\l134     | . CBOOLEAN\l135     | . VBOOLEAN\l136     | . MBOOLEAN\l137     | . CVBOOLEAN\l138     | . CMBOOLEAN\l"]
  162 -> 11 [style=solid label="CINT"]
  162 -> 12 [style=solid label="VINT"]
  162 -> 13 [style=solid label="MINT"]
  162 -> 14 [style=solid label="INT"]
  162 -> 15 [style=solid label="CVINT"]
  162 -> 16 [style=solid label="CMINT"]
  162 -> 17 [style=solid label="BOOLEAN"]
  162 -> 18 [style=solid label="CBOOLEAN"]
  162 -> 19 [style=solid label="VBOOLEAN"]
  162 -> 20 [style=solid label="MBOOLEAN"]
  162 -> 21 [style=solid label="CVBOOLEAN"]
  162 -> 22 [style=solid label="CMBOOLEAN"]
  162 -> 219 [style=dashed label="type"]
  163 [label="State 163\n\l 48 function: '[' return_func ']' . DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l"]
  163 -> 220 [style=solid label="DECLARE"]
  164 [label="State 164\n\l 41 return_func: type VAR .\l"]
  164 -> "164R41" [style=solid]
 "164R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  165 [label="State 165\n\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l 88       | error vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l"]
  165 -> 110 [style=solid label="ELEMMULT"]
  165 -> 112 [style=solid label="LEFTSHIFT"]
  165 -> 113 [style=solid label="RIGHTSHIFT"]
  165 -> "165R88d" [label="[ELEMMULT, LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "165R88d" [label="R88", fillcolor=5, shape=diamond, style=filled]
  165 -> "165R88" [style=solid]
 "165R88" [label="R88", fillcolor=3, shape=diamond, style=filled]
  166 [label="State 166\n\l 89 vector: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l126     | error expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l"]
  166 -> 119 [style=solid label="CONJUNCTION"]
  166 -> 120 [style=solid label="'<'"]
  166 -> 121 [style=solid label="'>'"]
  166 -> 122 [style=solid label="'+'"]
  166 -> 123 [style=solid label="'-'"]
  166 -> 124 [style=solid label="'/'"]
  166 -> "166R89" [style=solid]
 "166R89" [label="R89", fillcolor=3, shape=diamond, style=filled]
  166 -> "166R126d" [label="[error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']", style=solid]
 "166R126d" [label="R126", fillcolor=5, shape=diamond, style=filled]
  167 [label="State 167\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 81 vector: MVARIABLE '(' . expr ',' '[' ']' ')'\l 82       | MVARIABLE '(' . '[' ']' ',' expr ')'\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l125     | MVARIABLE '(' . expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  167 -> 76 [style=dotted]
  167 -> 5 [style=solid label="BOOL"]
  167 -> 6 [style=solid label="INTEGER"]
  167 -> 59 [style=solid label="VARIABLE"]
  167 -> 77 [style=solid label="VVARIABLE"]
  167 -> 78 [style=solid label="MVARIABLE"]
  167 -> 27 [style=solid label="MOVE"]
  167 -> 30 [style=solid label="ROBEX"]
  167 -> 31 [style=solid label="WALL"]
  167 -> 32 [style=solid label="'-'"]
  167 -> 33 [style=solid label="'!'"]
  167 -> 64 [style=solid label="'('"]
  167 -> 221 [style=solid label="'['"]
  167 -> 40 [style=dashed label="robotmove"]
  167 -> 43 [style=dashed label="robotwall"]
  167 -> 44 [style=dashed label="robotexit"]
  167 -> 194 [style=dashed label="expr"]
  167 -> 57 [style=dashed label="const"]
  168 [label="State 168\n\l 78 listexprs: listexprs error .\l"]
  168 -> "168R78" [style=solid]
 "168R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
  169 [label="State 169\n\l 77 listexprs: listexprs ',' . vector\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l"]
  169 -> 135 [style=dotted]
  169 -> 136 [style=solid label="VVARIABLE"]
  169 -> 137 [style=solid label="MVARIABLE"]
  169 -> 91 [style=solid label="'{'"]
  169 -> 222 [style=dashed label="vector"]
  170 [label="State 170\n\l 60 matrix: '{' listexprs '}' .\l"]
  170 -> "170R60" [style=solid]
 "170R60" [label="R60", fillcolor=3, shape=diamond, style=filled]
  171 [label="State 171\n\l 76 listexprs: vector ',' . vector\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l"]
  171 -> 135 [style=dotted]
  171 -> 136 [style=solid label="VVARIABLE"]
  171 -> 137 [style=solid label="MVARIABLE"]
  171 -> 91 [style=solid label="'{'"]
  171 -> 223 [style=dashed label="vector"]
  172 [label="State 172\n\l 92 exprs: exprs error .\l"]
  172 -> "172R92" [style=solid]
 "172R92" [label="R92", fillcolor=3, shape=diamond, style=filled]
  173 [label="State 173\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 91 exprs: exprs ',' . expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  173 -> 76 [style=dotted]
  173 -> 5 [style=solid label="BOOL"]
  173 -> 6 [style=solid label="INTEGER"]
  173 -> 59 [style=solid label="VARIABLE"]
  173 -> 77 [style=solid label="VVARIABLE"]
  173 -> 78 [style=solid label="MVARIABLE"]
  173 -> 27 [style=solid label="MOVE"]
  173 -> 30 [style=solid label="ROBEX"]
  173 -> 31 [style=solid label="WALL"]
  173 -> 32 [style=solid label="'-'"]
  173 -> 33 [style=solid label="'!'"]
  173 -> 64 [style=solid label="'('"]
  173 -> 40 [style=dashed label="robotmove"]
  173 -> 43 [style=dashed label="robotwall"]
  173 -> 44 [style=dashed label="robotexit"]
  173 -> 224 [style=dashed label="expr"]
  173 -> 57 [style=dashed label="const"]
  174 [label="State 174\n\l 79 vector: '{' exprs '}' .\l"]
  174 -> "174R79" [style=solid]
 "174R79" [label="R79", fillcolor=3, shape=diamond, style=filled]
  175 [label="State 175\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 90 exprs: expr ',' . expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  175 -> 76 [style=dotted]
  175 -> 5 [style=solid label="BOOL"]
  175 -> 6 [style=solid label="INTEGER"]
  175 -> 59 [style=solid label="VARIABLE"]
  175 -> 77 [style=solid label="VVARIABLE"]
  175 -> 78 [style=solid label="MVARIABLE"]
  175 -> 27 [style=solid label="MOVE"]
  175 -> 30 [style=solid label="ROBEX"]
  175 -> 31 [style=solid label="WALL"]
  175 -> 32 [style=solid label="'-'"]
  175 -> 33 [style=solid label="'!'"]
  175 -> 64 [style=solid label="'('"]
  175 -> 40 [style=dashed label="robotmove"]
  175 -> 43 [style=dashed label="robotwall"]
  175 -> 44 [style=dashed label="robotexit"]
  175 -> 225 [style=dashed label="expr"]
  175 -> 57 [style=dashed label="const"]
  176 [label="State 176\n\l 65 matrix: matrix . '*' matrix\l 66       | matrix . ELEMMULT matrix\l 66       | matrix ELEMMULT matrix .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 67       | matrix . '\\''\l 68       | matrix . RIGHTSHIFT\l 69       | matrix . LEFTSHIFT\l 71       | matrix . ELEMMULT vector\l 72       | matrix . ELEMMULT expr\l"]
  176 -> 104 [style=solid label="ELEMMULT"]
  176 -> 105 [style=solid label="'\\''"]
  176 -> 106 [style=solid label="LEFTSHIFT"]
  176 -> 107 [style=solid label="RIGHTSHIFT"]
  176 -> 108 [style=solid label="'*'"]
  176 -> "176R66d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']", style=solid]
 "176R66d" [label="R66", fillcolor=5, shape=diamond, style=filled]
  176 -> "176R66" [style=solid]
 "176R66" [label="R66", fillcolor=3, shape=diamond, style=filled]
  177 [label="State 177\n\l 70 matrix: vector . '\\''\l 71       | matrix ELEMMULT vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l"]
  177 -> 110 [style=solid label="ELEMMULT"]
  177 -> 111 [style=solid label="'\\''"]
  177 -> 112 [style=solid label="LEFTSHIFT"]
  177 -> 113 [style=solid label="RIGHTSHIFT"]
  177 -> "177R71d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "177R71d" [label="R71", fillcolor=5, shape=diamond, style=filled]
  177 -> "177R71" [style=solid]
 "177R71" [label="R71", fillcolor=3, shape=diamond, style=filled]
  178 [label="State 178\n\l 72 matrix: matrix ELEMMULT expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  178 -> 119 [style=solid label="CONJUNCTION"]
  178 -> 120 [style=solid label="'<'"]
  178 -> 121 [style=solid label="'>'"]
  178 -> 122 [style=solid label="'+'"]
  178 -> 123 [style=solid label="'-'"]
  178 -> 124 [style=solid label="'/'"]
  178 -> "178R72" [style=solid]
 "178R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
  179 [label="State 179\n\l 65 matrix: matrix . '*' matrix\l 65       | matrix '*' matrix .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 66       | matrix . ELEMMULT matrix\l 67       | matrix . '\\''\l 68       | matrix . RIGHTSHIFT\l 69       | matrix . LEFTSHIFT\l 71       | matrix . ELEMMULT vector\l 72       | matrix . ELEMMULT expr\l"]
  179 -> 104 [style=solid label="ELEMMULT"]
  179 -> 105 [style=solid label="'\\''"]
  179 -> 106 [style=solid label="LEFTSHIFT"]
  179 -> 107 [style=solid label="RIGHTSHIFT"]
  179 -> "179R65d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "179R65d" [label="R65", fillcolor=5, shape=diamond, style=filled]
  179 -> "179R65" [style=solid]
 "179R65" [label="R65", fillcolor=3, shape=diamond, style=filled]
  180 [label="State 180\n\l 84 vector: vector . ELEMMULT vector\l 84       | vector ELEMMULT vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l"]
  180 -> 110 [style=solid label="ELEMMULT"]
  180 -> 112 [style=solid label="LEFTSHIFT"]
  180 -> 113 [style=solid label="RIGHTSHIFT"]
  180 -> "180R84d" [label="[ELEMMULT, LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "180R84d" [label="R84", fillcolor=5, shape=diamond, style=filled]
  180 -> "180R84" [style=solid]
 "180R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
  181 [label="State 181\n\l 87 vector: vector ELEMMULT expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  181 -> 119 [style=solid label="CONJUNCTION"]
  181 -> 120 [style=solid label="'<'"]
  181 -> 121 [style=solid label="'>'"]
  181 -> 122 [style=solid label="'+'"]
  181 -> 123 [style=solid label="'-'"]
  181 -> 124 [style=solid label="'/'"]
  181 -> "181R87" [style=solid]
 "181R87" [label="R87", fillcolor=3, shape=diamond, style=filled]
  182 [label="State 182\n\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l122     | expr CONJUNCTION expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l"]
  182 -> 119 [style=solid label="CONJUNCTION"]
  182 -> 120 [style=solid label="'<'"]
  182 -> 121 [style=solid label="'>'"]
  182 -> 122 [style=solid label="'+'"]
  182 -> 123 [style=solid label="'-'"]
  182 -> 124 [style=solid label="'/'"]
  182 -> "182R122d" [label="[CONJUNCTION, '<', '>', '+', '-', '/']", style=solid]
 "182R122d" [label="R122", fillcolor=5, shape=diamond, style=filled]
  182 -> "182R122" [style=solid]
 "182R122" [label="R122", fillcolor=3, shape=diamond, style=filled]
  183 [label="State 183\n\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l119     | expr '<' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '*', ')', ']', '}']\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  183 -> 119 [style=solid label="CONJUNCTION"]
  183 -> 122 [style=solid label="'+'"]
  183 -> 123 [style=solid label="'-'"]
  183 -> 124 [style=solid label="'/'"]
  183 -> "183R119d" [label="[CONJUNCTION]", style=solid]
 "183R119d" [label="R119", fillcolor=5, shape=diamond, style=filled]
  183 -> "183R119" [style=solid]
 "183R119" [label="R119", fillcolor=3, shape=diamond, style=filled]
  184 [label="State 184\n\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l120     | expr '>' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '*', ')', ']', '}']\l122     | expr . CONJUNCTION expr\l"]
  184 -> 119 [style=solid label="CONJUNCTION"]
  184 -> 122 [style=solid label="'+'"]
  184 -> 123 [style=solid label="'-'"]
  184 -> 124 [style=solid label="'/'"]
  184 -> "184R120d" [label="[CONJUNCTION]", style=solid]
 "184R120d" [label="R120", fillcolor=5, shape=diamond, style=filled]
  184 -> "184R120" [style=solid]
 "184R120" [label="R120", fillcolor=3, shape=diamond, style=filled]
  185 [label="State 185\n\l116 expr: expr . '+' expr\l116     | expr '+' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', ')', ']', '}']\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  185 -> 119 [style=solid label="CONJUNCTION"]
  185 -> 124 [style=solid label="'/'"]
  185 -> "185R116d" [label="[CONJUNCTION]", style=solid]
 "185R116d" [label="R116", fillcolor=5, shape=diamond, style=filled]
  185 -> "185R116" [style=solid]
 "185R116" [label="R116", fillcolor=3, shape=diamond, style=filled]
  186 [label="State 186\n\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l117     | expr '-' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', ')', ']', '}']\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  186 -> 119 [style=solid label="CONJUNCTION"]
  186 -> 124 [style=solid label="'/'"]
  186 -> "186R117d" [label="[CONJUNCTION]", style=solid]
 "186R117d" [label="R117", fillcolor=5, shape=diamond, style=filled]
  186 -> "186R117" [style=solid]
 "186R117" [label="R117", fillcolor=3, shape=diamond, style=filled]
  187 [label="State 187\n\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l118     | expr '/' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  187 -> 119 [style=solid label="CONJUNCTION"]
  187 -> "187R118d" [label="[CONJUNCTION]", style=solid]
 "187R118d" [label="R118", fillcolor=5, shape=diamond, style=filled]
  187 -> "187R118" [style=solid]
 "187R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
  188 [label="State 188\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l101 declaration: type VAR DECLARE . expr\l102            | type VAR DECLARE . vector\l103            | type VAR DECLARE . matrix\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  188 -> 58 [style=dotted]
  188 -> 5 [style=solid label="BOOL"]
  188 -> 6 [style=solid label="INTEGER"]
  188 -> 59 [style=solid label="VARIABLE"]
  188 -> 60 [style=solid label="VVARIABLE"]
  188 -> 61 [style=solid label="MVARIABLE"]
  188 -> 27 [style=solid label="MOVE"]
  188 -> 30 [style=solid label="ROBEX"]
  188 -> 31 [style=solid label="WALL"]
  188 -> 32 [style=solid label="'-'"]
  188 -> 33 [style=solid label="'!'"]
  188 -> 64 [style=solid label="'('"]
  188 -> 36 [style=solid label="'{'"]
  188 -> 40 [style=dashed label="robotmove"]
  188 -> 43 [style=dashed label="robotwall"]
  188 -> 44 [style=dashed label="robotexit"]
  188 -> 226 [style=dashed label="matrix"]
  188 -> 227 [style=dashed label="vector"]
  188 -> 228 [style=dashed label="expr"]
  188 -> 57 [style=dashed label="const"]
  189 [label="State 189\n\l 80 vector: VVARIABLE '(' vector . ',' '[' ']' ')'\l 84       | vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l"]
  189 -> 110 [style=solid label="ELEMMULT"]
  189 -> 112 [style=solid label="LEFTSHIFT"]
  189 -> 113 [style=solid label="RIGHTSHIFT"]
  189 -> 229 [style=solid label="','"]
  190 [label="State 190\n\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l124     | VVARIABLE '(' expr . ')'\l"]
  190 -> 119 [style=solid label="CONJUNCTION"]
  190 -> 120 [style=solid label="'<'"]
  190 -> 121 [style=solid label="'>'"]
  190 -> 122 [style=solid label="'+'"]
  190 -> 123 [style=solid label="'-'"]
  190 -> 124 [style=solid label="'/'"]
  190 -> 230 [style=solid label="')'"]
  191 [label="State 191\n\l 62 matrix: MVARIABLE '(' '[' . ']' ',' vector ')'\l 82 vector: MVARIABLE '(' '[' . ']' ',' expr ')'\l"]
  191 -> 231 [style=solid label="']'"]
  192 [label="State 192\n\l 63 matrix: MVARIABLE '(' matrix . ')'\l 65       | matrix . '*' matrix\l 66       | matrix . ELEMMULT matrix\l 67       | matrix . '\\''\l 68       | matrix . RIGHTSHIFT\l 69       | matrix . LEFTSHIFT\l 71       | matrix . ELEMMULT vector\l 72       | matrix . ELEMMULT expr\l"]
  192 -> 104 [style=solid label="ELEMMULT"]
  192 -> 105 [style=solid label="'\\''"]
  192 -> 106 [style=solid label="LEFTSHIFT"]
  192 -> 107 [style=solid label="RIGHTSHIFT"]
  192 -> 108 [style=solid label="'*'"]
  192 -> 232 [style=solid label="')'"]
  193 [label="State 193\n\l 61 matrix: MVARIABLE '(' vector . ',' '[' ']' ')'\l 70       | vector . '\\''\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l"]
  193 -> 110 [style=solid label="ELEMMULT"]
  193 -> 111 [style=solid label="'\\''"]
  193 -> 112 [style=solid label="LEFTSHIFT"]
  193 -> 113 [style=solid label="RIGHTSHIFT"]
  193 -> 233 [style=solid label="','"]
  194 [label="State 194\n\l 81 vector: MVARIABLE '(' expr . ',' '[' ']' ')'\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l125     | MVARIABLE '(' expr . ',' expr ')'\l"]
  194 -> 119 [style=solid label="CONJUNCTION"]
  194 -> 234 [style=solid label="','"]
  194 -> 120 [style=solid label="'<'"]
  194 -> 121 [style=solid label="'>'"]
  194 -> 122 [style=solid label="'+'"]
  194 -> 123 [style=solid label="'-'"]
  194 -> 124 [style=solid label="'/'"]
  195 [label="State 195\n\l 56 callfunc_args: callfunc_args error .\l"]
  195 -> "195R56" [style=solid]
 "195R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  196 [label="State 196\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 53 callfunc_args: callfunc_args ',' . expr\l 54              | callfunc_args ',' . vector\l 55              | callfunc_args ',' . matrix\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  196 -> 58 [style=dotted]
  196 -> 5 [style=solid label="BOOL"]
  196 -> 6 [style=solid label="INTEGER"]
  196 -> 59 [style=solid label="VARIABLE"]
  196 -> 60 [style=solid label="VVARIABLE"]
  196 -> 61 [style=solid label="MVARIABLE"]
  196 -> 27 [style=solid label="MOVE"]
  196 -> 30 [style=solid label="ROBEX"]
  196 -> 31 [style=solid label="WALL"]
  196 -> 32 [style=solid label="'-'"]
  196 -> 33 [style=solid label="'!'"]
  196 -> 64 [style=solid label="'('"]
  196 -> 36 [style=solid label="'{'"]
  196 -> 40 [style=dashed label="robotmove"]
  196 -> 43 [style=dashed label="robotwall"]
  196 -> 44 [style=dashed label="robotexit"]
  196 -> 235 [style=dashed label="matrix"]
  196 -> 236 [style=dashed label="vector"]
  196 -> 237 [style=dashed label="expr"]
  196 -> 57 [style=dashed label="const"]
  197 [label="State 197\n\l 59 callfunction: error '[' callfunc_args ']' .\l"]
  197 -> "197R59" [style=solid]
 "197R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
  198 [label="State 198\n\l 89 vector: error expr .  [error, NEWLINE, ELEMMULT, LEFTSHIFT, RIGHTSHIFT, ',', '}']\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  198 -> 119 [style=solid label="CONJUNCTION"]
  198 -> 120 [style=solid label="'<'"]
  198 -> 121 [style=solid label="'>'"]
  198 -> 122 [style=solid label="'+'"]
  198 -> 123 [style=solid label="'-'"]
  198 -> 124 [style=solid label="'/'"]
  198 -> "198R89" [style=solid]
 "198R89" [label="R89", fillcolor=3, shape=diamond, style=filled]
  199 [label="State 199\n\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 80       | VVARIABLE '(' . vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l"]
  199 -> 135 [style=dotted]
  199 -> 136 [style=solid label="VVARIABLE"]
  199 -> 137 [style=solid label="MVARIABLE"]
  199 -> 91 [style=solid label="'{'"]
  199 -> 189 [style=dashed label="vector"]
  200 [label="State 200\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 81 vector: MVARIABLE '(' . expr ',' '[' ']' ')'\l 82       | MVARIABLE '(' . '[' ']' ',' expr ')'\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  200 -> 76 [style=dotted]
  200 -> 5 [style=solid label="BOOL"]
  200 -> 6 [style=solid label="INTEGER"]
  200 -> 59 [style=solid label="VARIABLE"]
  200 -> 77 [style=solid label="VVARIABLE"]
  200 -> 78 [style=solid label="MVARIABLE"]
  200 -> 27 [style=solid label="MOVE"]
  200 -> 30 [style=solid label="ROBEX"]
  200 -> 31 [style=solid label="WALL"]
  200 -> 32 [style=solid label="'-'"]
  200 -> 33 [style=solid label="'!'"]
  200 -> 64 [style=solid label="'('"]
  200 -> 221 [style=solid label="'['"]
  200 -> 40 [style=dashed label="robotmove"]
  200 -> 43 [style=dashed label="robotwall"]
  200 -> 44 [style=dashed label="robotexit"]
  200 -> 238 [style=dashed label="expr"]
  200 -> 57 [style=dashed label="const"]
  201 [label="State 201\n\l 80 vector: VVARIABLE '(' vector ',' . '[' ']' ')'\l 94 vmdeclaration: VVARIABLE '(' vector ',' . '[' ']' ')' ASSIGN vector\l"]
  201 -> 239 [style=solid label="'['"]
  202 [label="State 202\n\l 93 vmdeclaration: VVARIABLE '(' expr ')' . ASSIGN expr\l124 expr: VVARIABLE '(' expr ')' .  [NEWLINE, CONJUNCTION, '<', '>', '+', '-', '/', ')']\l"]
  202 -> 240 [style=solid label="ASSIGN"]
  202 -> "202R124" [style=solid]
 "202R124" [label="R124", fillcolor=3, shape=diamond, style=filled]
  203 [label="State 203\n\l 75 matrix: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 89 vector: error expr .  [ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  203 -> 119 [style=solid label="CONJUNCTION"]
  203 -> 120 [style=solid label="'<'"]
  203 -> 121 [style=solid label="'>'"]
  203 -> 122 [style=solid label="'+'"]
  203 -> 123 [style=solid label="'-'"]
  203 -> 124 [style=solid label="'/'"]
  203 -> "203R75" [style=solid]
 "203R75" [label="R75", fillcolor=3, shape=diamond, style=filled]
  203 -> "203R89d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "203R89d" [label="R89", fillcolor=5, shape=diamond, style=filled]
  204 [label="State 204\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 61       | MVARIABLE '(' . vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 62       | MVARIABLE '(' . '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 63       | MVARIABLE '(' . matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 81       | MVARIABLE '(' . expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 82       | MVARIABLE '(' . '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  204 -> 58 [style=dotted]
  204 -> 5 [style=solid label="BOOL"]
  204 -> 6 [style=solid label="INTEGER"]
  204 -> 59 [style=solid label="VARIABLE"]
  204 -> 60 [style=solid label="VVARIABLE"]
  204 -> 61 [style=solid label="MVARIABLE"]
  204 -> 27 [style=solid label="MOVE"]
  204 -> 30 [style=solid label="ROBEX"]
  204 -> 31 [style=solid label="WALL"]
  204 -> 32 [style=solid label="'-'"]
  204 -> 33 [style=solid label="'!'"]
  204 -> 64 [style=solid label="'('"]
  204 -> 191 [style=solid label="'['"]
  204 -> 36 [style=solid label="'{'"]
  204 -> 40 [style=dashed label="robotmove"]
  204 -> 43 [style=dashed label="robotwall"]
  204 -> 44 [style=dashed label="robotexit"]
  204 -> 192 [style=dashed label="matrix"]
  204 -> 193 [style=dashed label="vector"]
  204 -> 238 [style=dashed label="expr"]
  204 -> 57 [style=dashed label="const"]
  205 [label="State 205\n\l 62 matrix: MVARIABLE '(' '[' ']' . ',' vector ')'\l 82 vector: MVARIABLE '(' '[' ']' . ',' expr ')'\l 97 vmdeclaration: MVARIABLE '(' '[' ']' . ',' expr ')' ASSIGN vector\l 99              | MVARIABLE '(' '[' ']' . ',' vector ')' ASSIGN matrix\l"]
  205 -> 241 [style=solid label="','"]
  206 [label="State 206\n\l 63 matrix: MVARIABLE '(' matrix ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l100 vmdeclaration: MVARIABLE '(' matrix ')' . ASSIGN matrix\l"]
  206 -> 242 [style=solid label="ASSIGN"]
  206 -> "206R63" [style=solid]
 "206R63" [label="R63", fillcolor=3, shape=diamond, style=filled]
  207 [label="State 207\n\l 61 matrix: MVARIABLE '(' vector ',' . '[' ']' ')'\l 98 vmdeclaration: MVARIABLE '(' vector ',' . '[' ']' ')' ASSIGN matrix\l"]
  207 -> 243 [style=solid label="'['"]
  208 [label="State 208\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 81 vector: MVARIABLE '(' expr ',' . '[' ']' ')'\l 95 vmdeclaration: MVARIABLE '(' expr ',' . expr ')' ASSIGN expr\l 96              | MVARIABLE '(' expr ',' . '[' ']' ')' ASSIGN vector\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l125     | MVARIABLE '(' expr ',' . expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  208 -> 76 [style=dotted]
  208 -> 5 [style=solid label="BOOL"]
  208 -> 6 [style=solid label="INTEGER"]
  208 -> 59 [style=solid label="VARIABLE"]
  208 -> 77 [style=solid label="VVARIABLE"]
  208 -> 78 [style=solid label="MVARIABLE"]
  208 -> 27 [style=solid label="MOVE"]
  208 -> 30 [style=solid label="ROBEX"]
  208 -> 31 [style=solid label="WALL"]
  208 -> 32 [style=solid label="'-'"]
  208 -> 33 [style=solid label="'!'"]
  208 -> 64 [style=solid label="'('"]
  208 -> 244 [style=solid label="'['"]
  208 -> 40 [style=dashed label="robotmove"]
  208 -> 43 [style=dashed label="robotwall"]
  208 -> 44 [style=dashed label="robotexit"]
  208 -> 245 [style=dashed label="expr"]
  208 -> 57 [style=dashed label="const"]
  209 [label="State 209\n\l 58 callfunction: FVARIABLE '[' callfunc_args ']' .\l"]
  209 -> "209R58" [style=solid]
 "209R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  210 [label="State 210\n\l108 print: PRINT '(' VVARIABLE ')' .\l"]
  210 -> "210R108" [style=solid]
 "210R108" [label="R108", fillcolor=3, shape=diamond, style=filled]
  211 [label="State 211\n\l109 print: PRINT '(' MVARIABLE ')' .\l"]
  211 -> "211R109" [style=solid]
 "211R109" [label="R109", fillcolor=3, shape=diamond, style=filled]
  212 [label="State 212\n\l107 print: PRINT '(' expr ')' .\l"]
  212 -> "212R107" [style=solid]
 "212R107" [label="R107", fillcolor=3, shape=diamond, style=filled]
  213 [label="State 213\n\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l125     | MVARIABLE '(' expr . ',' expr ')'\l"]
  213 -> 119 [style=solid label="CONJUNCTION"]
  213 -> 246 [style=solid label="','"]
  213 -> 120 [style=solid label="'<'"]
  213 -> 121 [style=solid label="'>'"]
  213 -> 122 [style=solid label="'+'"]
  213 -> 123 [style=solid label="'-'"]
  213 -> 124 [style=solid label="'/'"]
  214 [label="State 214\n\l 32 begif: B .\l"]
  214 -> "214R32" [style=solid]
 "214R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  215 [label="State 215\n\l 33 begif: BEGIF .\l"]
  215 -> "215R33" [style=solid]
 "215R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  216 [label="State 216\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 31    | IF expr NEWLINE begif . stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 48 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 49         | . error E\l 58 callfunction: . FVARIABLE '[' callfunc_args ']'\l 59             | . error '[' callfunc_args ']'\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 93 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 94              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 95              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 96              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 97              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 98              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 99              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l100              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l101 declaration: . type VAR DECLARE expr\l102            | . type VAR DECLARE vector\l103            | . type VAR DECLARE matrix\l104 assignment: . VARIABLE ASSIGN expr\l105           | . VVARIABLE ASSIGN vector\l106           | . MVARIABLE ASSIGN matrix\l107 print: . PRINT '(' expr ')'\l108      | . PRINT '(' VVARIABLE ')'\l109      | . PRINT '(' MVARIABLE ')'\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l127 type: . INT\l128     | . CINT\l129     | . VINT\l130     | . MINT\l131     | . CVINT\l132     | . CMINT\l133     | . BOOLEAN\l134     | . CBOOLEAN\l135     | . VBOOLEAN\l136     | . MBOOLEAN\l137     | . CVBOOLEAN\l138     | . CMBOOLEAN\l139 const: . INTEGER\l140      | . BOOL\l"]
  216 -> 84 [style=dotted]
  216 -> 5 [style=solid label="BOOL"]
  216 -> 6 [style=solid label="INTEGER"]
  216 -> 7 [style=solid label="VARIABLE"]
  216 -> 8 [style=solid label="VVARIABLE"]
  216 -> 9 [style=solid label="MVARIABLE"]
  216 -> 10 [style=solid label="FVARIABLE"]
  216 -> 11 [style=solid label="CINT"]
  216 -> 12 [style=solid label="VINT"]
  216 -> 13 [style=solid label="MINT"]
  216 -> 14 [style=solid label="INT"]
  216 -> 15 [style=solid label="CVINT"]
  216 -> 16 [style=solid label="CMINT"]
  216 -> 17 [style=solid label="BOOLEAN"]
  216 -> 18 [style=solid label="CBOOLEAN"]
  216 -> 19 [style=solid label="VBOOLEAN"]
  216 -> 20 [style=solid label="MBOOLEAN"]
  216 -> 21 [style=solid label="CVBOOLEAN"]
  216 -> 22 [style=solid label="CMBOOLEAN"]
  216 -> 23 [style=solid label="NEWLINE"]
  216 -> 24 [style=solid label="PRINT"]
  216 -> 25 [style=solid label="IF"]
  216 -> 26 [style=solid label="FORR"]
  216 -> 27 [style=solid label="MOVE"]
  216 -> 28 [style=solid label="RIGHT"]
  216 -> 29 [style=solid label="LEFT"]
  216 -> 30 [style=solid label="ROBEX"]
  216 -> 31 [style=solid label="WALL"]
  216 -> 32 [style=solid label="'-'"]
  216 -> 33 [style=solid label="'!'"]
  216 -> 34 [style=solid label="'('"]
  216 -> 35 [style=solid label="'['"]
  216 -> 36 [style=solid label="'{'"]
  216 -> 247 [style=dashed label="stmts"]
  216 -> 38 [style=dashed label="stmt"]
  216 -> 39 [style=dashed label="robotactions"]
  216 -> 40 [style=dashed label="robotmove"]
  216 -> 41 [style=dashed label="robotright"]
  216 -> 42 [style=dashed label="robotleft"]
  216 -> 43 [style=dashed label="robotwall"]
  216 -> 44 [style=dashed label="robotexit"]
  216 -> 45 [style=dashed label="iff"]
  216 -> 46 [style=dashed label="forr"]
  216 -> 47 [style=dashed label="function"]
  216 -> 48 [style=dashed label="callfunction"]
  216 -> 49 [style=dashed label="matrix"]
  216 -> 50 [style=dashed label="vector"]
  216 -> 51 [style=dashed label="vmdeclaration"]
  216 -> 52 [style=dashed label="declaration"]
  216 -> 53 [style=dashed label="assignment"]
  216 -> 54 [style=dashed label="print"]
  216 -> 55 [style=dashed label="expr"]
  216 -> 56 [style=dashed label="type"]
  216 -> 57 [style=dashed label="const"]
  217 [label="State 217\n\l 40 forr: FORR declaration DOUBLEDOT expr . NEWLINE begfor stmts endfor\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  217 -> 248 [style=solid label="NEWLINE"]
  217 -> 119 [style=solid label="CONJUNCTION"]
  217 -> 120 [style=solid label="'<'"]
  217 -> 121 [style=solid label="'>'"]
  217 -> 122 [style=solid label="'+'"]
  217 -> 123 [style=solid label="'-'"]
  217 -> 124 [style=solid label="'/'"]
  218 [label="State 218\n\l 26 robotmove: MOVE '(' expr ')' .\l"]
  218 -> "218R26" [style=solid]
 "218R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  219 [label="State 219\n\l 42 return_func: return_func ',' type . VAR\l"]
  219 -> 249 [style=solid label="VAR"]
  220 [label="State 220\n\l 48 function: '[' return_func ']' DECLARE . FUNC VAR '(' args_func ')' B NEWLINE stmts E\l"]
  220 -> 250 [style=solid label="FUNC"]
  221 [label="State 221\n\l 82 vector: MVARIABLE '(' '[' . ']' ',' expr ')'\l"]
  221 -> 251 [style=solid label="']'"]
  222 [label="State 222\n\l 77 listexprs: listexprs ',' vector .  [error, ',', '}']\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l"]
  222 -> 110 [style=solid label="ELEMMULT"]
  222 -> 112 [style=solid label="LEFTSHIFT"]
  222 -> 113 [style=solid label="RIGHTSHIFT"]
  222 -> "222R77" [style=solid]
 "222R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  223 [label="State 223\n\l 76 listexprs: vector ',' vector .  [error, ',', '}']\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l"]
  223 -> 110 [style=solid label="ELEMMULT"]
  223 -> 112 [style=solid label="LEFTSHIFT"]
  223 -> 113 [style=solid label="RIGHTSHIFT"]
  223 -> "223R76" [style=solid]
 "223R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
  224 [label="State 224\n\l 91 exprs: exprs ',' expr .  [error, ',', '}']\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  224 -> 119 [style=solid label="CONJUNCTION"]
  224 -> 120 [style=solid label="'<'"]
  224 -> 121 [style=solid label="'>'"]
  224 -> 122 [style=solid label="'+'"]
  224 -> 123 [style=solid label="'-'"]
  224 -> 124 [style=solid label="'/'"]
  224 -> "224R91" [style=solid]
 "224R91" [label="R91", fillcolor=3, shape=diamond, style=filled]
  225 [label="State 225\n\l 90 exprs: expr ',' expr .  [error, ',', '}']\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  225 -> 119 [style=solid label="CONJUNCTION"]
  225 -> 120 [style=solid label="'<'"]
  225 -> 121 [style=solid label="'>'"]
  225 -> 122 [style=solid label="'+'"]
  225 -> 123 [style=solid label="'-'"]
  225 -> 124 [style=solid label="'/'"]
  225 -> "225R90" [style=solid]
 "225R90" [label="R90", fillcolor=3, shape=diamond, style=filled]
  226 [label="State 226\n\l 65 matrix: matrix . '*' matrix\l 66       | matrix . ELEMMULT matrix\l 67       | matrix . '\\''\l 68       | matrix . RIGHTSHIFT\l 69       | matrix . LEFTSHIFT\l 71       | matrix . ELEMMULT vector\l 72       | matrix . ELEMMULT expr\l103 declaration: type VAR DECLARE matrix .  [NEWLINE, DOUBLEDOT]\l"]
  226 -> 104 [style=solid label="ELEMMULT"]
  226 -> 105 [style=solid label="'\\''"]
  226 -> 106 [style=solid label="LEFTSHIFT"]
  226 -> 107 [style=solid label="RIGHTSHIFT"]
  226 -> 108 [style=solid label="'*'"]
  226 -> "226R103" [style=solid]
 "226R103" [label="R103", fillcolor=3, shape=diamond, style=filled]
  227 [label="State 227\n\l 70 matrix: vector . '\\''\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l102 declaration: type VAR DECLARE vector .  [NEWLINE, DOUBLEDOT]\l"]
  227 -> 110 [style=solid label="ELEMMULT"]
  227 -> 111 [style=solid label="'\\''"]
  227 -> 112 [style=solid label="LEFTSHIFT"]
  227 -> 113 [style=solid label="RIGHTSHIFT"]
  227 -> "227R102" [style=solid]
 "227R102" [label="R102", fillcolor=3, shape=diamond, style=filled]
  228 [label="State 228\n\l101 declaration: type VAR DECLARE expr .  [NEWLINE, DOUBLEDOT]\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  228 -> 119 [style=solid label="CONJUNCTION"]
  228 -> 120 [style=solid label="'<'"]
  228 -> 121 [style=solid label="'>'"]
  228 -> 122 [style=solid label="'+'"]
  228 -> 123 [style=solid label="'-'"]
  228 -> 124 [style=solid label="'/'"]
  228 -> "228R101" [style=solid]
 "228R101" [label="R101", fillcolor=3, shape=diamond, style=filled]
  229 [label="State 229\n\l 80 vector: VVARIABLE '(' vector ',' . '[' ']' ')'\l"]
  229 -> 252 [style=solid label="'['"]
  230 [label="State 230\n\l124 expr: VVARIABLE '(' expr ')' .\l"]
  230 -> "230R124" [style=solid]
 "230R124" [label="R124", fillcolor=3, shape=diamond, style=filled]
  231 [label="State 231\n\l 62 matrix: MVARIABLE '(' '[' ']' . ',' vector ')'\l 82 vector: MVARIABLE '(' '[' ']' . ',' expr ')'\l"]
  231 -> 253 [style=solid label="','"]
  232 [label="State 232\n\l 63 matrix: MVARIABLE '(' matrix ')' .\l"]
  232 -> "232R63" [style=solid]
 "232R63" [label="R63", fillcolor=3, shape=diamond, style=filled]
  233 [label="State 233\n\l 61 matrix: MVARIABLE '(' vector ',' . '[' ']' ')'\l"]
  233 -> 254 [style=solid label="'['"]
  234 [label="State 234\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 81 vector: MVARIABLE '(' expr ',' . '[' ']' ')'\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l125     | MVARIABLE '(' expr ',' . expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  234 -> 76 [style=dotted]
  234 -> 5 [style=solid label="BOOL"]
  234 -> 6 [style=solid label="INTEGER"]
  234 -> 59 [style=solid label="VARIABLE"]
  234 -> 77 [style=solid label="VVARIABLE"]
  234 -> 78 [style=solid label="MVARIABLE"]
  234 -> 27 [style=solid label="MOVE"]
  234 -> 30 [style=solid label="ROBEX"]
  234 -> 31 [style=solid label="WALL"]
  234 -> 32 [style=solid label="'-'"]
  234 -> 33 [style=solid label="'!'"]
  234 -> 64 [style=solid label="'('"]
  234 -> 255 [style=solid label="'['"]
  234 -> 40 [style=dashed label="robotmove"]
  234 -> 43 [style=dashed label="robotwall"]
  234 -> 44 [style=dashed label="robotexit"]
  234 -> 256 [style=dashed label="expr"]
  234 -> 57 [style=dashed label="const"]
  235 [label="State 235\n\l 55 callfunc_args: callfunc_args ',' matrix .  [error, ',', ']']\l 65 matrix: matrix . '*' matrix\l 66       | matrix . ELEMMULT matrix\l 67       | matrix . '\\''\l 68       | matrix . RIGHTSHIFT\l 69       | matrix . LEFTSHIFT\l 71       | matrix . ELEMMULT vector\l 72       | matrix . ELEMMULT expr\l"]
  235 -> 104 [style=solid label="ELEMMULT"]
  235 -> 105 [style=solid label="'\\''"]
  235 -> 106 [style=solid label="LEFTSHIFT"]
  235 -> 107 [style=solid label="RIGHTSHIFT"]
  235 -> 108 [style=solid label="'*'"]
  235 -> "235R55" [style=solid]
 "235R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  236 [label="State 236\n\l 54 callfunc_args: callfunc_args ',' vector .  [error, ',', ']']\l 70 matrix: vector . '\\''\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l"]
  236 -> 110 [style=solid label="ELEMMULT"]
  236 -> 111 [style=solid label="'\\''"]
  236 -> 112 [style=solid label="LEFTSHIFT"]
  236 -> 113 [style=solid label="RIGHTSHIFT"]
  236 -> "236R54" [style=solid]
 "236R54" [label="R54", fillcolor=3, shape=diamond, style=filled]
  237 [label="State 237\n\l 53 callfunc_args: callfunc_args ',' expr .  [error, ',', ']']\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  237 -> 119 [style=solid label="CONJUNCTION"]
  237 -> 120 [style=solid label="'<'"]
  237 -> 121 [style=solid label="'>'"]
  237 -> 122 [style=solid label="'+'"]
  237 -> 123 [style=solid label="'-'"]
  237 -> 124 [style=solid label="'/'"]
  237 -> "237R53" [style=solid]
 "237R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
  238 [label="State 238\n\l 81 vector: MVARIABLE '(' expr . ',' '[' ']' ')'\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  238 -> 119 [style=solid label="CONJUNCTION"]
  238 -> 257 [style=solid label="','"]
  238 -> 120 [style=solid label="'<'"]
  238 -> 121 [style=solid label="'>'"]
  238 -> 122 [style=solid label="'+'"]
  238 -> 123 [style=solid label="'-'"]
  238 -> 124 [style=solid label="'/'"]
  239 [label="State 239\n\l 80 vector: VVARIABLE '(' vector ',' '[' . ']' ')'\l 94 vmdeclaration: VVARIABLE '(' vector ',' '[' . ']' ')' ASSIGN vector\l"]
  239 -> 258 [style=solid label="']'"]
  240 [label="State 240\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 93 vmdeclaration: VVARIABLE '(' expr ')' ASSIGN . expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  240 -> 76 [style=dotted]
  240 -> 5 [style=solid label="BOOL"]
  240 -> 6 [style=solid label="INTEGER"]
  240 -> 59 [style=solid label="VARIABLE"]
  240 -> 77 [style=solid label="VVARIABLE"]
  240 -> 78 [style=solid label="MVARIABLE"]
  240 -> 27 [style=solid label="MOVE"]
  240 -> 30 [style=solid label="ROBEX"]
  240 -> 31 [style=solid label="WALL"]
  240 -> 32 [style=solid label="'-'"]
  240 -> 33 [style=solid label="'!'"]
  240 -> 64 [style=solid label="'('"]
  240 -> 40 [style=dashed label="robotmove"]
  240 -> 43 [style=dashed label="robotwall"]
  240 -> 44 [style=dashed label="robotexit"]
  240 -> 259 [style=dashed label="expr"]
  240 -> 57 [style=dashed label="const"]
  241 [label="State 241\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 62 matrix: MVARIABLE '(' '[' ']' ',' . vector ')'\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 82       | MVARIABLE '(' '[' ']' ',' . expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 97 vmdeclaration: MVARIABLE '(' '[' ']' ',' . expr ')' ASSIGN vector\l 99              | MVARIABLE '(' '[' ']' ',' . vector ')' ASSIGN matrix\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  241 -> 89 [style=dotted]
  241 -> 5 [style=solid label="BOOL"]
  241 -> 6 [style=solid label="INTEGER"]
  241 -> 59 [style=solid label="VARIABLE"]
  241 -> 60 [style=solid label="VVARIABLE"]
  241 -> 90 [style=solid label="MVARIABLE"]
  241 -> 27 [style=solid label="MOVE"]
  241 -> 30 [style=solid label="ROBEX"]
  241 -> 31 [style=solid label="WALL"]
  241 -> 32 [style=solid label="'-'"]
  241 -> 33 [style=solid label="'!'"]
  241 -> 64 [style=solid label="'('"]
  241 -> 91 [style=solid label="'{'"]
  241 -> 40 [style=dashed label="robotmove"]
  241 -> 43 [style=dashed label="robotwall"]
  241 -> 44 [style=dashed label="robotexit"]
  241 -> 260 [style=dashed label="vector"]
  241 -> 261 [style=dashed label="expr"]
  241 -> 57 [style=dashed label="const"]
  242 [label="State 242\n\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l100 vmdeclaration: MVARIABLE '(' matrix ')' ASSIGN . matrix\l"]
  242 -> 141 [style=dotted]
  242 -> 136 [style=solid label="VVARIABLE"]
  242 -> 142 [style=solid label="MVARIABLE"]
  242 -> 36 [style=solid label="'{'"]
  242 -> 262 [style=dashed label="matrix"]
  242 -> 144 [style=dashed label="vector"]
  243 [label="State 243\n\l 61 matrix: MVARIABLE '(' vector ',' '[' . ']' ')'\l 98 vmdeclaration: MVARIABLE '(' vector ',' '[' . ']' ')' ASSIGN matrix\l"]
  243 -> 263 [style=solid label="']'"]
  244 [label="State 244\n\l 81 vector: MVARIABLE '(' expr ',' '[' . ']' ')'\l 96 vmdeclaration: MVARIABLE '(' expr ',' '[' . ']' ')' ASSIGN vector\l"]
  244 -> 264 [style=solid label="']'"]
  245 [label="State 245\n\l 95 vmdeclaration: MVARIABLE '(' expr ',' expr . ')' ASSIGN expr\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l125     | MVARIABLE '(' expr ',' expr . ')'\l"]
  245 -> 119 [style=solid label="CONJUNCTION"]
  245 -> 120 [style=solid label="'<'"]
  245 -> 121 [style=solid label="'>'"]
  245 -> 122 [style=solid label="'+'"]
  245 -> 123 [style=solid label="'-'"]
  245 -> 124 [style=solid label="'/'"]
  245 -> 265 [style=solid label="')'"]
  246 [label="State 246\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l125     | MVARIABLE '(' expr ',' . expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  246 -> 76 [style=dotted]
  246 -> 5 [style=solid label="BOOL"]
  246 -> 6 [style=solid label="INTEGER"]
  246 -> 59 [style=solid label="VARIABLE"]
  246 -> 77 [style=solid label="VVARIABLE"]
  246 -> 78 [style=solid label="MVARIABLE"]
  246 -> 27 [style=solid label="MOVE"]
  246 -> 30 [style=solid label="ROBEX"]
  246 -> 31 [style=solid label="WALL"]
  246 -> 32 [style=solid label="'-'"]
  246 -> 33 [style=solid label="'!'"]
  246 -> 64 [style=solid label="'('"]
  246 -> 40 [style=dashed label="robotmove"]
  246 -> 43 [style=dashed label="robotwall"]
  246 -> 44 [style=dashed label="robotexit"]
  246 -> 256 [style=dashed label="expr"]
  246 -> 57 [style=dashed label="const"]
  247 [label="State 247\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 31    | IF expr NEWLINE begif stmts . endif\l 34 endif: . E\l 35      | . ENDIF\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 48 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 49         | . error E\l 58 callfunction: . FVARIABLE '[' callfunc_args ']'\l 59             | . error '[' callfunc_args ']'\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 93 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 94              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 95              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 96              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 97              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 98              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 99              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l100              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l101 declaration: . type VAR DECLARE expr\l102            | . type VAR DECLARE vector\l103            | . type VAR DECLARE matrix\l104 assignment: . VARIABLE ASSIGN expr\l105           | . VVARIABLE ASSIGN vector\l106           | . MVARIABLE ASSIGN matrix\l107 print: . PRINT '(' expr ')'\l108      | . PRINT '(' VVARIABLE ')'\l109      | . PRINT '(' MVARIABLE ')'\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l127 type: . INT\l128     | . CINT\l129     | . VINT\l130     | . MINT\l131     | . CVINT\l132     | . CMINT\l133     | . BOOLEAN\l134     | . CBOOLEAN\l135     | . VBOOLEAN\l136     | . MBOOLEAN\l137     | . CVBOOLEAN\l138     | . CMBOOLEAN\l139 const: . INTEGER\l140      | . BOOL\l"]
  247 -> 96 [style=dotted]
  247 -> 5 [style=solid label="BOOL"]
  247 -> 6 [style=solid label="INTEGER"]
  247 -> 7 [style=solid label="VARIABLE"]
  247 -> 8 [style=solid label="VVARIABLE"]
  247 -> 9 [style=solid label="MVARIABLE"]
  247 -> 10 [style=solid label="FVARIABLE"]
  247 -> 11 [style=solid label="CINT"]
  247 -> 12 [style=solid label="VINT"]
  247 -> 13 [style=solid label="MINT"]
  247 -> 14 [style=solid label="INT"]
  247 -> 15 [style=solid label="CVINT"]
  247 -> 16 [style=solid label="CMINT"]
  247 -> 17 [style=solid label="BOOLEAN"]
  247 -> 18 [style=solid label="CBOOLEAN"]
  247 -> 19 [style=solid label="VBOOLEAN"]
  247 -> 20 [style=solid label="MBOOLEAN"]
  247 -> 21 [style=solid label="CVBOOLEAN"]
  247 -> 22 [style=solid label="CMBOOLEAN"]
  247 -> 23 [style=solid label="NEWLINE"]
  247 -> 24 [style=solid label="PRINT"]
  247 -> 25 [style=solid label="IF"]
  247 -> 26 [style=solid label="FORR"]
  247 -> 266 [style=solid label="E"]
  247 -> 27 [style=solid label="MOVE"]
  247 -> 28 [style=solid label="RIGHT"]
  247 -> 29 [style=solid label="LEFT"]
  247 -> 30 [style=solid label="ROBEX"]
  247 -> 31 [style=solid label="WALL"]
  247 -> 267 [style=solid label="ENDIF"]
  247 -> 32 [style=solid label="'-'"]
  247 -> 33 [style=solid label="'!'"]
  247 -> 34 [style=solid label="'('"]
  247 -> 35 [style=solid label="'['"]
  247 -> 36 [style=solid label="'{'"]
  247 -> 97 [style=dashed label="stmt"]
  247 -> 39 [style=dashed label="robotactions"]
  247 -> 40 [style=dashed label="robotmove"]
  247 -> 41 [style=dashed label="robotright"]
  247 -> 42 [style=dashed label="robotleft"]
  247 -> 43 [style=dashed label="robotwall"]
  247 -> 44 [style=dashed label="robotexit"]
  247 -> 45 [style=dashed label="iff"]
  247 -> 268 [style=dashed label="endif"]
  247 -> 46 [style=dashed label="forr"]
  247 -> 47 [style=dashed label="function"]
  247 -> 48 [style=dashed label="callfunction"]
  247 -> 49 [style=dashed label="matrix"]
  247 -> 50 [style=dashed label="vector"]
  247 -> 51 [style=dashed label="vmdeclaration"]
  247 -> 52 [style=dashed label="declaration"]
  247 -> 53 [style=dashed label="assignment"]
  247 -> 54 [style=dashed label="print"]
  247 -> 55 [style=dashed label="expr"]
  247 -> 56 [style=dashed label="type"]
  247 -> 57 [style=dashed label="const"]
  248 [label="State 248\n\l 36 begfor: . B\l 37       | . BEGFOR\l 40 forr: FORR declaration DOUBLEDOT expr NEWLINE . begfor stmts endfor\l"]
  248 -> 269 [style=solid label="B"]
  248 -> 270 [style=solid label="BEGFOR"]
  248 -> 271 [style=dashed label="begfor"]
  249 [label="State 249\n\l 42 return_func: return_func ',' type VAR .\l"]
  249 -> "249R42" [style=solid]
 "249R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
  250 [label="State 250\n\l 48 function: '[' return_func ']' DECLARE FUNC . VAR '(' args_func ')' B NEWLINE stmts E\l"]
  250 -> 272 [style=solid label="VAR"]
  251 [label="State 251\n\l 82 vector: MVARIABLE '(' '[' ']' . ',' expr ')'\l"]
  251 -> 273 [style=solid label="','"]
  252 [label="State 252\n\l 80 vector: VVARIABLE '(' vector ',' '[' . ']' ')'\l"]
  252 -> 274 [style=solid label="']'"]
  253 [label="State 253\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 62 matrix: MVARIABLE '(' '[' ']' ',' . vector ')'\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 82       | MVARIABLE '(' '[' ']' ',' . expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  253 -> 89 [style=dotted]
  253 -> 5 [style=solid label="BOOL"]
  253 -> 6 [style=solid label="INTEGER"]
  253 -> 59 [style=solid label="VARIABLE"]
  253 -> 60 [style=solid label="VVARIABLE"]
  253 -> 90 [style=solid label="MVARIABLE"]
  253 -> 27 [style=solid label="MOVE"]
  253 -> 30 [style=solid label="ROBEX"]
  253 -> 31 [style=solid label="WALL"]
  253 -> 32 [style=solid label="'-'"]
  253 -> 33 [style=solid label="'!'"]
  253 -> 64 [style=solid label="'('"]
  253 -> 91 [style=solid label="'{'"]
  253 -> 40 [style=dashed label="robotmove"]
  253 -> 43 [style=dashed label="robotwall"]
  253 -> 44 [style=dashed label="robotexit"]
  253 -> 275 [style=dashed label="vector"]
  253 -> 276 [style=dashed label="expr"]
  253 -> 57 [style=dashed label="const"]
  254 [label="State 254\n\l 61 matrix: MVARIABLE '(' vector ',' '[' . ']' ')'\l"]
  254 -> 277 [style=solid label="']'"]
  255 [label="State 255\n\l 81 vector: MVARIABLE '(' expr ',' '[' . ']' ')'\l"]
  255 -> 278 [style=solid label="']'"]
  256 [label="State 256\n\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l125     | MVARIABLE '(' expr ',' expr . ')'\l"]
  256 -> 119 [style=solid label="CONJUNCTION"]
  256 -> 120 [style=solid label="'<'"]
  256 -> 121 [style=solid label="'>'"]
  256 -> 122 [style=solid label="'+'"]
  256 -> 123 [style=solid label="'-'"]
  256 -> 124 [style=solid label="'/'"]
  256 -> 279 [style=solid label="')'"]
  257 [label="State 257\n\l 81 vector: MVARIABLE '(' expr ',' . '[' ']' ')'\l"]
  257 -> 255 [style=solid label="'['"]
  258 [label="State 258\n\l 80 vector: VVARIABLE '(' vector ',' '[' ']' . ')'\l 94 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' . ')' ASSIGN vector\l"]
  258 -> 280 [style=solid label="')'"]
  259 [label="State 259\n\l 93 vmdeclaration: VVARIABLE '(' expr ')' ASSIGN expr .  [NEWLINE]\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  259 -> 119 [style=solid label="CONJUNCTION"]
  259 -> 120 [style=solid label="'<'"]
  259 -> 121 [style=solid label="'>'"]
  259 -> 122 [style=solid label="'+'"]
  259 -> 123 [style=solid label="'-'"]
  259 -> 124 [style=solid label="'/'"]
  259 -> "259R93" [style=solid]
 "259R93" [label="R93", fillcolor=3, shape=diamond, style=filled]
  260 [label="State 260\n\l 62 matrix: MVARIABLE '(' '[' ']' ',' vector . ')'\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l 99 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector . ')' ASSIGN matrix\l"]
  260 -> 110 [style=solid label="ELEMMULT"]
  260 -> 112 [style=solid label="LEFTSHIFT"]
  260 -> 113 [style=solid label="RIGHTSHIFT"]
  260 -> 281 [style=solid label="')'"]
  261 [label="State 261\n\l 82 vector: MVARIABLE '(' '[' ']' ',' expr . ')'\l 97 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr . ')' ASSIGN vector\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  261 -> 119 [style=solid label="CONJUNCTION"]
  261 -> 120 [style=solid label="'<'"]
  261 -> 121 [style=solid label="'>'"]
  261 -> 122 [style=solid label="'+'"]
  261 -> 123 [style=solid label="'-'"]
  261 -> 124 [style=solid label="'/'"]
  261 -> 282 [style=solid label="')'"]
  262 [label="State 262\n\l 65 matrix: matrix . '*' matrix\l 66       | matrix . ELEMMULT matrix\l 67       | matrix . '\\''\l 68       | matrix . RIGHTSHIFT\l 69       | matrix . LEFTSHIFT\l 71       | matrix . ELEMMULT vector\l 72       | matrix . ELEMMULT expr\l100 vmdeclaration: MVARIABLE '(' matrix ')' ASSIGN matrix .  [NEWLINE]\l"]
  262 -> 104 [style=solid label="ELEMMULT"]
  262 -> 105 [style=solid label="'\\''"]
  262 -> 106 [style=solid label="LEFTSHIFT"]
  262 -> 107 [style=solid label="RIGHTSHIFT"]
  262 -> 108 [style=solid label="'*'"]
  262 -> "262R100" [style=solid]
 "262R100" [label="R100", fillcolor=3, shape=diamond, style=filled]
  263 [label="State 263\n\l 61 matrix: MVARIABLE '(' vector ',' '[' ']' . ')'\l 98 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' . ')' ASSIGN matrix\l"]
  263 -> 283 [style=solid label="')'"]
  264 [label="State 264\n\l 81 vector: MVARIABLE '(' expr ',' '[' ']' . ')'\l 96 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' . ')' ASSIGN vector\l"]
  264 -> 284 [style=solid label="')'"]
  265 [label="State 265\n\l 95 vmdeclaration: MVARIABLE '(' expr ',' expr ')' . ASSIGN expr\l125 expr: MVARIABLE '(' expr ',' expr ')' .  [NEWLINE, CONJUNCTION, '<', '>', '+', '-', '/', ')']\l"]
  265 -> 285 [style=solid label="ASSIGN"]
  265 -> "265R125" [style=solid]
 "265R125" [label="R125", fillcolor=3, shape=diamond, style=filled]
  266 [label="State 266\n\l 34 endif: E .\l"]
  266 -> "266R34" [style=solid]
 "266R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  267 [label="State 267\n\l 35 endif: ENDIF .\l"]
  267 -> "267R35" [style=solid]
 "267R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  268 [label="State 268\n\l 31 iff: IF expr NEWLINE begif stmts endif .\l"]
  268 -> "268R31" [style=solid]
 "268R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  269 [label="State 269\n\l 36 begfor: B .\l"]
  269 -> "269R36" [style=solid]
 "269R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  270 [label="State 270\n\l 37 begfor: BEGFOR .\l"]
  270 -> "270R37" [style=solid]
 "270R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  271 [label="State 271\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 40     | FORR declaration DOUBLEDOT expr NEWLINE begfor . stmts endfor\l 48 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 49         | . error E\l 58 callfunction: . FVARIABLE '[' callfunc_args ']'\l 59             | . error '[' callfunc_args ']'\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 93 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 94              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 95              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 96              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 97              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 98              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 99              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l100              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l101 declaration: . type VAR DECLARE expr\l102            | . type VAR DECLARE vector\l103            | . type VAR DECLARE matrix\l104 assignment: . VARIABLE ASSIGN expr\l105           | . VVARIABLE ASSIGN vector\l106           | . MVARIABLE ASSIGN matrix\l107 print: . PRINT '(' expr ')'\l108      | . PRINT '(' VVARIABLE ')'\l109      | . PRINT '(' MVARIABLE ')'\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l127 type: . INT\l128     | . CINT\l129     | . VINT\l130     | . MINT\l131     | . CVINT\l132     | . CMINT\l133     | . BOOLEAN\l134     | . CBOOLEAN\l135     | . VBOOLEAN\l136     | . MBOOLEAN\l137     | . CVBOOLEAN\l138     | . CMBOOLEAN\l139 const: . INTEGER\l140      | . BOOL\l"]
  271 -> 84 [style=dotted]
  271 -> 5 [style=solid label="BOOL"]
  271 -> 6 [style=solid label="INTEGER"]
  271 -> 7 [style=solid label="VARIABLE"]
  271 -> 8 [style=solid label="VVARIABLE"]
  271 -> 9 [style=solid label="MVARIABLE"]
  271 -> 10 [style=solid label="FVARIABLE"]
  271 -> 11 [style=solid label="CINT"]
  271 -> 12 [style=solid label="VINT"]
  271 -> 13 [style=solid label="MINT"]
  271 -> 14 [style=solid label="INT"]
  271 -> 15 [style=solid label="CVINT"]
  271 -> 16 [style=solid label="CMINT"]
  271 -> 17 [style=solid label="BOOLEAN"]
  271 -> 18 [style=solid label="CBOOLEAN"]
  271 -> 19 [style=solid label="VBOOLEAN"]
  271 -> 20 [style=solid label="MBOOLEAN"]
  271 -> 21 [style=solid label="CVBOOLEAN"]
  271 -> 22 [style=solid label="CMBOOLEAN"]
  271 -> 23 [style=solid label="NEWLINE"]
  271 -> 24 [style=solid label="PRINT"]
  271 -> 25 [style=solid label="IF"]
  271 -> 26 [style=solid label="FORR"]
  271 -> 27 [style=solid label="MOVE"]
  271 -> 28 [style=solid label="RIGHT"]
  271 -> 29 [style=solid label="LEFT"]
  271 -> 30 [style=solid label="ROBEX"]
  271 -> 31 [style=solid label="WALL"]
  271 -> 32 [style=solid label="'-'"]
  271 -> 33 [style=solid label="'!'"]
  271 -> 34 [style=solid label="'('"]
  271 -> 35 [style=solid label="'['"]
  271 -> 36 [style=solid label="'{'"]
  271 -> 286 [style=dashed label="stmts"]
  271 -> 38 [style=dashed label="stmt"]
  271 -> 39 [style=dashed label="robotactions"]
  271 -> 40 [style=dashed label="robotmove"]
  271 -> 41 [style=dashed label="robotright"]
  271 -> 42 [style=dashed label="robotleft"]
  271 -> 43 [style=dashed label="robotwall"]
  271 -> 44 [style=dashed label="robotexit"]
  271 -> 45 [style=dashed label="iff"]
  271 -> 46 [style=dashed label="forr"]
  271 -> 47 [style=dashed label="function"]
  271 -> 48 [style=dashed label="callfunction"]
  271 -> 49 [style=dashed label="matrix"]
  271 -> 50 [style=dashed label="vector"]
  271 -> 51 [style=dashed label="vmdeclaration"]
  271 -> 52 [style=dashed label="declaration"]
  271 -> 53 [style=dashed label="assignment"]
  271 -> 54 [style=dashed label="print"]
  271 -> 55 [style=dashed label="expr"]
  271 -> 56 [style=dashed label="type"]
  271 -> 57 [style=dashed label="const"]
  272 [label="State 272\n\l 48 function: '[' return_func ']' DECLARE FUNC VAR . '(' args_func ')' B NEWLINE stmts E\l"]
  272 -> 287 [style=solid label="'('"]
  273 [label="State 273\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 82 vector: MVARIABLE '(' '[' ']' ',' . expr ')'\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  273 -> 76 [style=dotted]
  273 -> 5 [style=solid label="BOOL"]
  273 -> 6 [style=solid label="INTEGER"]
  273 -> 59 [style=solid label="VARIABLE"]
  273 -> 77 [style=solid label="VVARIABLE"]
  273 -> 78 [style=solid label="MVARIABLE"]
  273 -> 27 [style=solid label="MOVE"]
  273 -> 30 [style=solid label="ROBEX"]
  273 -> 31 [style=solid label="WALL"]
  273 -> 32 [style=solid label="'-'"]
  273 -> 33 [style=solid label="'!'"]
  273 -> 64 [style=solid label="'('"]
  273 -> 40 [style=dashed label="robotmove"]
  273 -> 43 [style=dashed label="robotwall"]
  273 -> 44 [style=dashed label="robotexit"]
  273 -> 276 [style=dashed label="expr"]
  273 -> 57 [style=dashed label="const"]
  274 [label="State 274\n\l 80 vector: VVARIABLE '(' vector ',' '[' ']' . ')'\l"]
  274 -> 288 [style=solid label="')'"]
  275 [label="State 275\n\l 62 matrix: MVARIABLE '(' '[' ']' ',' vector . ')'\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l"]
  275 -> 110 [style=solid label="ELEMMULT"]
  275 -> 112 [style=solid label="LEFTSHIFT"]
  275 -> 113 [style=solid label="RIGHTSHIFT"]
  275 -> 289 [style=solid label="')'"]
  276 [label="State 276\n\l 82 vector: MVARIABLE '(' '[' ']' ',' expr . ')'\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  276 -> 119 [style=solid label="CONJUNCTION"]
  276 -> 120 [style=solid label="'<'"]
  276 -> 121 [style=solid label="'>'"]
  276 -> 122 [style=solid label="'+'"]
  276 -> 123 [style=solid label="'-'"]
  276 -> 124 [style=solid label="'/'"]
  276 -> 290 [style=solid label="')'"]
  277 [label="State 277\n\l 61 matrix: MVARIABLE '(' vector ',' '[' ']' . ')'\l"]
  277 -> 291 [style=solid label="')'"]
  278 [label="State 278\n\l 81 vector: MVARIABLE '(' expr ',' '[' ']' . ')'\l"]
  278 -> 292 [style=solid label="')'"]
  279 [label="State 279\n\l125 expr: MVARIABLE '(' expr ',' expr ')' .\l"]
  279 -> "279R125" [style=solid]
 "279R125" [label="R125", fillcolor=3, shape=diamond, style=filled]
  280 [label="State 280\n\l 80 vector: VVARIABLE '(' vector ',' '[' ']' ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l 94 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' ')' . ASSIGN vector\l"]
  280 -> 293 [style=solid label="ASSIGN"]
  280 -> "280R80" [style=solid]
 "280R80" [label="R80", fillcolor=3, shape=diamond, style=filled]
  281 [label="State 281\n\l 62 matrix: MVARIABLE '(' '[' ']' ',' vector ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l 99 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector ')' . ASSIGN matrix\l"]
  281 -> 294 [style=solid label="ASSIGN"]
  281 -> "281R62" [style=solid]
 "281R62" [label="R62", fillcolor=3, shape=diamond, style=filled]
  282 [label="State 282\n\l 82 vector: MVARIABLE '(' '[' ']' ',' expr ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l 97 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr ')' . ASSIGN vector\l"]
  282 -> 295 [style=solid label="ASSIGN"]
  282 -> "282R82" [style=solid]
 "282R82" [label="R82", fillcolor=3, shape=diamond, style=filled]
  283 [label="State 283\n\l 61 matrix: MVARIABLE '(' vector ',' '[' ']' ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l 98 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' ')' . ASSIGN matrix\l"]
  283 -> 296 [style=solid label="ASSIGN"]
  283 -> "283R61" [style=solid]
 "283R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
  284 [label="State 284\n\l 81 vector: MVARIABLE '(' expr ',' '[' ']' ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l 96 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' ')' . ASSIGN vector\l"]
  284 -> 297 [style=solid label="ASSIGN"]
  284 -> "284R81" [style=solid]
 "284R81" [label="R81", fillcolor=3, shape=diamond, style=filled]
  285 [label="State 285\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 95 vmdeclaration: MVARIABLE '(' expr ',' expr ')' ASSIGN . expr\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l139 const: . INTEGER\l140      | . BOOL\l"]
  285 -> 76 [style=dotted]
  285 -> 5 [style=solid label="BOOL"]
  285 -> 6 [style=solid label="INTEGER"]
  285 -> 59 [style=solid label="VARIABLE"]
  285 -> 77 [style=solid label="VVARIABLE"]
  285 -> 78 [style=solid label="MVARIABLE"]
  285 -> 27 [style=solid label="MOVE"]
  285 -> 30 [style=solid label="ROBEX"]
  285 -> 31 [style=solid label="WALL"]
  285 -> 32 [style=solid label="'-'"]
  285 -> 33 [style=solid label="'!'"]
  285 -> 64 [style=solid label="'('"]
  285 -> 40 [style=dashed label="robotmove"]
  285 -> 43 [style=dashed label="robotwall"]
  285 -> 44 [style=dashed label="robotexit"]
  285 -> 298 [style=dashed label="expr"]
  285 -> 57 [style=dashed label="const"]
  286 [label="State 286\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 38 endfor: . E\l 39       | . ENDFOR\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 40     | FORR declaration DOUBLEDOT expr NEWLINE begfor stmts . endfor\l 48 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 49         | . error E\l 58 callfunction: . FVARIABLE '[' callfunc_args ']'\l 59             | . error '[' callfunc_args ']'\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 93 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 94              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 95              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 96              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 97              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 98              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 99              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l100              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l101 declaration: . type VAR DECLARE expr\l102            | . type VAR DECLARE vector\l103            | . type VAR DECLARE matrix\l104 assignment: . VARIABLE ASSIGN expr\l105           | . VVARIABLE ASSIGN vector\l106           | . MVARIABLE ASSIGN matrix\l107 print: . PRINT '(' expr ')'\l108      | . PRINT '(' VVARIABLE ')'\l109      | . PRINT '(' MVARIABLE ')'\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l127 type: . INT\l128     | . CINT\l129     | . VINT\l130     | . MINT\l131     | . CVINT\l132     | . CMINT\l133     | . BOOLEAN\l134     | . CBOOLEAN\l135     | . VBOOLEAN\l136     | . MBOOLEAN\l137     | . CVBOOLEAN\l138     | . CMBOOLEAN\l139 const: . INTEGER\l140      | . BOOL\l"]
  286 -> 96 [style=dotted]
  286 -> 5 [style=solid label="BOOL"]
  286 -> 6 [style=solid label="INTEGER"]
  286 -> 7 [style=solid label="VARIABLE"]
  286 -> 8 [style=solid label="VVARIABLE"]
  286 -> 9 [style=solid label="MVARIABLE"]
  286 -> 10 [style=solid label="FVARIABLE"]
  286 -> 11 [style=solid label="CINT"]
  286 -> 12 [style=solid label="VINT"]
  286 -> 13 [style=solid label="MINT"]
  286 -> 14 [style=solid label="INT"]
  286 -> 15 [style=solid label="CVINT"]
  286 -> 16 [style=solid label="CMINT"]
  286 -> 17 [style=solid label="BOOLEAN"]
  286 -> 18 [style=solid label="CBOOLEAN"]
  286 -> 19 [style=solid label="VBOOLEAN"]
  286 -> 20 [style=solid label="MBOOLEAN"]
  286 -> 21 [style=solid label="CVBOOLEAN"]
  286 -> 22 [style=solid label="CMBOOLEAN"]
  286 -> 23 [style=solid label="NEWLINE"]
  286 -> 24 [style=solid label="PRINT"]
  286 -> 25 [style=solid label="IF"]
  286 -> 26 [style=solid label="FORR"]
  286 -> 299 [style=solid label="E"]
  286 -> 27 [style=solid label="MOVE"]
  286 -> 28 [style=solid label="RIGHT"]
  286 -> 29 [style=solid label="LEFT"]
  286 -> 30 [style=solid label="ROBEX"]
  286 -> 31 [style=solid label="WALL"]
  286 -> 300 [style=solid label="ENDFOR"]
  286 -> 32 [style=solid label="'-'"]
  286 -> 33 [style=solid label="'!'"]
  286 -> 34 [style=solid label="'('"]
  286 -> 35 [style=solid label="'['"]
  286 -> 36 [style=solid label="'{'"]
  286 -> 97 [style=dashed label="stmt"]
  286 -> 39 [style=dashed label="robotactions"]
  286 -> 40 [style=dashed label="robotmove"]
  286 -> 41 [style=dashed label="robotright"]
  286 -> 42 [style=dashed label="robotleft"]
  286 -> 43 [style=dashed label="robotwall"]
  286 -> 44 [style=dashed label="robotexit"]
  286 -> 45 [style=dashed label="iff"]
  286 -> 301 [style=dashed label="endfor"]
  286 -> 46 [style=dashed label="forr"]
  286 -> 47 [style=dashed label="function"]
  286 -> 48 [style=dashed label="callfunction"]
  286 -> 49 [style=dashed label="matrix"]
  286 -> 50 [style=dashed label="vector"]
  286 -> 51 [style=dashed label="vmdeclaration"]
  286 -> 52 [style=dashed label="declaration"]
  286 -> 53 [style=dashed label="assignment"]
  286 -> 54 [style=dashed label="print"]
  286 -> 55 [style=dashed label="expr"]
  286 -> 56 [style=dashed label="type"]
  286 -> 57 [style=dashed label="const"]
  287 [label="State 287\n\l 44 args_func: . '[' type VAR ']'\l 45          | . args_func ',' '[' type VAR ']'\l 46          | . args_func error\l 47          | . error\l 48 function: '[' return_func ']' DECLARE FUNC VAR '(' . args_func ')' B NEWLINE stmts E\l"]
  287 -> 302 [style=dotted]
  287 -> 303 [style=solid label="'['"]
  287 -> 304 [style=dashed label="args_func"]
  288 [label="State 288\n\l 80 vector: VVARIABLE '(' vector ',' '[' ']' ')' .\l"]
  288 -> "288R80" [style=solid]
 "288R80" [label="R80", fillcolor=3, shape=diamond, style=filled]
  289 [label="State 289\n\l 62 matrix: MVARIABLE '(' '[' ']' ',' vector ')' .\l"]
  289 -> "289R62" [style=solid]
 "289R62" [label="R62", fillcolor=3, shape=diamond, style=filled]
  290 [label="State 290\n\l 82 vector: MVARIABLE '(' '[' ']' ',' expr ')' .\l"]
  290 -> "290R82" [style=solid]
 "290R82" [label="R82", fillcolor=3, shape=diamond, style=filled]
  291 [label="State 291\n\l 61 matrix: MVARIABLE '(' vector ',' '[' ']' ')' .\l"]
  291 -> "291R61" [style=solid]
 "291R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
  292 [label="State 292\n\l 81 vector: MVARIABLE '(' expr ',' '[' ']' ')' .\l"]
  292 -> "292R81" [style=solid]
 "292R81" [label="R81", fillcolor=3, shape=diamond, style=filled]
  293 [label="State 293\n\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 94 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN . vector\l"]
  293 -> 135 [style=dotted]
  293 -> 136 [style=solid label="VVARIABLE"]
  293 -> 137 [style=solid label="MVARIABLE"]
  293 -> 91 [style=solid label="'{'"]
  293 -> 305 [style=dashed label="vector"]
  294 [label="State 294\n\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 99 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN . matrix\l"]
  294 -> 141 [style=dotted]
  294 -> 136 [style=solid label="VVARIABLE"]
  294 -> 142 [style=solid label="MVARIABLE"]
  294 -> 36 [style=solid label="'{'"]
  294 -> 306 [style=dashed label="matrix"]
  294 -> 144 [style=dashed label="vector"]
  295 [label="State 295\n\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 97 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN . vector\l"]
  295 -> 135 [style=dotted]
  295 -> 136 [style=solid label="VVARIABLE"]
  295 -> 137 [style=solid label="MVARIABLE"]
  295 -> 91 [style=solid label="'{'"]
  295 -> 307 [style=dashed label="vector"]
  296 [label="State 296\n\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 98 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN . matrix\l"]
  296 -> 141 [style=dotted]
  296 -> 136 [style=solid label="VVARIABLE"]
  296 -> 142 [style=solid label="MVARIABLE"]
  296 -> 36 [style=solid label="'{'"]
  296 -> 308 [style=dashed label="matrix"]
  296 -> 144 [style=dashed label="vector"]
  297 [label="State 297\n\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 96 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN . vector\l"]
  297 -> 135 [style=dotted]
  297 -> 136 [style=solid label="VVARIABLE"]
  297 -> 137 [style=solid label="MVARIABLE"]
  297 -> 91 [style=solid label="'{'"]
  297 -> 309 [style=dashed label="vector"]
  298 [label="State 298\n\l 95 vmdeclaration: MVARIABLE '(' expr ',' expr ')' ASSIGN expr .  [NEWLINE]\l116 expr: expr . '+' expr\l117     | expr . '-' expr\l118     | expr . '/' expr\l119     | expr . '<' expr\l120     | expr . '>' expr\l122     | expr . CONJUNCTION expr\l"]
  298 -> 119 [style=solid label="CONJUNCTION"]
  298 -> 120 [style=solid label="'<'"]
  298 -> 121 [style=solid label="'>'"]
  298 -> 122 [style=solid label="'+'"]
  298 -> 123 [style=solid label="'-'"]
  298 -> 124 [style=solid label="'/'"]
  298 -> "298R95" [style=solid]
 "298R95" [label="R95", fillcolor=3, shape=diamond, style=filled]
  299 [label="State 299\n\l 38 endfor: E .\l"]
  299 -> "299R38" [style=solid]
 "299R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  300 [label="State 300\n\l 39 endfor: ENDFOR .\l"]
  300 -> "300R39" [style=solid]
 "300R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  301 [label="State 301\n\l 40 forr: FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor .\l"]
  301 -> "301R40" [style=solid]
 "301R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  302 [label="State 302\n\l 47 args_func: error .\l"]
  302 -> "302R47" [style=solid]
 "302R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  303 [label="State 303\n\l 44 args_func: '[' . type VAR ']'\l127 type: . INT\l128     | . CINT\l129     | . VINT\l130     | . MINT\l131     | . CVINT\l132     | . CMINT\l133     | . BOOLEAN\l134     | . CBOOLEAN\l135     | . VBOOLEAN\l136     | . MBOOLEAN\l137     | . CVBOOLEAN\l138     | . CMBOOLEAN\l"]
  303 -> 11 [style=solid label="CINT"]
  303 -> 12 [style=solid label="VINT"]
  303 -> 13 [style=solid label="MINT"]
  303 -> 14 [style=solid label="INT"]
  303 -> 15 [style=solid label="CVINT"]
  303 -> 16 [style=solid label="CMINT"]
  303 -> 17 [style=solid label="BOOLEAN"]
  303 -> 18 [style=solid label="CBOOLEAN"]
  303 -> 19 [style=solid label="VBOOLEAN"]
  303 -> 20 [style=solid label="MBOOLEAN"]
  303 -> 21 [style=solid label="CVBOOLEAN"]
  303 -> 22 [style=solid label="CMBOOLEAN"]
  303 -> 310 [style=dashed label="type"]
  304 [label="State 304\n\l 45 args_func: args_func . ',' '[' type VAR ']'\l 46          | args_func . error\l 48 function: '[' return_func ']' DECLARE FUNC VAR '(' args_func . ')' B NEWLINE stmts E\l"]
  304 -> 311 [style=dotted]
  304 -> 312 [style=solid label="','"]
  304 -> 313 [style=solid label="')'"]
  305 [label="State 305\n\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l 94 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector .  [NEWLINE]\l"]
  305 -> 110 [style=solid label="ELEMMULT"]
  305 -> 112 [style=solid label="LEFTSHIFT"]
  305 -> 113 [style=solid label="RIGHTSHIFT"]
  305 -> "305R94" [style=solid]
 "305R94" [label="R94", fillcolor=3, shape=diamond, style=filled]
  306 [label="State 306\n\l 65 matrix: matrix . '*' matrix\l 66       | matrix . ELEMMULT matrix\l 67       | matrix . '\\''\l 68       | matrix . RIGHTSHIFT\l 69       | matrix . LEFTSHIFT\l 71       | matrix . ELEMMULT vector\l 72       | matrix . ELEMMULT expr\l 99 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix .  [NEWLINE]\l"]
  306 -> 104 [style=solid label="ELEMMULT"]
  306 -> 105 [style=solid label="'\\''"]
  306 -> 106 [style=solid label="LEFTSHIFT"]
  306 -> 107 [style=solid label="RIGHTSHIFT"]
  306 -> 108 [style=solid label="'*'"]
  306 -> "306R99" [style=solid]
 "306R99" [label="R99", fillcolor=3, shape=diamond, style=filled]
  307 [label="State 307\n\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l 97 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector .  [NEWLINE]\l"]
  307 -> 110 [style=solid label="ELEMMULT"]
  307 -> 112 [style=solid label="LEFTSHIFT"]
  307 -> 113 [style=solid label="RIGHTSHIFT"]
  307 -> "307R97" [style=solid]
 "307R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  308 [label="State 308\n\l 65 matrix: matrix . '*' matrix\l 66       | matrix . ELEMMULT matrix\l 67       | matrix . '\\''\l 68       | matrix . RIGHTSHIFT\l 69       | matrix . LEFTSHIFT\l 71       | matrix . ELEMMULT vector\l 72       | matrix . ELEMMULT expr\l 98 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix .  [NEWLINE]\l"]
  308 -> 104 [style=solid label="ELEMMULT"]
  308 -> 105 [style=solid label="'\\''"]
  308 -> 106 [style=solid label="LEFTSHIFT"]
  308 -> 107 [style=solid label="RIGHTSHIFT"]
  308 -> 108 [style=solid label="'*'"]
  308 -> "308R98" [style=solid]
 "308R98" [label="R98", fillcolor=3, shape=diamond, style=filled]
  309 [label="State 309\n\l 84 vector: vector . ELEMMULT vector\l 85       | vector . RIGHTSHIFT\l 86       | vector . LEFTSHIFT\l 87       | vector . ELEMMULT expr\l 96 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector .  [NEWLINE]\l"]
  309 -> 110 [style=solid label="ELEMMULT"]
  309 -> 112 [style=solid label="LEFTSHIFT"]
  309 -> 113 [style=solid label="RIGHTSHIFT"]
  309 -> "309R96" [style=solid]
 "309R96" [label="R96", fillcolor=3, shape=diamond, style=filled]
  310 [label="State 310\n\l 44 args_func: '[' type . VAR ']'\l"]
  310 -> 314 [style=solid label="VAR"]
  311 [label="State 311\n\l 46 args_func: args_func error .\l"]
  311 -> "311R46" [style=solid]
 "311R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
  312 [label="State 312\n\l 45 args_func: args_func ',' . '[' type VAR ']'\l"]
  312 -> 315 [style=solid label="'['"]
  313 [label="State 313\n\l 48 function: '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' . B NEWLINE stmts E\l"]
  313 -> 316 [style=solid label="B"]
  314 [label="State 314\n\l 44 args_func: '[' type VAR . ']'\l"]
  314 -> 317 [style=solid label="']'"]
  315 [label="State 315\n\l 45 args_func: args_func ',' '[' . type VAR ']'\l127 type: . INT\l128     | . CINT\l129     | . VINT\l130     | . MINT\l131     | . CVINT\l132     | . CMINT\l133     | . BOOLEAN\l134     | . CBOOLEAN\l135     | . VBOOLEAN\l136     | . MBOOLEAN\l137     | . CVBOOLEAN\l138     | . CMBOOLEAN\l"]
  315 -> 11 [style=solid label="CINT"]
  315 -> 12 [style=solid label="VINT"]
  315 -> 13 [style=solid label="MINT"]
  315 -> 14 [style=solid label="INT"]
  315 -> 15 [style=solid label="CVINT"]
  315 -> 16 [style=solid label="CMINT"]
  315 -> 17 [style=solid label="BOOLEAN"]
  315 -> 18 [style=solid label="CBOOLEAN"]
  315 -> 19 [style=solid label="VBOOLEAN"]
  315 -> 20 [style=solid label="MBOOLEAN"]
  315 -> 21 [style=solid label="CVBOOLEAN"]
  315 -> 22 [style=solid label="CMBOOLEAN"]
  315 -> 318 [style=dashed label="type"]
  316 [label="State 316\n\l 48 function: '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B . NEWLINE stmts E\l"]
  316 -> 319 [style=solid label="NEWLINE"]
  317 [label="State 317\n\l 44 args_func: '[' type VAR ']' .\l"]
  317 -> "317R44" [style=solid]
 "317R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  318 [label="State 318\n\l 45 args_func: args_func ',' '[' type . VAR ']'\l"]
  318 -> 320 [style=solid label="VAR"]
  319 [label="State 319\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 48 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 48         | '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE . stmts E\l 49         | . error E\l 58 callfunction: . FVARIABLE '[' callfunc_args ']'\l 59             | . error '[' callfunc_args ']'\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 93 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 94              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 95              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 96              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 97              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 98              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 99              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l100              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l101 declaration: . type VAR DECLARE expr\l102            | . type VAR DECLARE vector\l103            | . type VAR DECLARE matrix\l104 assignment: . VARIABLE ASSIGN expr\l105           | . VVARIABLE ASSIGN vector\l106           | . MVARIABLE ASSIGN matrix\l107 print: . PRINT '(' expr ')'\l108      | . PRINT '(' VVARIABLE ')'\l109      | . PRINT '(' MVARIABLE ')'\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l127 type: . INT\l128     | . CINT\l129     | . VINT\l130     | . MINT\l131     | . CVINT\l132     | . CMINT\l133     | . BOOLEAN\l134     | . CBOOLEAN\l135     | . VBOOLEAN\l136     | . MBOOLEAN\l137     | . CVBOOLEAN\l138     | . CMBOOLEAN\l139 const: . INTEGER\l140      | . BOOL\l"]
  319 -> 84 [style=dotted]
  319 -> 5 [style=solid label="BOOL"]
  319 -> 6 [style=solid label="INTEGER"]
  319 -> 7 [style=solid label="VARIABLE"]
  319 -> 8 [style=solid label="VVARIABLE"]
  319 -> 9 [style=solid label="MVARIABLE"]
  319 -> 10 [style=solid label="FVARIABLE"]
  319 -> 11 [style=solid label="CINT"]
  319 -> 12 [style=solid label="VINT"]
  319 -> 13 [style=solid label="MINT"]
  319 -> 14 [style=solid label="INT"]
  319 -> 15 [style=solid label="CVINT"]
  319 -> 16 [style=solid label="CMINT"]
  319 -> 17 [style=solid label="BOOLEAN"]
  319 -> 18 [style=solid label="CBOOLEAN"]
  319 -> 19 [style=solid label="VBOOLEAN"]
  319 -> 20 [style=solid label="MBOOLEAN"]
  319 -> 21 [style=solid label="CVBOOLEAN"]
  319 -> 22 [style=solid label="CMBOOLEAN"]
  319 -> 23 [style=solid label="NEWLINE"]
  319 -> 24 [style=solid label="PRINT"]
  319 -> 25 [style=solid label="IF"]
  319 -> 26 [style=solid label="FORR"]
  319 -> 27 [style=solid label="MOVE"]
  319 -> 28 [style=solid label="RIGHT"]
  319 -> 29 [style=solid label="LEFT"]
  319 -> 30 [style=solid label="ROBEX"]
  319 -> 31 [style=solid label="WALL"]
  319 -> 32 [style=solid label="'-'"]
  319 -> 33 [style=solid label="'!'"]
  319 -> 34 [style=solid label="'('"]
  319 -> 35 [style=solid label="'['"]
  319 -> 36 [style=solid label="'{'"]
  319 -> 321 [style=dashed label="stmts"]
  319 -> 38 [style=dashed label="stmt"]
  319 -> 39 [style=dashed label="robotactions"]
  319 -> 40 [style=dashed label="robotmove"]
  319 -> 41 [style=dashed label="robotright"]
  319 -> 42 [style=dashed label="robotleft"]
  319 -> 43 [style=dashed label="robotwall"]
  319 -> 44 [style=dashed label="robotexit"]
  319 -> 45 [style=dashed label="iff"]
  319 -> 46 [style=dashed label="forr"]
  319 -> 47 [style=dashed label="function"]
  319 -> 48 [style=dashed label="callfunction"]
  319 -> 49 [style=dashed label="matrix"]
  319 -> 50 [style=dashed label="vector"]
  319 -> 51 [style=dashed label="vmdeclaration"]
  319 -> 52 [style=dashed label="declaration"]
  319 -> 53 [style=dashed label="assignment"]
  319 -> 54 [style=dashed label="print"]
  319 -> 55 [style=dashed label="expr"]
  319 -> 56 [style=dashed label="type"]
  319 -> 57 [style=dashed label="const"]
  320 [label="State 320\n\l 45 args_func: args_func ',' '[' type VAR . ']'\l"]
  320 -> 322 [style=solid label="']'"]
  321 [label="State 321\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 48 function: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E\l 48         | '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts . E\l 49         | . error E\l 58 callfunction: . FVARIABLE '[' callfunc_args ']'\l 59             | . error '[' callfunc_args ']'\l 60 matrix: . '{' listexprs '}'\l 61       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 62       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 63       | . MVARIABLE '(' matrix ')'\l 64       | . MVARIABLE\l 65       | . matrix '*' matrix\l 66       | . matrix ELEMMULT matrix\l 67       | . matrix '\\''\l 68       | . matrix RIGHTSHIFT\l 69       | . matrix LEFTSHIFT\l 70       | . vector '\\''\l 71       | . matrix ELEMMULT vector\l 72       | . matrix ELEMMULT expr\l 73       | . error matrix\l 74       | . error vector\l 75       | . error expr\l 79 vector: . '{' exprs '}'\l 80       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 81       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 82       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 83       | . VVARIABLE\l 84       | . vector ELEMMULT vector\l 85       | . vector RIGHTSHIFT\l 86       | . vector LEFTSHIFT\l 87       | . vector ELEMMULT expr\l 88       | . error vector\l 89       | . error expr\l 93 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 94              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 95              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 96              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 97              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 98              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 99              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l100              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l101 declaration: . type VAR DECLARE expr\l102            | . type VAR DECLARE vector\l103            | . type VAR DECLARE matrix\l104 assignment: . VARIABLE ASSIGN expr\l105           | . VVARIABLE ASSIGN vector\l106           | . MVARIABLE ASSIGN matrix\l107 print: . PRINT '(' expr ')'\l108      | . PRINT '(' VVARIABLE ')'\l109      | . PRINT '(' MVARIABLE ')'\l110 expr: . const\l111     | . robotexit\l112     | . robotmove\l113     | . robotwall\l114     | . VARIABLE\l115     | . '-' expr\l116     | . expr '+' expr\l117     | . expr '-' expr\l118     | . expr '/' expr\l119     | . expr '<' expr\l120     | . expr '>' expr\l121     | . '!' expr\l122     | . expr CONJUNCTION expr\l123     | . '(' expr ')'\l124     | . VVARIABLE '(' expr ')'\l125     | . MVARIABLE '(' expr ',' expr ')'\l126     | . error expr\l127 type: . INT\l128     | . CINT\l129     | . VINT\l130     | . MINT\l131     | . CVINT\l132     | . CMINT\l133     | . BOOLEAN\l134     | . CBOOLEAN\l135     | . VBOOLEAN\l136     | . MBOOLEAN\l137     | . CVBOOLEAN\l138     | . CMBOOLEAN\l139 const: . INTEGER\l140      | . BOOL\l"]
  321 -> 96 [style=dotted]
  321 -> 5 [style=solid label="BOOL"]
  321 -> 6 [style=solid label="INTEGER"]
  321 -> 7 [style=solid label="VARIABLE"]
  321 -> 8 [style=solid label="VVARIABLE"]
  321 -> 9 [style=solid label="MVARIABLE"]
  321 -> 10 [style=solid label="FVARIABLE"]
  321 -> 11 [style=solid label="CINT"]
  321 -> 12 [style=solid label="VINT"]
  321 -> 13 [style=solid label="MINT"]
  321 -> 14 [style=solid label="INT"]
  321 -> 15 [style=solid label="CVINT"]
  321 -> 16 [style=solid label="CMINT"]
  321 -> 17 [style=solid label="BOOLEAN"]
  321 -> 18 [style=solid label="CBOOLEAN"]
  321 -> 19 [style=solid label="VBOOLEAN"]
  321 -> 20 [style=solid label="MBOOLEAN"]
  321 -> 21 [style=solid label="CVBOOLEAN"]
  321 -> 22 [style=solid label="CMBOOLEAN"]
  321 -> 23 [style=solid label="NEWLINE"]
  321 -> 24 [style=solid label="PRINT"]
  321 -> 25 [style=solid label="IF"]
  321 -> 26 [style=solid label="FORR"]
  321 -> 323 [style=solid label="E"]
  321 -> 27 [style=solid label="MOVE"]
  321 -> 28 [style=solid label="RIGHT"]
  321 -> 29 [style=solid label="LEFT"]
  321 -> 30 [style=solid label="ROBEX"]
  321 -> 31 [style=solid label="WALL"]
  321 -> 32 [style=solid label="'-'"]
  321 -> 33 [style=solid label="'!'"]
  321 -> 34 [style=solid label="'('"]
  321 -> 35 [style=solid label="'['"]
  321 -> 36 [style=solid label="'{'"]
  321 -> 97 [style=dashed label="stmt"]
  321 -> 39 [style=dashed label="robotactions"]
  321 -> 40 [style=dashed label="robotmove"]
  321 -> 41 [style=dashed label="robotright"]
  321 -> 42 [style=dashed label="robotleft"]
  321 -> 43 [style=dashed label="robotwall"]
  321 -> 44 [style=dashed label="robotexit"]
  321 -> 45 [style=dashed label="iff"]
  321 -> 46 [style=dashed label="forr"]
  321 -> 47 [style=dashed label="function"]
  321 -> 48 [style=dashed label="callfunction"]
  321 -> 49 [style=dashed label="matrix"]
  321 -> 50 [style=dashed label="vector"]
  321 -> 51 [style=dashed label="vmdeclaration"]
  321 -> 52 [style=dashed label="declaration"]
  321 -> 53 [style=dashed label="assignment"]
  321 -> 54 [style=dashed label="print"]
  321 -> 55 [style=dashed label="expr"]
  321 -> 56 [style=dashed label="type"]
  321 -> 57 [style=dashed label="const"]
  322 [label="State 322\n\l 45 args_func: args_func ',' '[' type VAR ']' .\l"]
  322 -> "322R45" [style=solid]
 "322R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
  323 [label="State 323\n\l 48 function: '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' B NEWLINE stmts E .\l"]
  323 -> "323R48" [style=solid]
 "323R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
}
