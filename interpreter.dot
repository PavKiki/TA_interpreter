// Generated by GNU Bison 3.3.2.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <http://www.gnu.org/software/bison/>.

digraph "interpreter.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: . program $end\l  1 program: . func\l  2 func: . func stmts\l  3     | . func error\l  4     | . %empty\l"]
  0 -> 1 [style=dashed label="program"]
  0 -> 2 [style=dashed label="func"]
  0 -> "0R4" [style=solid]
 "0R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  1 [label="State 1\n\l  0 $accept: program . $end\l"]
  1 -> 3 [style=solid label="$end"]
  2 [label="State 2\n\l  1 program: func .  [$end]\l  2 func: func . stmts\l  3     | func . error\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 41 return_func: . type VAR\l 42            | . return_func ',' type VAR\l 43            | . return_func error\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 68 callfunction: . return_func DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  2 -> 4 [style=dotted]
  2 -> 5 [style=solid label="BOOL"]
  2 -> 6 [style=solid label="INTEGER"]
  2 -> 7 [style=solid label="VARIABLE"]
  2 -> 8 [style=solid label="VVARIABLE"]
  2 -> 9 [style=solid label="MVARIABLE"]
  2 -> 10 [style=solid label="CINT"]
  2 -> 11 [style=solid label="VINT"]
  2 -> 12 [style=solid label="MINT"]
  2 -> 13 [style=solid label="INT"]
  2 -> 14 [style=solid label="CVINT"]
  2 -> 15 [style=solid label="CMINT"]
  2 -> 16 [style=solid label="BOOLEAN"]
  2 -> 17 [style=solid label="CBOOLEAN"]
  2 -> 18 [style=solid label="VBOOLEAN"]
  2 -> 19 [style=solid label="MBOOLEAN"]
  2 -> 20 [style=solid label="CVBOOLEAN"]
  2 -> 21 [style=solid label="CMBOOLEAN"]
  2 -> 22 [style=solid label="NEWLINE"]
  2 -> 23 [style=solid label="PRINT"]
  2 -> 24 [style=solid label="IF"]
  2 -> 25 [style=solid label="FORR"]
  2 -> 26 [style=solid label="MOVE"]
  2 -> 27 [style=solid label="RIGHT"]
  2 -> 28 [style=solid label="LEFT"]
  2 -> 29 [style=solid label="ROBEX"]
  2 -> 30 [style=solid label="WALL"]
  2 -> 31 [style=solid label="'-'"]
  2 -> 32 [style=solid label="'!'"]
  2 -> 33 [style=solid label="'('"]
  2 -> 34 [style=solid label="'['"]
  2 -> 35 [style=solid label="'{'"]
  2 -> 36 [style=dashed label="stmts"]
  2 -> 37 [style=dashed label="stmt"]
  2 -> 38 [style=dashed label="robotactions"]
  2 -> 39 [style=dashed label="robotmove"]
  2 -> 40 [style=dashed label="robotright"]
  2 -> 41 [style=dashed label="robotleft"]
  2 -> 42 [style=dashed label="robotwall"]
  2 -> 43 [style=dashed label="robotexit"]
  2 -> 44 [style=dashed label="iff"]
  2 -> 45 [style=dashed label="forr"]
  2 -> 46 [style=dashed label="return_func"]
  2 -> 47 [style=dashed label="function_head"]
  2 -> 48 [style=dashed label="function"]
  2 -> 49 [style=dashed label="callfunction"]
  2 -> 50 [style=dashed label="matrix"]
  2 -> 51 [style=dashed label="vector"]
  2 -> 52 [style=dashed label="vmdeclaration"]
  2 -> 53 [style=dashed label="declaration"]
  2 -> 54 [style=dashed label="assignment"]
  2 -> 55 [style=dashed label="print"]
  2 -> 56 [style=dashed label="expr"]
  2 -> 57 [style=dashed label="type"]
  2 -> 58 [style=dashed label="const"]
  2 -> "2R1" [label="[$end]", style=solid]
 "2R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  3 [label="State 3\n\l  0 $accept: program $end .\l"]
  3 -> "3R0" [style=solid]
 "3R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  4 [label="State 4\n\l  3 func: func error .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']\l  8 stmts: error .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']\l 23 stmt: error . NEWLINE\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 56 function_head: error .  [B]\l 69 callfunction: error . '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 83       | error . matrix\l 84       | . error vector\l 84       | error . vector\l 85       | . error expr\l 85       | error . expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 98       | error . vector\l 99       | . error expr\l 99       | error . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l136     | error . expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  4 -> 59 [style=dotted]
  4 -> 5 [style=solid label="BOOL"]
  4 -> 6 [style=solid label="INTEGER"]
  4 -> 60 [style=solid label="VARIABLE"]
  4 -> 61 [style=solid label="VVARIABLE"]
  4 -> 62 [style=solid label="MVARIABLE"]
  4 -> 63 [style=solid label="NEWLINE"]
  4 -> 26 [style=solid label="MOVE"]
  4 -> 29 [style=solid label="ROBEX"]
  4 -> 30 [style=solid label="WALL"]
  4 -> 31 [style=solid label="'-'"]
  4 -> 32 [style=solid label="'!'"]
  4 -> 64 [style=solid label="'('"]
  4 -> 65 [style=solid label="'['"]
  4 -> 35 [style=solid label="'{'"]
  4 -> 39 [style=dashed label="robotmove"]
  4 -> 42 [style=dashed label="robotwall"]
  4 -> 43 [style=dashed label="robotexit"]
  4 -> 66 [style=dashed label="matrix"]
  4 -> 67 [style=dashed label="vector"]
  4 -> 68 [style=dashed label="expr"]
  4 -> 58 [style=dashed label="const"]
  4 -> "4R3d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, NEWLINE, MOVE, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "4R3d" [label="R3", fillcolor=5, shape=diamond, style=filled]
  4 -> "4R3" [label="[$end, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, PRINT, IF, FORR, RIGHT, LEFT]", style=solid]
 "4R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  4 -> "4R8d" [label="[$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "4R8d" [label="R8", fillcolor=5, shape=diamond, style=filled]
  4 -> "4R56" [label="[B]", style=solid]
 "4R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  5 [label="State 5\n\l150 const: BOOL .\l"]
  5 -> "5R150" [style=solid]
 "5R150" [label="R150", fillcolor=3, shape=diamond, style=filled]
  6 [label="State 6\n\l149 const: INTEGER .\l"]
  6 -> "6R149" [style=solid]
 "6R149" [label="R149", fillcolor=3, shape=diamond, style=filled]
  7 [label="State 7\n\l114 assignment: VARIABLE . ASSIGN expr\l124 expr: VARIABLE .  [NEWLINE, CONJUNCTION, '<', '>', '+', '-', '/', ')']\l"]
  7 -> 69 [style=solid label="ASSIGN"]
  7 -> "7R124" [style=solid]
 "7R124" [label="R124", fillcolor=3, shape=diamond, style=filled]
  8 [label="State 8\n\l 90 vector: VVARIABLE . '(' vector ',' '[' ']' ')'\l 93       | VVARIABLE .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l103 vmdeclaration: VVARIABLE . '(' expr ')' ASSIGN expr\l104              | VVARIABLE . '(' vector ',' '[' ']' ')' ASSIGN vector\l115 assignment: VVARIABLE . ASSIGN vector\l134 expr: VVARIABLE . '(' expr ')'\l"]
  8 -> 70 [style=solid label="ASSIGN"]
  8 -> 71 [style=solid label="'('"]
  8 -> "8R93" [style=solid]
 "8R93" [label="R93", fillcolor=3, shape=diamond, style=filled]
  9 [label="State 9\n\l 71 matrix: MVARIABLE . '(' vector ',' '[' ']' ')'\l 72       | MVARIABLE . '(' '[' ']' ',' vector ')'\l 73       | MVARIABLE . '(' matrix ')'\l 74       | MVARIABLE .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l 91 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 92       | MVARIABLE . '(' '[' ']' ',' expr ')'\l105 vmdeclaration: MVARIABLE . '(' expr ',' expr ')' ASSIGN expr\l106              | MVARIABLE . '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | MVARIABLE . '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | MVARIABLE . '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | MVARIABLE . '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | MVARIABLE . '(' matrix ')' ASSIGN matrix\l116 assignment: MVARIABLE . ASSIGN matrix\l135 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  9 -> 72 [style=solid label="ASSIGN"]
  9 -> 73 [style=solid label="'('"]
  9 -> "9R74" [style=solid]
 "9R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  10 [label="State 10\n\l138 type: CINT .\l"]
  10 -> "10R138" [style=solid]
 "10R138" [label="R138", fillcolor=3, shape=diamond, style=filled]
  11 [label="State 11\n\l139 type: VINT .\l"]
  11 -> "11R139" [style=solid]
 "11R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
  12 [label="State 12\n\l140 type: MINT .\l"]
  12 -> "12R140" [style=solid]
 "12R140" [label="R140", fillcolor=3, shape=diamond, style=filled]
  13 [label="State 13\n\l137 type: INT .\l"]
  13 -> "13R137" [style=solid]
 "13R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
  14 [label="State 14\n\l141 type: CVINT .\l"]
  14 -> "14R141" [style=solid]
 "14R141" [label="R141", fillcolor=3, shape=diamond, style=filled]
  15 [label="State 15\n\l142 type: CMINT .\l"]
  15 -> "15R142" [style=solid]
 "15R142" [label="R142", fillcolor=3, shape=diamond, style=filled]
  16 [label="State 16\n\l143 type: BOOLEAN .\l"]
  16 -> "16R143" [style=solid]
 "16R143" [label="R143", fillcolor=3, shape=diamond, style=filled]
  17 [label="State 17\n\l144 type: CBOOLEAN .\l"]
  17 -> "17R144" [style=solid]
 "17R144" [label="R144", fillcolor=3, shape=diamond, style=filled]
  18 [label="State 18\n\l145 type: VBOOLEAN .\l"]
  18 -> "18R145" [style=solid]
 "18R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  19 [label="State 19\n\l146 type: MBOOLEAN .\l"]
  19 -> "19R146" [style=solid]
 "19R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  20 [label="State 20\n\l147 type: CVBOOLEAN .\l"]
  20 -> "20R147" [style=solid]
 "20R147" [label="R147", fillcolor=3, shape=diamond, style=filled]
  21 [label="State 21\n\l148 type: CMBOOLEAN .\l"]
  21 -> "21R148" [style=solid]
 "21R148" [label="R148", fillcolor=3, shape=diamond, style=filled]
  22 [label="State 22\n\l  9 stmt: NEWLINE .\l"]
  22 -> "22R9" [style=solid]
 "22R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  23 [label="State 23\n\l117 print: PRINT . '(' expr ')'\l118      | PRINT . '(' VVARIABLE ')'\l119      | PRINT . '(' MVARIABLE ')'\l"]
  23 -> 74 [style=solid label="'('"]
  24 [label="State 24\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: IF . expr NEWLINE begif stmts endif\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  24 -> 75 [style=dotted]
  24 -> 5 [style=solid label="BOOL"]
  24 -> 6 [style=solid label="INTEGER"]
  24 -> 60 [style=solid label="VARIABLE"]
  24 -> 76 [style=solid label="VVARIABLE"]
  24 -> 77 [style=solid label="MVARIABLE"]
  24 -> 26 [style=solid label="MOVE"]
  24 -> 29 [style=solid label="ROBEX"]
  24 -> 30 [style=solid label="WALL"]
  24 -> 31 [style=solid label="'-'"]
  24 -> 32 [style=solid label="'!'"]
  24 -> 64 [style=solid label="'('"]
  24 -> 39 [style=dashed label="robotmove"]
  24 -> 42 [style=dashed label="robotwall"]
  24 -> 43 [style=dashed label="robotexit"]
  24 -> 78 [style=dashed label="expr"]
  24 -> 58 [style=dashed label="const"]
  25 [label="State 25\n\l 40 forr: FORR . declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l"]
  25 -> 10 [style=solid label="CINT"]
  25 -> 11 [style=solid label="VINT"]
  25 -> 12 [style=solid label="MINT"]
  25 -> 13 [style=solid label="INT"]
  25 -> 14 [style=solid label="CVINT"]
  25 -> 15 [style=solid label="CMINT"]
  25 -> 16 [style=solid label="BOOLEAN"]
  25 -> 17 [style=solid label="CBOOLEAN"]
  25 -> 18 [style=solid label="VBOOLEAN"]
  25 -> 19 [style=solid label="MBOOLEAN"]
  25 -> 20 [style=solid label="CVBOOLEAN"]
  25 -> 21 [style=solid label="CMBOOLEAN"]
  25 -> 79 [style=dashed label="declaration"]
  25 -> 80 [style=dashed label="type"]
  26 [label="State 26\n\l 26 robotmove: MOVE . '(' expr ')'\l"]
  26 -> 81 [style=solid label="'('"]
  27 [label="State 27\n\l 27 robotright: RIGHT .\l"]
  27 -> "27R27" [style=solid]
 "27R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  28 [label="State 28\n\l 28 robotleft: LEFT .\l"]
  28 -> "28R28" [style=solid]
 "28R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  29 [label="State 29\n\l 30 robotexit: ROBEX .\l"]
  29 -> "29R30" [style=solid]
 "29R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  30 [label="State 30\n\l 29 robotwall: WALL .\l"]
  30 -> "30R29" [style=solid]
 "30R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  31 [label="State 31\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l125     | '-' . expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  31 -> 75 [style=dotted]
  31 -> 5 [style=solid label="BOOL"]
  31 -> 6 [style=solid label="INTEGER"]
  31 -> 60 [style=solid label="VARIABLE"]
  31 -> 76 [style=solid label="VVARIABLE"]
  31 -> 77 [style=solid label="MVARIABLE"]
  31 -> 26 [style=solid label="MOVE"]
  31 -> 29 [style=solid label="ROBEX"]
  31 -> 30 [style=solid label="WALL"]
  31 -> 31 [style=solid label="'-'"]
  31 -> 32 [style=solid label="'!'"]
  31 -> 64 [style=solid label="'('"]
  31 -> 39 [style=dashed label="robotmove"]
  31 -> 42 [style=dashed label="robotwall"]
  31 -> 43 [style=dashed label="robotexit"]
  31 -> 82 [style=dashed label="expr"]
  31 -> 58 [style=dashed label="const"]
  32 [label="State 32\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l131     | '!' . expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  32 -> 75 [style=dotted]
  32 -> 5 [style=solid label="BOOL"]
  32 -> 6 [style=solid label="INTEGER"]
  32 -> 60 [style=solid label="VARIABLE"]
  32 -> 76 [style=solid label="VVARIABLE"]
  32 -> 77 [style=solid label="MVARIABLE"]
  32 -> 26 [style=solid label="MOVE"]
  32 -> 29 [style=solid label="ROBEX"]
  32 -> 30 [style=solid label="WALL"]
  32 -> 31 [style=solid label="'-'"]
  32 -> 32 [style=solid label="'!'"]
  32 -> 64 [style=solid label="'('"]
  32 -> 39 [style=dashed label="robotmove"]
  32 -> 42 [style=dashed label="robotwall"]
  32 -> 43 [style=dashed label="robotexit"]
  32 -> 83 [style=dashed label="expr"]
  32 -> 58 [style=dashed label="const"]
  33 [label="State 33\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 22     | '(' . stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 41 return_func: . type VAR\l 42            | . return_func ',' type VAR\l 43            | . return_func error\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 68 callfunction: . return_func DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l133     | '(' . expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  33 -> 84 [style=dotted]
  33 -> 5 [style=solid label="BOOL"]
  33 -> 6 [style=solid label="INTEGER"]
  33 -> 7 [style=solid label="VARIABLE"]
  33 -> 8 [style=solid label="VVARIABLE"]
  33 -> 9 [style=solid label="MVARIABLE"]
  33 -> 10 [style=solid label="CINT"]
  33 -> 11 [style=solid label="VINT"]
  33 -> 12 [style=solid label="MINT"]
  33 -> 13 [style=solid label="INT"]
  33 -> 14 [style=solid label="CVINT"]
  33 -> 15 [style=solid label="CMINT"]
  33 -> 16 [style=solid label="BOOLEAN"]
  33 -> 17 [style=solid label="CBOOLEAN"]
  33 -> 18 [style=solid label="VBOOLEAN"]
  33 -> 19 [style=solid label="MBOOLEAN"]
  33 -> 20 [style=solid label="CVBOOLEAN"]
  33 -> 21 [style=solid label="CMBOOLEAN"]
  33 -> 22 [style=solid label="NEWLINE"]
  33 -> 23 [style=solid label="PRINT"]
  33 -> 24 [style=solid label="IF"]
  33 -> 25 [style=solid label="FORR"]
  33 -> 26 [style=solid label="MOVE"]
  33 -> 27 [style=solid label="RIGHT"]
  33 -> 28 [style=solid label="LEFT"]
  33 -> 29 [style=solid label="ROBEX"]
  33 -> 30 [style=solid label="WALL"]
  33 -> 31 [style=solid label="'-'"]
  33 -> 32 [style=solid label="'!'"]
  33 -> 33 [style=solid label="'('"]
  33 -> 34 [style=solid label="'['"]
  33 -> 35 [style=solid label="'{'"]
  33 -> 85 [style=dashed label="stmts"]
  33 -> 37 [style=dashed label="stmt"]
  33 -> 38 [style=dashed label="robotactions"]
  33 -> 39 [style=dashed label="robotmove"]
  33 -> 40 [style=dashed label="robotright"]
  33 -> 41 [style=dashed label="robotleft"]
  33 -> 42 [style=dashed label="robotwall"]
  33 -> 43 [style=dashed label="robotexit"]
  33 -> 44 [style=dashed label="iff"]
  33 -> 45 [style=dashed label="forr"]
  33 -> 46 [style=dashed label="return_func"]
  33 -> 47 [style=dashed label="function_head"]
  33 -> 48 [style=dashed label="function"]
  33 -> 49 [style=dashed label="callfunction"]
  33 -> 50 [style=dashed label="matrix"]
  33 -> 51 [style=dashed label="vector"]
  33 -> 52 [style=dashed label="vmdeclaration"]
  33 -> 53 [style=dashed label="declaration"]
  33 -> 54 [style=dashed label="assignment"]
  33 -> 55 [style=dashed label="print"]
  33 -> 86 [style=dashed label="expr"]
  33 -> 57 [style=dashed label="type"]
  33 -> 58 [style=dashed label="const"]
  34 [label="State 34\n\l 41 return_func: . type VAR\l 42            | . return_func ',' type VAR\l 43            | . return_func error\l 55 function_head: '[' . return_func ']' DECLARE FUNC VAR '(' args_func ')'\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l"]
  34 -> 10 [style=solid label="CINT"]
  34 -> 11 [style=solid label="VINT"]
  34 -> 12 [style=solid label="MINT"]
  34 -> 13 [style=solid label="INT"]
  34 -> 14 [style=solid label="CVINT"]
  34 -> 15 [style=solid label="CMINT"]
  34 -> 16 [style=solid label="BOOLEAN"]
  34 -> 17 [style=solid label="CBOOLEAN"]
  34 -> 18 [style=solid label="VBOOLEAN"]
  34 -> 19 [style=solid label="MBOOLEAN"]
  34 -> 20 [style=solid label="CVBOOLEAN"]
  34 -> 21 [style=solid label="CMBOOLEAN"]
  34 -> 87 [style=dashed label="return_func"]
  34 -> 88 [style=dashed label="type"]
  35 [label="State 35\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 70 matrix: '{' . listexprs '}'\l 86 listexprs: . vector ',' vector\l 87          | . listexprs ',' vector\l 88          | . listexprs error\l 89 vector: . '{' exprs '}'\l 89       | '{' . exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l100 exprs: . expr ',' expr\l101      | . exprs ',' expr\l102      | . exprs error\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  35 -> 89 [style=dotted]
  35 -> 5 [style=solid label="BOOL"]
  35 -> 6 [style=solid label="INTEGER"]
  35 -> 60 [style=solid label="VARIABLE"]
  35 -> 61 [style=solid label="VVARIABLE"]
  35 -> 90 [style=solid label="MVARIABLE"]
  35 -> 26 [style=solid label="MOVE"]
  35 -> 29 [style=solid label="ROBEX"]
  35 -> 30 [style=solid label="WALL"]
  35 -> 31 [style=solid label="'-'"]
  35 -> 32 [style=solid label="'!'"]
  35 -> 64 [style=solid label="'('"]
  35 -> 91 [style=solid label="'{'"]
  35 -> 39 [style=dashed label="robotmove"]
  35 -> 42 [style=dashed label="robotwall"]
  35 -> 43 [style=dashed label="robotexit"]
  35 -> 92 [style=dashed label="listexprs"]
  35 -> 93 [style=dashed label="vector"]
  35 -> 94 [style=dashed label="exprs"]
  35 -> 95 [style=dashed label="expr"]
  35 -> 58 [style=dashed label="const"]
  36 [label="State 36\n\l  2 func: func stmts .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 41 return_func: . type VAR\l 42            | . return_func ',' type VAR\l 43            | . return_func error\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 68 callfunction: . return_func DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  36 -> 96 [style=dotted]
  36 -> 5 [style=solid label="BOOL"]
  36 -> 6 [style=solid label="INTEGER"]
  36 -> 7 [style=solid label="VARIABLE"]
  36 -> 8 [style=solid label="VVARIABLE"]
  36 -> 9 [style=solid label="MVARIABLE"]
  36 -> 10 [style=solid label="CINT"]
  36 -> 11 [style=solid label="VINT"]
  36 -> 12 [style=solid label="MINT"]
  36 -> 13 [style=solid label="INT"]
  36 -> 14 [style=solid label="CVINT"]
  36 -> 15 [style=solid label="CMINT"]
  36 -> 16 [style=solid label="BOOLEAN"]
  36 -> 17 [style=solid label="CBOOLEAN"]
  36 -> 18 [style=solid label="VBOOLEAN"]
  36 -> 19 [style=solid label="MBOOLEAN"]
  36 -> 20 [style=solid label="CVBOOLEAN"]
  36 -> 21 [style=solid label="CMBOOLEAN"]
  36 -> 22 [style=solid label="NEWLINE"]
  36 -> 23 [style=solid label="PRINT"]
  36 -> 24 [style=solid label="IF"]
  36 -> 25 [style=solid label="FORR"]
  36 -> 26 [style=solid label="MOVE"]
  36 -> 27 [style=solid label="RIGHT"]
  36 -> 28 [style=solid label="LEFT"]
  36 -> 29 [style=solid label="ROBEX"]
  36 -> 30 [style=solid label="WALL"]
  36 -> 31 [style=solid label="'-'"]
  36 -> 32 [style=solid label="'!'"]
  36 -> 33 [style=solid label="'('"]
  36 -> 34 [style=solid label="'['"]
  36 -> 35 [style=solid label="'{'"]
  36 -> 97 [style=dashed label="stmt"]
  36 -> 38 [style=dashed label="robotactions"]
  36 -> 39 [style=dashed label="robotmove"]
  36 -> 40 [style=dashed label="robotright"]
  36 -> 41 [style=dashed label="robotleft"]
  36 -> 42 [style=dashed label="robotwall"]
  36 -> 43 [style=dashed label="robotexit"]
  36 -> 44 [style=dashed label="iff"]
  36 -> 45 [style=dashed label="forr"]
  36 -> 46 [style=dashed label="return_func"]
  36 -> 47 [style=dashed label="function_head"]
  36 -> 48 [style=dashed label="function"]
  36 -> 49 [style=dashed label="callfunction"]
  36 -> 50 [style=dashed label="matrix"]
  36 -> 51 [style=dashed label="vector"]
  36 -> 52 [style=dashed label="vmdeclaration"]
  36 -> 53 [style=dashed label="declaration"]
  36 -> 54 [style=dashed label="assignment"]
  36 -> 55 [style=dashed label="print"]
  36 -> 56 [style=dashed label="expr"]
  36 -> 57 [style=dashed label="type"]
  36 -> 58 [style=dashed label="const"]
  36 -> "36R2d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "36R2d" [label="R2", fillcolor=5, shape=diamond, style=filled]
  36 -> "36R2" [label="[$end]", style=solid]
 "36R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  37 [label="State 37\n\l  5 stmts: stmt .\l"]
  37 -> "37R5" [style=solid]
 "37R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  38 [label="State 38\n\l 21 stmt: robotactions . NEWLINE\l"]
  38 -> 98 [style=solid label="NEWLINE"]
  39 [label="State 39\n\l122 expr: robotmove .\l"]
  39 -> "39R122" [style=solid]
 "39R122" [label="R122", fillcolor=3, shape=diamond, style=filled]
  40 [label="State 40\n\l 24 robotactions: robotright .\l"]
  40 -> "40R24" [style=solid]
 "40R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  41 [label="State 41\n\l 25 robotactions: robotleft .\l"]
  41 -> "41R25" [style=solid]
 "41R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  42 [label="State 42\n\l123 expr: robotwall .\l"]
  42 -> "42R123" [style=solid]
 "42R123" [label="R123", fillcolor=3, shape=diamond, style=filled]
  43 [label="State 43\n\l121 expr: robotexit .\l"]
  43 -> "43R121" [style=solid]
 "43R121" [label="R121", fillcolor=3, shape=diamond, style=filled]
  44 [label="State 44\n\l 17 stmt: iff . NEWLINE\l"]
  44 -> 99 [style=solid label="NEWLINE"]
  45 [label="State 45\n\l 18 stmt: forr . NEWLINE\l"]
  45 -> 100 [style=solid label="NEWLINE"]
  46 [label="State 46\n\l 42 return_func: return_func . ',' type VAR\l 43            | return_func . error\l 68 callfunction: return_func . DECLARE FVARIABLE '[' callfunc_args ']'\l"]
  46 -> 101 [style=dotted]
  46 -> 102 [style=solid label="','"]
  46 -> 103 [style=solid label="DECLARE"]
  47 [label="State 47\n\l 57 function: function_head . B NEWLINE stmts E\l"]
  47 -> 104 [style=solid label="B"]
  48 [label="State 48\n\l 19 stmt: function . NEWLINE\l"]
  48 -> 105 [style=solid label="NEWLINE"]
  49 [label="State 49\n\l 20 stmt: callfunction . NEWLINE\l"]
  49 -> 106 [style=solid label="NEWLINE"]
  50 [label="State 50\n\l 12 stmt: matrix . NEWLINE\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l"]
  50 -> 107 [style=solid label="NEWLINE"]
  50 -> 108 [style=solid label="ELEMMULT"]
  50 -> 109 [style=solid label="'\\''"]
  50 -> 110 [style=solid label="LEFTSHIFT"]
  50 -> 111 [style=solid label="RIGHTSHIFT"]
  50 -> 112 [style=solid label="'*'"]
  51 [label="State 51\n\l 11 stmt: vector . NEWLINE\l 80 matrix: vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  51 -> 113 [style=solid label="NEWLINE"]
  51 -> 114 [style=solid label="ELEMMULT"]
  51 -> 115 [style=solid label="'\\''"]
  51 -> 116 [style=solid label="LEFTSHIFT"]
  51 -> 117 [style=solid label="RIGHTSHIFT"]
  52 [label="State 52\n\l 14 stmt: vmdeclaration . NEWLINE\l"]
  52 -> 118 [style=solid label="NEWLINE"]
  53 [label="State 53\n\l 15 stmt: declaration . NEWLINE\l"]
  53 -> 119 [style=solid label="NEWLINE"]
  54 [label="State 54\n\l 16 stmt: assignment . NEWLINE\l"]
  54 -> 120 [style=solid label="NEWLINE"]
  55 [label="State 55\n\l 13 stmt: print . NEWLINE\l"]
  55 -> 121 [style=solid label="NEWLINE"]
  56 [label="State 56\n\l 10 stmt: expr . NEWLINE\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  56 -> 122 [style=solid label="NEWLINE"]
  56 -> 123 [style=solid label="CONJUNCTION"]
  56 -> 124 [style=solid label="'<'"]
  56 -> 125 [style=solid label="'>'"]
  56 -> 126 [style=solid label="'+'"]
  56 -> 127 [style=solid label="'-'"]
  56 -> 128 [style=solid label="'/'"]
  57 [label="State 57\n\l 41 return_func: type . VAR\l111 declaration: type . VAR DECLARE expr\l112            | type . VAR DECLARE vector\l113            | type . VAR DECLARE matrix\l"]
  57 -> 129 [style=solid label="VAR"]
  58 [label="State 58\n\l120 expr: const .\l"]
  58 -> "58R120" [style=solid]
 "58R120" [label="R120", fillcolor=3, shape=diamond, style=filled]
  59 [label="State 59\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 83       | error . matrix\l 84       | . error vector\l 84       | error . vector\l 85       | . error expr\l 85       | error . expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 98       | error . vector\l 99       | . error expr\l 99       | error . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l136     | error . expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  59 -> 59 [style=dotted]
  59 -> 5 [style=solid label="BOOL"]
  59 -> 6 [style=solid label="INTEGER"]
  59 -> 60 [style=solid label="VARIABLE"]
  59 -> 61 [style=solid label="VVARIABLE"]
  59 -> 62 [style=solid label="MVARIABLE"]
  59 -> 26 [style=solid label="MOVE"]
  59 -> 29 [style=solid label="ROBEX"]
  59 -> 30 [style=solid label="WALL"]
  59 -> 31 [style=solid label="'-'"]
  59 -> 32 [style=solid label="'!'"]
  59 -> 64 [style=solid label="'('"]
  59 -> 35 [style=solid label="'{'"]
  59 -> 39 [style=dashed label="robotmove"]
  59 -> 42 [style=dashed label="robotwall"]
  59 -> 43 [style=dashed label="robotexit"]
  59 -> 66 [style=dashed label="matrix"]
  59 -> 67 [style=dashed label="vector"]
  59 -> 68 [style=dashed label="expr"]
  59 -> 58 [style=dashed label="const"]
  60 [label="State 60\n\l124 expr: VARIABLE .\l"]
  60 -> "60R124" [style=solid]
 "60R124" [label="R124", fillcolor=3, shape=diamond, style=filled]
  61 [label="State 61\n\l 90 vector: VVARIABLE . '(' vector ',' '[' ']' ')'\l 93       | VVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l134 expr: VVARIABLE . '(' expr ')'\l"]
  61 -> 130 [style=solid label="'('"]
  61 -> "61R93" [style=solid]
 "61R93" [label="R93", fillcolor=3, shape=diamond, style=filled]
  62 [label="State 62\n\l 71 matrix: MVARIABLE . '(' vector ',' '[' ']' ')'\l 72       | MVARIABLE . '(' '[' ']' ',' vector ')'\l 73       | MVARIABLE . '(' matrix ')'\l 74       | MVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 91 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 92       | MVARIABLE . '(' '[' ']' ',' expr ')'\l135 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  62 -> 131 [style=solid label="'('"]
  62 -> "62R74" [style=solid]
 "62R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  63 [label="State 63\n\l 23 stmt: error NEWLINE .\l"]
  63 -> "63R23" [style=solid]
 "63R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  64 [label="State 64\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l133     | '(' . expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  64 -> 75 [style=dotted]
  64 -> 5 [style=solid label="BOOL"]
  64 -> 6 [style=solid label="INTEGER"]
  64 -> 60 [style=solid label="VARIABLE"]
  64 -> 76 [style=solid label="VVARIABLE"]
  64 -> 77 [style=solid label="MVARIABLE"]
  64 -> 26 [style=solid label="MOVE"]
  64 -> 29 [style=solid label="ROBEX"]
  64 -> 30 [style=solid label="WALL"]
  64 -> 31 [style=solid label="'-'"]
  64 -> 32 [style=solid label="'!'"]
  64 -> 64 [style=solid label="'('"]
  64 -> 39 [style=dashed label="robotmove"]
  64 -> 42 [style=dashed label="robotwall"]
  64 -> 43 [style=dashed label="robotexit"]
  64 -> 132 [style=dashed label="expr"]
  64 -> 58 [style=dashed label="const"]
  65 [label="State 65\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 58 callfunc_args: . expr\l 59              | . vector\l 60              | . matrix\l 61              | . DFLT\l 62              | . callfunc_args ',' expr\l 63              | . callfunc_args ',' vector\l 64              | . callfunc_args ',' matrix\l 65              | . callfunc_args ',' DFLT\l 66              | . callfunc_args error\l 67              | . error\l 69 callfunction: error '[' . callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  65 -> 133 [style=dotted]
  65 -> 5 [style=solid label="BOOL"]
  65 -> 6 [style=solid label="INTEGER"]
  65 -> 60 [style=solid label="VARIABLE"]
  65 -> 61 [style=solid label="VVARIABLE"]
  65 -> 62 [style=solid label="MVARIABLE"]
  65 -> 26 [style=solid label="MOVE"]
  65 -> 29 [style=solid label="ROBEX"]
  65 -> 30 [style=solid label="WALL"]
  65 -> 134 [style=solid label="DFLT"]
  65 -> 31 [style=solid label="'-'"]
  65 -> 32 [style=solid label="'!'"]
  65 -> 64 [style=solid label="'('"]
  65 -> 35 [style=solid label="'{'"]
  65 -> 39 [style=dashed label="robotmove"]
  65 -> 42 [style=dashed label="robotwall"]
  65 -> 43 [style=dashed label="robotexit"]
  65 -> 135 [style=dashed label="callfunc_args"]
  65 -> 136 [style=dashed label="matrix"]
  65 -> 137 [style=dashed label="vector"]
  65 -> 138 [style=dashed label="expr"]
  65 -> 58 [style=dashed label="const"]
  66 [label="State 66\n\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l 83       | error matrix .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l"]
  66 -> 108 [style=solid label="ELEMMULT"]
  66 -> 109 [style=solid label="'\\''"]
  66 -> 110 [style=solid label="LEFTSHIFT"]
  66 -> 111 [style=solid label="RIGHTSHIFT"]
  66 -> 112 [style=solid label="'*'"]
  66 -> "66R83d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']", style=solid]
 "66R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  66 -> "66R83" [style=solid]
 "66R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  67 [label="State 67\n\l 80 matrix: vector . '\\''\l 84       | error vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l 98       | error vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l"]
  67 -> 114 [style=solid label="ELEMMULT"]
  67 -> 115 [style=solid label="'\\''"]
  67 -> 116 [style=solid label="LEFTSHIFT"]
  67 -> 117 [style=solid label="RIGHTSHIFT"]
  67 -> "67R84d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "67R84d" [label="R84", fillcolor=5, shape=diamond, style=filled]
  67 -> "67R84" [style=solid]
 "67R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
  67 -> "67R98d" [label="[error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']", style=solid]
 "67R98d" [label="R98", fillcolor=5, shape=diamond, style=filled]
  68 [label="State 68\n\l 85 matrix: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 99 vector: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l136     | error expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']']\l"]
  68 -> 123 [style=solid label="CONJUNCTION"]
  68 -> 124 [style=solid label="'<'"]
  68 -> 125 [style=solid label="'>'"]
  68 -> 126 [style=solid label="'+'"]
  68 -> 127 [style=solid label="'-'"]
  68 -> 128 [style=solid label="'/'"]
  68 -> "68R85" [style=solid]
 "68R85" [label="R85", fillcolor=3, shape=diamond, style=filled]
  68 -> "68R99d" [label="[error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']", style=solid]
 "68R99d" [label="R99", fillcolor=5, shape=diamond, style=filled]
  68 -> "68R136d" [label="[error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']']", style=solid]
 "68R136d" [label="R136", fillcolor=5, shape=diamond, style=filled]
  69 [label="State 69\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l114 assignment: VARIABLE ASSIGN . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  69 -> 75 [style=dotted]
  69 -> 5 [style=solid label="BOOL"]
  69 -> 6 [style=solid label="INTEGER"]
  69 -> 60 [style=solid label="VARIABLE"]
  69 -> 76 [style=solid label="VVARIABLE"]
  69 -> 77 [style=solid label="MVARIABLE"]
  69 -> 26 [style=solid label="MOVE"]
  69 -> 29 [style=solid label="ROBEX"]
  69 -> 30 [style=solid label="WALL"]
  69 -> 31 [style=solid label="'-'"]
  69 -> 32 [style=solid label="'!'"]
  69 -> 64 [style=solid label="'('"]
  69 -> 39 [style=dashed label="robotmove"]
  69 -> 42 [style=dashed label="robotwall"]
  69 -> 43 [style=dashed label="robotexit"]
  69 -> 139 [style=dashed label="expr"]
  69 -> 58 [style=dashed label="const"]
  70 [label="State 70\n\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l115 assignment: VVARIABLE ASSIGN . vector\l"]
  70 -> 140 [style=dotted]
  70 -> 141 [style=solid label="VVARIABLE"]
  70 -> 142 [style=solid label="MVARIABLE"]
  70 -> 91 [style=solid label="'{'"]
  70 -> 143 [style=dashed label="vector"]
  71 [label="State 71\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 90       | VVARIABLE '(' . vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: VVARIABLE '(' . expr ')' ASSIGN expr\l104              | VVARIABLE '(' . vector ',' '[' ']' ')' ASSIGN vector\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l134     | VVARIABLE '(' . expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  71 -> 89 [style=dotted]
  71 -> 5 [style=solid label="BOOL"]
  71 -> 6 [style=solid label="INTEGER"]
  71 -> 60 [style=solid label="VARIABLE"]
  71 -> 61 [style=solid label="VVARIABLE"]
  71 -> 90 [style=solid label="MVARIABLE"]
  71 -> 26 [style=solid label="MOVE"]
  71 -> 29 [style=solid label="ROBEX"]
  71 -> 30 [style=solid label="WALL"]
  71 -> 31 [style=solid label="'-'"]
  71 -> 32 [style=solid label="'!'"]
  71 -> 64 [style=solid label="'('"]
  71 -> 91 [style=solid label="'{'"]
  71 -> 39 [style=dashed label="robotmove"]
  71 -> 42 [style=dashed label="robotwall"]
  71 -> 43 [style=dashed label="robotexit"]
  71 -> 144 [style=dashed label="vector"]
  71 -> 145 [style=dashed label="expr"]
  71 -> 58 [style=dashed label="const"]
  72 [label="State 72\n\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l116 assignment: MVARIABLE ASSIGN . matrix\l"]
  72 -> 146 [style=dotted]
  72 -> 141 [style=solid label="VVARIABLE"]
  72 -> 147 [style=solid label="MVARIABLE"]
  72 -> 35 [style=solid label="'{'"]
  72 -> 148 [style=dashed label="matrix"]
  72 -> 149 [style=dashed label="vector"]
  73 [label="State 73\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 71       | MVARIABLE '(' . vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 72       | MVARIABLE '(' . '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 73       | MVARIABLE '(' . matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 91       | MVARIABLE '(' . expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 92       | MVARIABLE '(' . '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l105 vmdeclaration: MVARIABLE '(' . expr ',' expr ')' ASSIGN expr\l106              | MVARIABLE '(' . expr ',' '[' ']' ')' ASSIGN vector\l107              | MVARIABLE '(' . '[' ']' ',' expr ')' ASSIGN vector\l108              | MVARIABLE '(' . vector ',' '[' ']' ')' ASSIGN matrix\l109              | MVARIABLE '(' . '[' ']' ',' vector ')' ASSIGN matrix\l110              | MVARIABLE '(' . matrix ')' ASSIGN matrix\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l135     | MVARIABLE '(' . expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  73 -> 59 [style=dotted]
  73 -> 5 [style=solid label="BOOL"]
  73 -> 6 [style=solid label="INTEGER"]
  73 -> 60 [style=solid label="VARIABLE"]
  73 -> 61 [style=solid label="VVARIABLE"]
  73 -> 62 [style=solid label="MVARIABLE"]
  73 -> 26 [style=solid label="MOVE"]
  73 -> 29 [style=solid label="ROBEX"]
  73 -> 30 [style=solid label="WALL"]
  73 -> 31 [style=solid label="'-'"]
  73 -> 32 [style=solid label="'!'"]
  73 -> 64 [style=solid label="'('"]
  73 -> 150 [style=solid label="'['"]
  73 -> 35 [style=solid label="'{'"]
  73 -> 39 [style=dashed label="robotmove"]
  73 -> 42 [style=dashed label="robotwall"]
  73 -> 43 [style=dashed label="robotexit"]
  73 -> 151 [style=dashed label="matrix"]
  73 -> 152 [style=dashed label="vector"]
  73 -> 153 [style=dashed label="expr"]
  73 -> 58 [style=dashed label="const"]
  74 [label="State 74\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l117 print: PRINT '(' . expr ')'\l118      | PRINT '(' . VVARIABLE ')'\l119      | PRINT '(' . MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  74 -> 75 [style=dotted]
  74 -> 5 [style=solid label="BOOL"]
  74 -> 6 [style=solid label="INTEGER"]
  74 -> 60 [style=solid label="VARIABLE"]
  74 -> 154 [style=solid label="VVARIABLE"]
  74 -> 155 [style=solid label="MVARIABLE"]
  74 -> 26 [style=solid label="MOVE"]
  74 -> 29 [style=solid label="ROBEX"]
  74 -> 30 [style=solid label="WALL"]
  74 -> 31 [style=solid label="'-'"]
  74 -> 32 [style=solid label="'!'"]
  74 -> 64 [style=solid label="'('"]
  74 -> 39 [style=dashed label="robotmove"]
  74 -> 42 [style=dashed label="robotwall"]
  74 -> 43 [style=dashed label="robotexit"]
  74 -> 156 [style=dashed label="expr"]
  74 -> 58 [style=dashed label="const"]
  75 [label="State 75\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l136     | error . expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  75 -> 75 [style=dotted]
  75 -> 5 [style=solid label="BOOL"]
  75 -> 6 [style=solid label="INTEGER"]
  75 -> 60 [style=solid label="VARIABLE"]
  75 -> 76 [style=solid label="VVARIABLE"]
  75 -> 77 [style=solid label="MVARIABLE"]
  75 -> 26 [style=solid label="MOVE"]
  75 -> 29 [style=solid label="ROBEX"]
  75 -> 30 [style=solid label="WALL"]
  75 -> 31 [style=solid label="'-'"]
  75 -> 32 [style=solid label="'!'"]
  75 -> 64 [style=solid label="'('"]
  75 -> 39 [style=dashed label="robotmove"]
  75 -> 42 [style=dashed label="robotwall"]
  75 -> 43 [style=dashed label="robotexit"]
  75 -> 157 [style=dashed label="expr"]
  75 -> 58 [style=dashed label="const"]
  76 [label="State 76\n\l134 expr: VVARIABLE . '(' expr ')'\l"]
  76 -> 158 [style=solid label="'('"]
  77 [label="State 77\n\l135 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  77 -> 159 [style=solid label="'('"]
  78 [label="State 78\n\l 31 iff: IF expr . NEWLINE begif stmts endif\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  78 -> 160 [style=solid label="NEWLINE"]
  78 -> 123 [style=solid label="CONJUNCTION"]
  78 -> 124 [style=solid label="'<'"]
  78 -> 125 [style=solid label="'>'"]
  78 -> 126 [style=solid label="'+'"]
  78 -> 127 [style=solid label="'-'"]
  78 -> 128 [style=solid label="'/'"]
  79 [label="State 79\n\l 40 forr: FORR declaration . DOUBLEDOT expr NEWLINE begfor stmts endfor\l"]
  79 -> 161 [style=solid label="DOUBLEDOT"]
  80 [label="State 80\n\l111 declaration: type . VAR DECLARE expr\l112            | type . VAR DECLARE vector\l113            | type . VAR DECLARE matrix\l"]
  80 -> 162 [style=solid label="VAR"]
  81 [label="State 81\n\l 26 robotmove: . MOVE '(' expr ')'\l 26          | MOVE '(' . expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  81 -> 75 [style=dotted]
  81 -> 5 [style=solid label="BOOL"]
  81 -> 6 [style=solid label="INTEGER"]
  81 -> 60 [style=solid label="VARIABLE"]
  81 -> 76 [style=solid label="VVARIABLE"]
  81 -> 77 [style=solid label="MVARIABLE"]
  81 -> 26 [style=solid label="MOVE"]
  81 -> 29 [style=solid label="ROBEX"]
  81 -> 30 [style=solid label="WALL"]
  81 -> 31 [style=solid label="'-'"]
  81 -> 32 [style=solid label="'!'"]
  81 -> 64 [style=solid label="'('"]
  81 -> 39 [style=dashed label="robotmove"]
  81 -> 42 [style=dashed label="robotwall"]
  81 -> 43 [style=dashed label="robotexit"]
  81 -> 163 [style=dashed label="expr"]
  81 -> 58 [style=dashed label="const"]
  82 [label="State 82\n\l125 expr: '-' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l126     | expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  82 -> 123 [style=solid label="CONJUNCTION"]
  82 -> "82R125d" [label="[CONJUNCTION]", style=solid]
 "82R125d" [label="R125", fillcolor=5, shape=diamond, style=filled]
  82 -> "82R125" [style=solid]
 "82R125" [label="R125", fillcolor=3, shape=diamond, style=filled]
  83 [label="State 83\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l131     | '!' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l132     | expr . CONJUNCTION expr\l"]
  83 -> 123 [style=solid label="CONJUNCTION"]
  83 -> "83R131d" [label="[CONJUNCTION]", style=solid]
 "83R131d" [label="R131", fillcolor=5, shape=diamond, style=filled]
  83 -> "83R131" [style=solid]
 "83R131" [label="R131", fillcolor=3, shape=diamond, style=filled]
  84 [label="State 84\n\l  8 stmts: error .  [error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, E, MOVE, RIGHT, LEFT, ROBEX, WALL, ENDIF, ENDFOR, '-', '!', '(', ')', '[', '{']\l 23 stmt: error . NEWLINE\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 56 function_head: error .  [B]\l 69 callfunction: error . '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 83       | error . matrix\l 84       | . error vector\l 84       | error . vector\l 85       | . error expr\l 85       | error . expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 98       | error . vector\l 99       | . error expr\l 99       | error . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l136     | error . expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  84 -> 59 [style=dotted]
  84 -> 5 [style=solid label="BOOL"]
  84 -> 6 [style=solid label="INTEGER"]
  84 -> 60 [style=solid label="VARIABLE"]
  84 -> 61 [style=solid label="VVARIABLE"]
  84 -> 62 [style=solid label="MVARIABLE"]
  84 -> 63 [style=solid label="NEWLINE"]
  84 -> 26 [style=solid label="MOVE"]
  84 -> 29 [style=solid label="ROBEX"]
  84 -> 30 [style=solid label="WALL"]
  84 -> 31 [style=solid label="'-'"]
  84 -> 32 [style=solid label="'!'"]
  84 -> 64 [style=solid label="'('"]
  84 -> 65 [style=solid label="'['"]
  84 -> 35 [style=solid label="'{'"]
  84 -> 39 [style=dashed label="robotmove"]
  84 -> 42 [style=dashed label="robotwall"]
  84 -> 43 [style=dashed label="robotexit"]
  84 -> 66 [style=dashed label="matrix"]
  84 -> 67 [style=dashed label="vector"]
  84 -> 68 [style=dashed label="expr"]
  84 -> 58 [style=dashed label="const"]
  84 -> "84R8d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, NEWLINE, MOVE, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "84R8d" [label="R8", fillcolor=5, shape=diamond, style=filled]
  84 -> "84R8" [label="[CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, PRINT, IF, FORR, E, RIGHT, LEFT, ENDIF, ENDFOR, ')']", style=solid]
 "84R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  84 -> "84R56" [label="[B]", style=solid]
 "84R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  85 [label="State 85\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 22     | '(' stmts . ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 41 return_func: . type VAR\l 42            | . return_func ',' type VAR\l 43            | . return_func error\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 68 callfunction: . return_func DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  85 -> 96 [style=dotted]
  85 -> 5 [style=solid label="BOOL"]
  85 -> 6 [style=solid label="INTEGER"]
  85 -> 7 [style=solid label="VARIABLE"]
  85 -> 8 [style=solid label="VVARIABLE"]
  85 -> 9 [style=solid label="MVARIABLE"]
  85 -> 10 [style=solid label="CINT"]
  85 -> 11 [style=solid label="VINT"]
  85 -> 12 [style=solid label="MINT"]
  85 -> 13 [style=solid label="INT"]
  85 -> 14 [style=solid label="CVINT"]
  85 -> 15 [style=solid label="CMINT"]
  85 -> 16 [style=solid label="BOOLEAN"]
  85 -> 17 [style=solid label="CBOOLEAN"]
  85 -> 18 [style=solid label="VBOOLEAN"]
  85 -> 19 [style=solid label="MBOOLEAN"]
  85 -> 20 [style=solid label="CVBOOLEAN"]
  85 -> 21 [style=solid label="CMBOOLEAN"]
  85 -> 22 [style=solid label="NEWLINE"]
  85 -> 23 [style=solid label="PRINT"]
  85 -> 24 [style=solid label="IF"]
  85 -> 25 [style=solid label="FORR"]
  85 -> 26 [style=solid label="MOVE"]
  85 -> 27 [style=solid label="RIGHT"]
  85 -> 28 [style=solid label="LEFT"]
  85 -> 29 [style=solid label="ROBEX"]
  85 -> 30 [style=solid label="WALL"]
  85 -> 31 [style=solid label="'-'"]
  85 -> 32 [style=solid label="'!'"]
  85 -> 33 [style=solid label="'('"]
  85 -> 164 [style=solid label="')'"]
  85 -> 34 [style=solid label="'['"]
  85 -> 35 [style=solid label="'{'"]
  85 -> 97 [style=dashed label="stmt"]
  85 -> 38 [style=dashed label="robotactions"]
  85 -> 39 [style=dashed label="robotmove"]
  85 -> 40 [style=dashed label="robotright"]
  85 -> 41 [style=dashed label="robotleft"]
  85 -> 42 [style=dashed label="robotwall"]
  85 -> 43 [style=dashed label="robotexit"]
  85 -> 44 [style=dashed label="iff"]
  85 -> 45 [style=dashed label="forr"]
  85 -> 46 [style=dashed label="return_func"]
  85 -> 47 [style=dashed label="function_head"]
  85 -> 48 [style=dashed label="function"]
  85 -> 49 [style=dashed label="callfunction"]
  85 -> 50 [style=dashed label="matrix"]
  85 -> 51 [style=dashed label="vector"]
  85 -> 52 [style=dashed label="vmdeclaration"]
  85 -> 53 [style=dashed label="declaration"]
  85 -> 54 [style=dashed label="assignment"]
  85 -> 55 [style=dashed label="print"]
  85 -> 56 [style=dashed label="expr"]
  85 -> 57 [style=dashed label="type"]
  85 -> 58 [style=dashed label="const"]
  86 [label="State 86\n\l 10 stmt: expr . NEWLINE\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l133     | '(' expr . ')'\l"]
  86 -> 122 [style=solid label="NEWLINE"]
  86 -> 123 [style=solid label="CONJUNCTION"]
  86 -> 124 [style=solid label="'<'"]
  86 -> 125 [style=solid label="'>'"]
  86 -> 126 [style=solid label="'+'"]
  86 -> 127 [style=solid label="'-'"]
  86 -> 128 [style=solid label="'/'"]
  86 -> 165 [style=solid label="')'"]
  87 [label="State 87\n\l 42 return_func: return_func . ',' type VAR\l 43            | return_func . error\l 55 function_head: '[' return_func . ']' DECLARE FUNC VAR '(' args_func ')'\l"]
  87 -> 101 [style=dotted]
  87 -> 102 [style=solid label="','"]
  87 -> 166 [style=solid label="']'"]
  88 [label="State 88\n\l 41 return_func: type . VAR\l"]
  88 -> 167 [style=solid label="VAR"]
  89 [label="State 89\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 98       | error . vector\l 99       | . error expr\l 99       | error . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l136     | error . expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  89 -> 89 [style=dotted]
  89 -> 5 [style=solid label="BOOL"]
  89 -> 6 [style=solid label="INTEGER"]
  89 -> 60 [style=solid label="VARIABLE"]
  89 -> 61 [style=solid label="VVARIABLE"]
  89 -> 90 [style=solid label="MVARIABLE"]
  89 -> 26 [style=solid label="MOVE"]
  89 -> 29 [style=solid label="ROBEX"]
  89 -> 30 [style=solid label="WALL"]
  89 -> 31 [style=solid label="'-'"]
  89 -> 32 [style=solid label="'!'"]
  89 -> 64 [style=solid label="'('"]
  89 -> 91 [style=solid label="'{'"]
  89 -> 39 [style=dashed label="robotmove"]
  89 -> 42 [style=dashed label="robotwall"]
  89 -> 43 [style=dashed label="robotexit"]
  89 -> 168 [style=dashed label="vector"]
  89 -> 169 [style=dashed label="expr"]
  89 -> 58 [style=dashed label="const"]
  90 [label="State 90\n\l 91 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 92       | MVARIABLE . '(' '[' ']' ',' expr ')'\l135 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  90 -> 170 [style=solid label="'('"]
  91 [label="State 91\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 89 vector: '{' . exprs '}'\l100 exprs: . expr ',' expr\l101      | . exprs ',' expr\l102      | . exprs error\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  91 -> 75 [style=dotted]
  91 -> 5 [style=solid label="BOOL"]
  91 -> 6 [style=solid label="INTEGER"]
  91 -> 60 [style=solid label="VARIABLE"]
  91 -> 76 [style=solid label="VVARIABLE"]
  91 -> 77 [style=solid label="MVARIABLE"]
  91 -> 26 [style=solid label="MOVE"]
  91 -> 29 [style=solid label="ROBEX"]
  91 -> 30 [style=solid label="WALL"]
  91 -> 31 [style=solid label="'-'"]
  91 -> 32 [style=solid label="'!'"]
  91 -> 64 [style=solid label="'('"]
  91 -> 39 [style=dashed label="robotmove"]
  91 -> 42 [style=dashed label="robotwall"]
  91 -> 43 [style=dashed label="robotexit"]
  91 -> 94 [style=dashed label="exprs"]
  91 -> 95 [style=dashed label="expr"]
  91 -> 58 [style=dashed label="const"]
  92 [label="State 92\n\l 70 matrix: '{' listexprs . '}'\l 87 listexprs: listexprs . ',' vector\l 88          | listexprs . error\l"]
  92 -> 171 [style=dotted]
  92 -> 172 [style=solid label="','"]
  92 -> 173 [style=solid label="'}'"]
  93 [label="State 93\n\l 86 listexprs: vector . ',' vector\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  93 -> 114 [style=solid label="ELEMMULT"]
  93 -> 116 [style=solid label="LEFTSHIFT"]
  93 -> 117 [style=solid label="RIGHTSHIFT"]
  93 -> 174 [style=solid label="','"]
  94 [label="State 94\n\l 89 vector: '{' exprs . '}'\l101 exprs: exprs . ',' expr\l102      | exprs . error\l"]
  94 -> 175 [style=dotted]
  94 -> 176 [style=solid label="','"]
  94 -> 177 [style=solid label="'}'"]
  95 [label="State 95\n\l100 exprs: expr . ',' expr\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  95 -> 123 [style=solid label="CONJUNCTION"]
  95 -> 178 [style=solid label="','"]
  95 -> 124 [style=solid label="'<'"]
  95 -> 125 [style=solid label="'>'"]
  95 -> 126 [style=solid label="'+'"]
  95 -> 127 [style=solid label="'-'"]
  95 -> 128 [style=solid label="'/'"]
  96 [label="State 96\n\l  7 stmts: stmts error .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, E, MOVE, RIGHT, LEFT, ROBEX, WALL, ENDIF, ENDFOR, '-', '!', '(', ')', '[', '{']\l 23 stmt: error . NEWLINE\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 56 function_head: error .  [B]\l 69 callfunction: error . '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 83       | error . matrix\l 84       | . error vector\l 84       | error . vector\l 85       | . error expr\l 85       | error . expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 98       | error . vector\l 99       | . error expr\l 99       | error . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l136     | error . expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  96 -> 59 [style=dotted]
  96 -> 5 [style=solid label="BOOL"]
  96 -> 6 [style=solid label="INTEGER"]
  96 -> 60 [style=solid label="VARIABLE"]
  96 -> 61 [style=solid label="VVARIABLE"]
  96 -> 62 [style=solid label="MVARIABLE"]
  96 -> 63 [style=solid label="NEWLINE"]
  96 -> 26 [style=solid label="MOVE"]
  96 -> 29 [style=solid label="ROBEX"]
  96 -> 30 [style=solid label="WALL"]
  96 -> 31 [style=solid label="'-'"]
  96 -> 32 [style=solid label="'!'"]
  96 -> 64 [style=solid label="'('"]
  96 -> 65 [style=solid label="'['"]
  96 -> 35 [style=solid label="'{'"]
  96 -> 39 [style=dashed label="robotmove"]
  96 -> 42 [style=dashed label="robotwall"]
  96 -> 43 [style=dashed label="robotexit"]
  96 -> 66 [style=dashed label="matrix"]
  96 -> 67 [style=dashed label="vector"]
  96 -> 68 [style=dashed label="expr"]
  96 -> 58 [style=dashed label="const"]
  96 -> "96R7d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, NEWLINE, MOVE, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "96R7d" [label="R7", fillcolor=5, shape=diamond, style=filled]
  96 -> "96R7" [label="[$end, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, PRINT, IF, FORR, E, RIGHT, LEFT, ENDIF, ENDFOR, ')']", style=solid]
 "96R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  96 -> "96R56" [label="[B]", style=solid]
 "96R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  97 [label="State 97\n\l  6 stmts: stmts stmt .\l"]
  97 -> "97R6" [style=solid]
 "97R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  98 [label="State 98\n\l 21 stmt: robotactions NEWLINE .\l"]
  98 -> "98R21" [style=solid]
 "98R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  99 [label="State 99\n\l 17 stmt: iff NEWLINE .\l"]
  99 -> "99R17" [style=solid]
 "99R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  100 [label="State 100\n\l 18 stmt: forr NEWLINE .\l"]
  100 -> "100R18" [style=solid]
 "100R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  101 [label="State 101\n\l 43 return_func: return_func error .\l"]
  101 -> "101R43" [style=solid]
 "101R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  102 [label="State 102\n\l 42 return_func: return_func ',' . type VAR\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l"]
  102 -> 10 [style=solid label="CINT"]
  102 -> 11 [style=solid label="VINT"]
  102 -> 12 [style=solid label="MINT"]
  102 -> 13 [style=solid label="INT"]
  102 -> 14 [style=solid label="CVINT"]
  102 -> 15 [style=solid label="CMINT"]
  102 -> 16 [style=solid label="BOOLEAN"]
  102 -> 17 [style=solid label="CBOOLEAN"]
  102 -> 18 [style=solid label="VBOOLEAN"]
  102 -> 19 [style=solid label="MBOOLEAN"]
  102 -> 20 [style=solid label="CVBOOLEAN"]
  102 -> 21 [style=solid label="CMBOOLEAN"]
  102 -> 179 [style=dashed label="type"]
  103 [label="State 103\n\l 68 callfunction: return_func DECLARE . FVARIABLE '[' callfunc_args ']'\l"]
  103 -> 180 [style=solid label="FVARIABLE"]
  104 [label="State 104\n\l 57 function: function_head B . NEWLINE stmts E\l"]
  104 -> 181 [style=solid label="NEWLINE"]
  105 [label="State 105\n\l 19 stmt: function NEWLINE .\l"]
  105 -> "105R19" [style=solid]
 "105R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  106 [label="State 106\n\l 20 stmt: callfunction NEWLINE .\l"]
  106 -> "106R20" [style=solid]
 "106R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  107 [label="State 107\n\l 12 stmt: matrix NEWLINE .\l"]
  107 -> "107R12" [style=solid]
 "107R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  108 [label="State 108\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 76       | matrix ELEMMULT . matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 81       | matrix ELEMMULT . vector\l 82       | . matrix ELEMMULT expr\l 82       | matrix ELEMMULT . expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  108 -> 59 [style=dotted]
  108 -> 5 [style=solid label="BOOL"]
  108 -> 6 [style=solid label="INTEGER"]
  108 -> 60 [style=solid label="VARIABLE"]
  108 -> 61 [style=solid label="VVARIABLE"]
  108 -> 62 [style=solid label="MVARIABLE"]
  108 -> 26 [style=solid label="MOVE"]
  108 -> 29 [style=solid label="ROBEX"]
  108 -> 30 [style=solid label="WALL"]
  108 -> 31 [style=solid label="'-'"]
  108 -> 32 [style=solid label="'!'"]
  108 -> 64 [style=solid label="'('"]
  108 -> 35 [style=solid label="'{'"]
  108 -> 39 [style=dashed label="robotmove"]
  108 -> 42 [style=dashed label="robotwall"]
  108 -> 43 [style=dashed label="robotexit"]
  108 -> 182 [style=dashed label="matrix"]
  108 -> 183 [style=dashed label="vector"]
  108 -> 184 [style=dashed label="expr"]
  108 -> 58 [style=dashed label="const"]
  109 [label="State 109\n\l 77 matrix: matrix '\\'' .\l"]
  109 -> "109R77" [style=solid]
 "109R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  110 [label="State 110\n\l 79 matrix: matrix LEFTSHIFT .\l"]
  110 -> "110R79" [style=solid]
 "110R79" [label="R79", fillcolor=3, shape=diamond, style=filled]
  111 [label="State 111\n\l 78 matrix: matrix RIGHTSHIFT .\l"]
  111 -> "111R78" [style=solid]
 "111R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
  112 [label="State 112\n\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 75       | matrix '*' . matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l"]
  112 -> 146 [style=dotted]
  112 -> 141 [style=solid label="VVARIABLE"]
  112 -> 147 [style=solid label="MVARIABLE"]
  112 -> 35 [style=solid label="'{'"]
  112 -> 185 [style=dashed label="matrix"]
  112 -> 149 [style=dashed label="vector"]
  113 [label="State 113\n\l 11 stmt: vector NEWLINE .\l"]
  113 -> "113R11" [style=solid]
 "113R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  114 [label="State 114\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 94       | vector ELEMMULT . vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 97       | vector ELEMMULT . expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  114 -> 89 [style=dotted]
  114 -> 5 [style=solid label="BOOL"]
  114 -> 6 [style=solid label="INTEGER"]
  114 -> 60 [style=solid label="VARIABLE"]
  114 -> 61 [style=solid label="VVARIABLE"]
  114 -> 90 [style=solid label="MVARIABLE"]
  114 -> 26 [style=solid label="MOVE"]
  114 -> 29 [style=solid label="ROBEX"]
  114 -> 30 [style=solid label="WALL"]
  114 -> 31 [style=solid label="'-'"]
  114 -> 32 [style=solid label="'!'"]
  114 -> 64 [style=solid label="'('"]
  114 -> 91 [style=solid label="'{'"]
  114 -> 39 [style=dashed label="robotmove"]
  114 -> 42 [style=dashed label="robotwall"]
  114 -> 43 [style=dashed label="robotexit"]
  114 -> 186 [style=dashed label="vector"]
  114 -> 187 [style=dashed label="expr"]
  114 -> 58 [style=dashed label="const"]
  115 [label="State 115\n\l 80 matrix: vector '\\'' .\l"]
  115 -> "115R80" [style=solid]
 "115R80" [label="R80", fillcolor=3, shape=diamond, style=filled]
  116 [label="State 116\n\l 96 vector: vector LEFTSHIFT .\l"]
  116 -> "116R96" [style=solid]
 "116R96" [label="R96", fillcolor=3, shape=diamond, style=filled]
  117 [label="State 117\n\l 95 vector: vector RIGHTSHIFT .\l"]
  117 -> "117R95" [style=solid]
 "117R95" [label="R95", fillcolor=3, shape=diamond, style=filled]
  118 [label="State 118\n\l 14 stmt: vmdeclaration NEWLINE .\l"]
  118 -> "118R14" [style=solid]
 "118R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  119 [label="State 119\n\l 15 stmt: declaration NEWLINE .\l"]
  119 -> "119R15" [style=solid]
 "119R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  120 [label="State 120\n\l 16 stmt: assignment NEWLINE .\l"]
  120 -> "120R16" [style=solid]
 "120R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  121 [label="State 121\n\l 13 stmt: print NEWLINE .\l"]
  121 -> "121R13" [style=solid]
 "121R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  122 [label="State 122\n\l 10 stmt: expr NEWLINE .\l"]
  122 -> "122R10" [style=solid]
 "122R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  123 [label="State 123\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l132     | expr CONJUNCTION . expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  123 -> 75 [style=dotted]
  123 -> 5 [style=solid label="BOOL"]
  123 -> 6 [style=solid label="INTEGER"]
  123 -> 60 [style=solid label="VARIABLE"]
  123 -> 76 [style=solid label="VVARIABLE"]
  123 -> 77 [style=solid label="MVARIABLE"]
  123 -> 26 [style=solid label="MOVE"]
  123 -> 29 [style=solid label="ROBEX"]
  123 -> 30 [style=solid label="WALL"]
  123 -> 31 [style=solid label="'-'"]
  123 -> 32 [style=solid label="'!'"]
  123 -> 64 [style=solid label="'('"]
  123 -> 39 [style=dashed label="robotmove"]
  123 -> 42 [style=dashed label="robotwall"]
  123 -> 43 [style=dashed label="robotexit"]
  123 -> 188 [style=dashed label="expr"]
  123 -> 58 [style=dashed label="const"]
  124 [label="State 124\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l129     | expr '<' . expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  124 -> 75 [style=dotted]
  124 -> 5 [style=solid label="BOOL"]
  124 -> 6 [style=solid label="INTEGER"]
  124 -> 60 [style=solid label="VARIABLE"]
  124 -> 76 [style=solid label="VVARIABLE"]
  124 -> 77 [style=solid label="MVARIABLE"]
  124 -> 26 [style=solid label="MOVE"]
  124 -> 29 [style=solid label="ROBEX"]
  124 -> 30 [style=solid label="WALL"]
  124 -> 31 [style=solid label="'-'"]
  124 -> 32 [style=solid label="'!'"]
  124 -> 64 [style=solid label="'('"]
  124 -> 39 [style=dashed label="robotmove"]
  124 -> 42 [style=dashed label="robotwall"]
  124 -> 43 [style=dashed label="robotexit"]
  124 -> 189 [style=dashed label="expr"]
  124 -> 58 [style=dashed label="const"]
  125 [label="State 125\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l130     | expr '>' . expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  125 -> 75 [style=dotted]
  125 -> 5 [style=solid label="BOOL"]
  125 -> 6 [style=solid label="INTEGER"]
  125 -> 60 [style=solid label="VARIABLE"]
  125 -> 76 [style=solid label="VVARIABLE"]
  125 -> 77 [style=solid label="MVARIABLE"]
  125 -> 26 [style=solid label="MOVE"]
  125 -> 29 [style=solid label="ROBEX"]
  125 -> 30 [style=solid label="WALL"]
  125 -> 31 [style=solid label="'-'"]
  125 -> 32 [style=solid label="'!'"]
  125 -> 64 [style=solid label="'('"]
  125 -> 39 [style=dashed label="robotmove"]
  125 -> 42 [style=dashed label="robotwall"]
  125 -> 43 [style=dashed label="robotexit"]
  125 -> 190 [style=dashed label="expr"]
  125 -> 58 [style=dashed label="const"]
  126 [label="State 126\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l126     | expr '+' . expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  126 -> 75 [style=dotted]
  126 -> 5 [style=solid label="BOOL"]
  126 -> 6 [style=solid label="INTEGER"]
  126 -> 60 [style=solid label="VARIABLE"]
  126 -> 76 [style=solid label="VVARIABLE"]
  126 -> 77 [style=solid label="MVARIABLE"]
  126 -> 26 [style=solid label="MOVE"]
  126 -> 29 [style=solid label="ROBEX"]
  126 -> 30 [style=solid label="WALL"]
  126 -> 31 [style=solid label="'-'"]
  126 -> 32 [style=solid label="'!'"]
  126 -> 64 [style=solid label="'('"]
  126 -> 39 [style=dashed label="robotmove"]
  126 -> 42 [style=dashed label="robotwall"]
  126 -> 43 [style=dashed label="robotexit"]
  126 -> 191 [style=dashed label="expr"]
  126 -> 58 [style=dashed label="const"]
  127 [label="State 127\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l127     | expr '-' . expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  127 -> 75 [style=dotted]
  127 -> 5 [style=solid label="BOOL"]
  127 -> 6 [style=solid label="INTEGER"]
  127 -> 60 [style=solid label="VARIABLE"]
  127 -> 76 [style=solid label="VVARIABLE"]
  127 -> 77 [style=solid label="MVARIABLE"]
  127 -> 26 [style=solid label="MOVE"]
  127 -> 29 [style=solid label="ROBEX"]
  127 -> 30 [style=solid label="WALL"]
  127 -> 31 [style=solid label="'-'"]
  127 -> 32 [style=solid label="'!'"]
  127 -> 64 [style=solid label="'('"]
  127 -> 39 [style=dashed label="robotmove"]
  127 -> 42 [style=dashed label="robotwall"]
  127 -> 43 [style=dashed label="robotexit"]
  127 -> 192 [style=dashed label="expr"]
  127 -> 58 [style=dashed label="const"]
  128 [label="State 128\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l128     | expr '/' . expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  128 -> 75 [style=dotted]
  128 -> 5 [style=solid label="BOOL"]
  128 -> 6 [style=solid label="INTEGER"]
  128 -> 60 [style=solid label="VARIABLE"]
  128 -> 76 [style=solid label="VVARIABLE"]
  128 -> 77 [style=solid label="MVARIABLE"]
  128 -> 26 [style=solid label="MOVE"]
  128 -> 29 [style=solid label="ROBEX"]
  128 -> 30 [style=solid label="WALL"]
  128 -> 31 [style=solid label="'-'"]
  128 -> 32 [style=solid label="'!'"]
  128 -> 64 [style=solid label="'('"]
  128 -> 39 [style=dashed label="robotmove"]
  128 -> 42 [style=dashed label="robotwall"]
  128 -> 43 [style=dashed label="robotexit"]
  128 -> 193 [style=dashed label="expr"]
  128 -> 58 [style=dashed label="const"]
  129 [label="State 129\n\l 41 return_func: type VAR .  [error, ',', DECLARE]\l111 declaration: type VAR . DECLARE expr\l112            | type VAR . DECLARE vector\l113            | type VAR . DECLARE matrix\l"]
  129 -> 194 [style=solid label="DECLARE"]
  129 -> "129R41d" [label="[DECLARE]", style=solid]
 "129R41d" [label="R41", fillcolor=5, shape=diamond, style=filled]
  129 -> "129R41" [style=solid]
 "129R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  130 [label="State 130\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 90       | VVARIABLE '(' . vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l134     | VVARIABLE '(' . expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  130 -> 89 [style=dotted]
  130 -> 5 [style=solid label="BOOL"]
  130 -> 6 [style=solid label="INTEGER"]
  130 -> 60 [style=solid label="VARIABLE"]
  130 -> 61 [style=solid label="VVARIABLE"]
  130 -> 90 [style=solid label="MVARIABLE"]
  130 -> 26 [style=solid label="MOVE"]
  130 -> 29 [style=solid label="ROBEX"]
  130 -> 30 [style=solid label="WALL"]
  130 -> 31 [style=solid label="'-'"]
  130 -> 32 [style=solid label="'!'"]
  130 -> 64 [style=solid label="'('"]
  130 -> 91 [style=solid label="'{'"]
  130 -> 39 [style=dashed label="robotmove"]
  130 -> 42 [style=dashed label="robotwall"]
  130 -> 43 [style=dashed label="robotexit"]
  130 -> 195 [style=dashed label="vector"]
  130 -> 196 [style=dashed label="expr"]
  130 -> 58 [style=dashed label="const"]
  131 [label="State 131\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 71       | MVARIABLE '(' . vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 72       | MVARIABLE '(' . '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 73       | MVARIABLE '(' . matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 91       | MVARIABLE '(' . expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 92       | MVARIABLE '(' . '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l135     | MVARIABLE '(' . expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  131 -> 59 [style=dotted]
  131 -> 5 [style=solid label="BOOL"]
  131 -> 6 [style=solid label="INTEGER"]
  131 -> 60 [style=solid label="VARIABLE"]
  131 -> 61 [style=solid label="VVARIABLE"]
  131 -> 62 [style=solid label="MVARIABLE"]
  131 -> 26 [style=solid label="MOVE"]
  131 -> 29 [style=solid label="ROBEX"]
  131 -> 30 [style=solid label="WALL"]
  131 -> 31 [style=solid label="'-'"]
  131 -> 32 [style=solid label="'!'"]
  131 -> 64 [style=solid label="'('"]
  131 -> 197 [style=solid label="'['"]
  131 -> 35 [style=solid label="'{'"]
  131 -> 39 [style=dashed label="robotmove"]
  131 -> 42 [style=dashed label="robotwall"]
  131 -> 43 [style=dashed label="robotexit"]
  131 -> 198 [style=dashed label="matrix"]
  131 -> 199 [style=dashed label="vector"]
  131 -> 200 [style=dashed label="expr"]
  131 -> 58 [style=dashed label="const"]
  132 [label="State 132\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l133     | '(' expr . ')'\l"]
  132 -> 123 [style=solid label="CONJUNCTION"]
  132 -> 124 [style=solid label="'<'"]
  132 -> 125 [style=solid label="'>'"]
  132 -> 126 [style=solid label="'+'"]
  132 -> 127 [style=solid label="'-'"]
  132 -> 128 [style=solid label="'/'"]
  132 -> 165 [style=solid label="')'"]
  133 [label="State 133\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 67 callfunc_args: error .  [error, ',', ']']\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 83       | error . matrix\l 84       | . error vector\l 84       | error . vector\l 85       | . error expr\l 85       | error . expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 98       | error . vector\l 99       | . error expr\l 99       | error . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l136     | error . expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  133 -> 59 [style=dotted]
  133 -> 5 [style=solid label="BOOL"]
  133 -> 6 [style=solid label="INTEGER"]
  133 -> 60 [style=solid label="VARIABLE"]
  133 -> 61 [style=solid label="VVARIABLE"]
  133 -> 62 [style=solid label="MVARIABLE"]
  133 -> 26 [style=solid label="MOVE"]
  133 -> 29 [style=solid label="ROBEX"]
  133 -> 30 [style=solid label="WALL"]
  133 -> 31 [style=solid label="'-'"]
  133 -> 32 [style=solid label="'!'"]
  133 -> 64 [style=solid label="'('"]
  133 -> 35 [style=solid label="'{'"]
  133 -> 39 [style=dashed label="robotmove"]
  133 -> 42 [style=dashed label="robotwall"]
  133 -> 43 [style=dashed label="robotexit"]
  133 -> 66 [style=dashed label="matrix"]
  133 -> 67 [style=dashed label="vector"]
  133 -> 68 [style=dashed label="expr"]
  133 -> 58 [style=dashed label="const"]
  133 -> "133R67d" [label="[error]", style=solid]
 "133R67d" [label="R67", fillcolor=5, shape=diamond, style=filled]
  133 -> "133R67" [label="[',', ']']", style=solid]
 "133R67" [label="R67", fillcolor=3, shape=diamond, style=filled]
  134 [label="State 134\n\l 61 callfunc_args: DFLT .\l"]
  134 -> "134R61" [style=solid]
 "134R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
  135 [label="State 135\n\l 62 callfunc_args: callfunc_args . ',' expr\l 63              | callfunc_args . ',' vector\l 64              | callfunc_args . ',' matrix\l 65              | callfunc_args . ',' DFLT\l 66              | callfunc_args . error\l 69 callfunction: error '[' callfunc_args . ']'\l"]
  135 -> 201 [style=dotted]
  135 -> 202 [style=solid label="','"]
  135 -> 203 [style=solid label="']'"]
  136 [label="State 136\n\l 60 callfunc_args: matrix .  [error, ',', ']']\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l"]
  136 -> 108 [style=solid label="ELEMMULT"]
  136 -> 109 [style=solid label="'\\''"]
  136 -> 110 [style=solid label="LEFTSHIFT"]
  136 -> 111 [style=solid label="RIGHTSHIFT"]
  136 -> 112 [style=solid label="'*'"]
  136 -> "136R60" [style=solid]
 "136R60" [label="R60", fillcolor=3, shape=diamond, style=filled]
  137 [label="State 137\n\l 59 callfunc_args: vector .  [error, ',', ']']\l 80 matrix: vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  137 -> 114 [style=solid label="ELEMMULT"]
  137 -> 115 [style=solid label="'\\''"]
  137 -> 116 [style=solid label="LEFTSHIFT"]
  137 -> 117 [style=solid label="RIGHTSHIFT"]
  137 -> "137R59" [style=solid]
 "137R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
  138 [label="State 138\n\l 58 callfunc_args: expr .  [error, ',', ']']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  138 -> 123 [style=solid label="CONJUNCTION"]
  138 -> 124 [style=solid label="'<'"]
  138 -> 125 [style=solid label="'>'"]
  138 -> 126 [style=solid label="'+'"]
  138 -> 127 [style=solid label="'-'"]
  138 -> 128 [style=solid label="'/'"]
  138 -> "138R58" [style=solid]
 "138R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  139 [label="State 139\n\l114 assignment: VARIABLE ASSIGN expr .  [NEWLINE]\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  139 -> 123 [style=solid label="CONJUNCTION"]
  139 -> 124 [style=solid label="'<'"]
  139 -> 125 [style=solid label="'>'"]
  139 -> 126 [style=solid label="'+'"]
  139 -> 127 [style=solid label="'-'"]
  139 -> 128 [style=solid label="'/'"]
  139 -> "139R114" [style=solid]
 "139R114" [label="R114", fillcolor=3, shape=diamond, style=filled]
  140 [label="State 140\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 98       | error . vector\l 99       | . error expr\l 99       | error . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  140 -> 89 [style=dotted]
  140 -> 5 [style=solid label="BOOL"]
  140 -> 6 [style=solid label="INTEGER"]
  140 -> 60 [style=solid label="VARIABLE"]
  140 -> 61 [style=solid label="VVARIABLE"]
  140 -> 90 [style=solid label="MVARIABLE"]
  140 -> 26 [style=solid label="MOVE"]
  140 -> 29 [style=solid label="ROBEX"]
  140 -> 30 [style=solid label="WALL"]
  140 -> 31 [style=solid label="'-'"]
  140 -> 32 [style=solid label="'!'"]
  140 -> 64 [style=solid label="'('"]
  140 -> 91 [style=solid label="'{'"]
  140 -> 39 [style=dashed label="robotmove"]
  140 -> 42 [style=dashed label="robotwall"]
  140 -> 43 [style=dashed label="robotexit"]
  140 -> 168 [style=dashed label="vector"]
  140 -> 204 [style=dashed label="expr"]
  140 -> 58 [style=dashed label="const"]
  141 [label="State 141\n\l 90 vector: VVARIABLE . '(' vector ',' '[' ']' ')'\l 93       | VVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', '}']\l"]
  141 -> 205 [style=solid label="'('"]
  141 -> "141R93" [style=solid]
 "141R93" [label="R93", fillcolor=3, shape=diamond, style=filled]
  142 [label="State 142\n\l 91 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 92       | MVARIABLE . '(' '[' ']' ',' expr ')'\l"]
  142 -> 206 [style=solid label="'('"]
  143 [label="State 143\n\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l115 assignment: VVARIABLE ASSIGN vector .  [NEWLINE]\l"]
  143 -> 114 [style=solid label="ELEMMULT"]
  143 -> 116 [style=solid label="LEFTSHIFT"]
  143 -> 117 [style=solid label="RIGHTSHIFT"]
  143 -> "143R115" [style=solid]
 "143R115" [label="R115", fillcolor=3, shape=diamond, style=filled]
  144 [label="State 144\n\l 90 vector: VVARIABLE '(' vector . ',' '[' ']' ')'\l 94       | vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l104 vmdeclaration: VVARIABLE '(' vector . ',' '[' ']' ')' ASSIGN vector\l"]
  144 -> 114 [style=solid label="ELEMMULT"]
  144 -> 116 [style=solid label="LEFTSHIFT"]
  144 -> 117 [style=solid label="RIGHTSHIFT"]
  144 -> 207 [style=solid label="','"]
  145 [label="State 145\n\l103 vmdeclaration: VVARIABLE '(' expr . ')' ASSIGN expr\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l134     | VVARIABLE '(' expr . ')'\l"]
  145 -> 123 [style=solid label="CONJUNCTION"]
  145 -> 124 [style=solid label="'<'"]
  145 -> 125 [style=solid label="'>'"]
  145 -> 126 [style=solid label="'+'"]
  145 -> 127 [style=solid label="'-'"]
  145 -> 128 [style=solid label="'/'"]
  145 -> 208 [style=solid label="')'"]
  146 [label="State 146\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 83       | error . matrix\l 84       | . error vector\l 84       | error . vector\l 85       | . error expr\l 85       | error . expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 98       | error . vector\l 99       | . error expr\l 99       | error . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  146 -> 59 [style=dotted]
  146 -> 5 [style=solid label="BOOL"]
  146 -> 6 [style=solid label="INTEGER"]
  146 -> 60 [style=solid label="VARIABLE"]
  146 -> 61 [style=solid label="VVARIABLE"]
  146 -> 62 [style=solid label="MVARIABLE"]
  146 -> 26 [style=solid label="MOVE"]
  146 -> 29 [style=solid label="ROBEX"]
  146 -> 30 [style=solid label="WALL"]
  146 -> 31 [style=solid label="'-'"]
  146 -> 32 [style=solid label="'!'"]
  146 -> 64 [style=solid label="'('"]
  146 -> 35 [style=solid label="'{'"]
  146 -> 39 [style=dashed label="robotmove"]
  146 -> 42 [style=dashed label="robotwall"]
  146 -> 43 [style=dashed label="robotexit"]
  146 -> 66 [style=dashed label="matrix"]
  146 -> 67 [style=dashed label="vector"]
  146 -> 209 [style=dashed label="expr"]
  146 -> 58 [style=dashed label="const"]
  147 [label="State 147\n\l 71 matrix: MVARIABLE . '(' vector ',' '[' ']' ')'\l 72       | MVARIABLE . '(' '[' ']' ',' vector ')'\l 73       | MVARIABLE . '(' matrix ')'\l 74       | MVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 91 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 92       | MVARIABLE . '(' '[' ']' ',' expr ')'\l"]
  147 -> 210 [style=solid label="'('"]
  147 -> "147R74" [style=solid]
 "147R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  148 [label="State 148\n\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l116 assignment: MVARIABLE ASSIGN matrix .  [NEWLINE]\l"]
  148 -> 108 [style=solid label="ELEMMULT"]
  148 -> 109 [style=solid label="'\\''"]
  148 -> 110 [style=solid label="LEFTSHIFT"]
  148 -> 111 [style=solid label="RIGHTSHIFT"]
  148 -> 112 [style=solid label="'*'"]
  148 -> "148R116" [style=solid]
 "148R116" [label="R116", fillcolor=3, shape=diamond, style=filled]
  149 [label="State 149\n\l 80 matrix: vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  149 -> 114 [style=solid label="ELEMMULT"]
  149 -> 115 [style=solid label="'\\''"]
  149 -> 116 [style=solid label="LEFTSHIFT"]
  149 -> 117 [style=solid label="RIGHTSHIFT"]
  150 [label="State 150\n\l 72 matrix: MVARIABLE '(' '[' . ']' ',' vector ')'\l 92 vector: MVARIABLE '(' '[' . ']' ',' expr ')'\l107 vmdeclaration: MVARIABLE '(' '[' . ']' ',' expr ')' ASSIGN vector\l109              | MVARIABLE '(' '[' . ']' ',' vector ')' ASSIGN matrix\l"]
  150 -> 211 [style=solid label="']'"]
  151 [label="State 151\n\l 73 matrix: MVARIABLE '(' matrix . ')'\l 75       | matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l110 vmdeclaration: MVARIABLE '(' matrix . ')' ASSIGN matrix\l"]
  151 -> 108 [style=solid label="ELEMMULT"]
  151 -> 109 [style=solid label="'\\''"]
  151 -> 110 [style=solid label="LEFTSHIFT"]
  151 -> 111 [style=solid label="RIGHTSHIFT"]
  151 -> 112 [style=solid label="'*'"]
  151 -> 212 [style=solid label="')'"]
  152 [label="State 152\n\l 71 matrix: MVARIABLE '(' vector . ',' '[' ']' ')'\l 80       | vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l108 vmdeclaration: MVARIABLE '(' vector . ',' '[' ']' ')' ASSIGN matrix\l"]
  152 -> 114 [style=solid label="ELEMMULT"]
  152 -> 115 [style=solid label="'\\''"]
  152 -> 116 [style=solid label="LEFTSHIFT"]
  152 -> 117 [style=solid label="RIGHTSHIFT"]
  152 -> 213 [style=solid label="','"]
  153 [label="State 153\n\l 91 vector: MVARIABLE '(' expr . ',' '[' ']' ')'\l105 vmdeclaration: MVARIABLE '(' expr . ',' expr ')' ASSIGN expr\l106              | MVARIABLE '(' expr . ',' '[' ']' ')' ASSIGN vector\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l135     | MVARIABLE '(' expr . ',' expr ')'\l"]
  153 -> 123 [style=solid label="CONJUNCTION"]
  153 -> 214 [style=solid label="','"]
  153 -> 124 [style=solid label="'<'"]
  153 -> 125 [style=solid label="'>'"]
  153 -> 126 [style=solid label="'+'"]
  153 -> 127 [style=solid label="'-'"]
  153 -> 128 [style=solid label="'/'"]
  154 [label="State 154\n\l118 print: PRINT '(' VVARIABLE . ')'\l134 expr: VVARIABLE . '(' expr ')'\l"]
  154 -> 158 [style=solid label="'('"]
  154 -> 215 [style=solid label="')'"]
  155 [label="State 155\n\l119 print: PRINT '(' MVARIABLE . ')'\l135 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  155 -> 159 [style=solid label="'('"]
  155 -> 216 [style=solid label="')'"]
  156 [label="State 156\n\l117 print: PRINT '(' expr . ')'\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  156 -> 123 [style=solid label="CONJUNCTION"]
  156 -> 124 [style=solid label="'<'"]
  156 -> 125 [style=solid label="'>'"]
  156 -> 126 [style=solid label="'+'"]
  156 -> 127 [style=solid label="'-'"]
  156 -> 128 [style=solid label="'/'"]
  156 -> 217 [style=solid label="')'"]
  157 [label="State 157\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l136     | error expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l"]
  157 -> 123 [style=solid label="CONJUNCTION"]
  157 -> 124 [style=solid label="'<'"]
  157 -> 125 [style=solid label="'>'"]
  157 -> 126 [style=solid label="'+'"]
  157 -> 127 [style=solid label="'-'"]
  157 -> 128 [style=solid label="'/'"]
  157 -> "157R136d" [label="[CONJUNCTION, '<', '>', '+', '-', '/']", style=solid]
 "157R136d" [label="R136", fillcolor=5, shape=diamond, style=filled]
  157 -> "157R136" [style=solid]
 "157R136" [label="R136", fillcolor=3, shape=diamond, style=filled]
  158 [label="State 158\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l134     | VVARIABLE '(' . expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  158 -> 75 [style=dotted]
  158 -> 5 [style=solid label="BOOL"]
  158 -> 6 [style=solid label="INTEGER"]
  158 -> 60 [style=solid label="VARIABLE"]
  158 -> 76 [style=solid label="VVARIABLE"]
  158 -> 77 [style=solid label="MVARIABLE"]
  158 -> 26 [style=solid label="MOVE"]
  158 -> 29 [style=solid label="ROBEX"]
  158 -> 30 [style=solid label="WALL"]
  158 -> 31 [style=solid label="'-'"]
  158 -> 32 [style=solid label="'!'"]
  158 -> 64 [style=solid label="'('"]
  158 -> 39 [style=dashed label="robotmove"]
  158 -> 42 [style=dashed label="robotwall"]
  158 -> 43 [style=dashed label="robotexit"]
  158 -> 196 [style=dashed label="expr"]
  158 -> 58 [style=dashed label="const"]
  159 [label="State 159\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l135     | MVARIABLE '(' . expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  159 -> 75 [style=dotted]
  159 -> 5 [style=solid label="BOOL"]
  159 -> 6 [style=solid label="INTEGER"]
  159 -> 60 [style=solid label="VARIABLE"]
  159 -> 76 [style=solid label="VVARIABLE"]
  159 -> 77 [style=solid label="MVARIABLE"]
  159 -> 26 [style=solid label="MOVE"]
  159 -> 29 [style=solid label="ROBEX"]
  159 -> 30 [style=solid label="WALL"]
  159 -> 31 [style=solid label="'-'"]
  159 -> 32 [style=solid label="'!'"]
  159 -> 64 [style=solid label="'('"]
  159 -> 39 [style=dashed label="robotmove"]
  159 -> 42 [style=dashed label="robotwall"]
  159 -> 43 [style=dashed label="robotexit"]
  159 -> 218 [style=dashed label="expr"]
  159 -> 58 [style=dashed label="const"]
  160 [label="State 160\n\l 31 iff: IF expr NEWLINE . begif stmts endif\l 32 begif: . B\l 33      | . BEGIF\l"]
  160 -> 219 [style=solid label="B"]
  160 -> 220 [style=solid label="BEGIF"]
  160 -> 221 [style=dashed label="begif"]
  161 [label="State 161\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 40 forr: FORR declaration DOUBLEDOT . expr NEWLINE begfor stmts endfor\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  161 -> 75 [style=dotted]
  161 -> 5 [style=solid label="BOOL"]
  161 -> 6 [style=solid label="INTEGER"]
  161 -> 60 [style=solid label="VARIABLE"]
  161 -> 76 [style=solid label="VVARIABLE"]
  161 -> 77 [style=solid label="MVARIABLE"]
  161 -> 26 [style=solid label="MOVE"]
  161 -> 29 [style=solid label="ROBEX"]
  161 -> 30 [style=solid label="WALL"]
  161 -> 31 [style=solid label="'-'"]
  161 -> 32 [style=solid label="'!'"]
  161 -> 64 [style=solid label="'('"]
  161 -> 39 [style=dashed label="robotmove"]
  161 -> 42 [style=dashed label="robotwall"]
  161 -> 43 [style=dashed label="robotexit"]
  161 -> 222 [style=dashed label="expr"]
  161 -> 58 [style=dashed label="const"]
  162 [label="State 162\n\l111 declaration: type VAR . DECLARE expr\l112            | type VAR . DECLARE vector\l113            | type VAR . DECLARE matrix\l"]
  162 -> 194 [style=solid label="DECLARE"]
  163 [label="State 163\n\l 26 robotmove: MOVE '(' expr . ')'\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  163 -> 123 [style=solid label="CONJUNCTION"]
  163 -> 124 [style=solid label="'<'"]
  163 -> 125 [style=solid label="'>'"]
  163 -> 126 [style=solid label="'+'"]
  163 -> 127 [style=solid label="'-'"]
  163 -> 128 [style=solid label="'/'"]
  163 -> 223 [style=solid label="')'"]
  164 [label="State 164\n\l 22 stmt: '(' stmts ')' .\l"]
  164 -> "164R22" [style=solid]
 "164R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  165 [label="State 165\n\l133 expr: '(' expr ')' .\l"]
  165 -> "165R133" [style=solid]
 "165R133" [label="R133", fillcolor=3, shape=diamond, style=filled]
  166 [label="State 166\n\l 55 function_head: '[' return_func ']' . DECLARE FUNC VAR '(' args_func ')'\l"]
  166 -> 224 [style=solid label="DECLARE"]
  167 [label="State 167\n\l 41 return_func: type VAR .\l"]
  167 -> "167R41" [style=solid]
 "167R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  168 [label="State 168\n\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l 98       | error vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l"]
  168 -> 114 [style=solid label="ELEMMULT"]
  168 -> 116 [style=solid label="LEFTSHIFT"]
  168 -> 117 [style=solid label="RIGHTSHIFT"]
  168 -> "168R98d" [label="[ELEMMULT, LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "168R98d" [label="R98", fillcolor=5, shape=diamond, style=filled]
  168 -> "168R98" [style=solid]
 "168R98" [label="R98", fillcolor=3, shape=diamond, style=filled]
  169 [label="State 169\n\l 99 vector: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l136     | error expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l"]
  169 -> 123 [style=solid label="CONJUNCTION"]
  169 -> 124 [style=solid label="'<'"]
  169 -> 125 [style=solid label="'>'"]
  169 -> 126 [style=solid label="'+'"]
  169 -> 127 [style=solid label="'-'"]
  169 -> 128 [style=solid label="'/'"]
  169 -> "169R99" [style=solid]
 "169R99" [label="R99", fillcolor=3, shape=diamond, style=filled]
  169 -> "169R136d" [label="[error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']", style=solid]
 "169R136d" [label="R136", fillcolor=5, shape=diamond, style=filled]
  170 [label="State 170\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 91 vector: MVARIABLE '(' . expr ',' '[' ']' ')'\l 92       | MVARIABLE '(' . '[' ']' ',' expr ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l135     | MVARIABLE '(' . expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  170 -> 75 [style=dotted]
  170 -> 5 [style=solid label="BOOL"]
  170 -> 6 [style=solid label="INTEGER"]
  170 -> 60 [style=solid label="VARIABLE"]
  170 -> 76 [style=solid label="VVARIABLE"]
  170 -> 77 [style=solid label="MVARIABLE"]
  170 -> 26 [style=solid label="MOVE"]
  170 -> 29 [style=solid label="ROBEX"]
  170 -> 30 [style=solid label="WALL"]
  170 -> 31 [style=solid label="'-'"]
  170 -> 32 [style=solid label="'!'"]
  170 -> 64 [style=solid label="'('"]
  170 -> 225 [style=solid label="'['"]
  170 -> 39 [style=dashed label="robotmove"]
  170 -> 42 [style=dashed label="robotwall"]
  170 -> 43 [style=dashed label="robotexit"]
  170 -> 200 [style=dashed label="expr"]
  170 -> 58 [style=dashed label="const"]
  171 [label="State 171\n\l 88 listexprs: listexprs error .\l"]
  171 -> "171R88" [style=solid]
 "171R88" [label="R88", fillcolor=3, shape=diamond, style=filled]
  172 [label="State 172\n\l 87 listexprs: listexprs ',' . vector\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l"]
  172 -> 140 [style=dotted]
  172 -> 141 [style=solid label="VVARIABLE"]
  172 -> 142 [style=solid label="MVARIABLE"]
  172 -> 91 [style=solid label="'{'"]
  172 -> 226 [style=dashed label="vector"]
  173 [label="State 173\n\l 70 matrix: '{' listexprs '}' .\l"]
  173 -> "173R70" [style=solid]
 "173R70" [label="R70", fillcolor=3, shape=diamond, style=filled]
  174 [label="State 174\n\l 86 listexprs: vector ',' . vector\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l"]
  174 -> 140 [style=dotted]
  174 -> 141 [style=solid label="VVARIABLE"]
  174 -> 142 [style=solid label="MVARIABLE"]
  174 -> 91 [style=solid label="'{'"]
  174 -> 227 [style=dashed label="vector"]
  175 [label="State 175\n\l102 exprs: exprs error .\l"]
  175 -> "175R102" [style=solid]
 "175R102" [label="R102", fillcolor=3, shape=diamond, style=filled]
  176 [label="State 176\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l101 exprs: exprs ',' . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  176 -> 75 [style=dotted]
  176 -> 5 [style=solid label="BOOL"]
  176 -> 6 [style=solid label="INTEGER"]
  176 -> 60 [style=solid label="VARIABLE"]
  176 -> 76 [style=solid label="VVARIABLE"]
  176 -> 77 [style=solid label="MVARIABLE"]
  176 -> 26 [style=solid label="MOVE"]
  176 -> 29 [style=solid label="ROBEX"]
  176 -> 30 [style=solid label="WALL"]
  176 -> 31 [style=solid label="'-'"]
  176 -> 32 [style=solid label="'!'"]
  176 -> 64 [style=solid label="'('"]
  176 -> 39 [style=dashed label="robotmove"]
  176 -> 42 [style=dashed label="robotwall"]
  176 -> 43 [style=dashed label="robotexit"]
  176 -> 228 [style=dashed label="expr"]
  176 -> 58 [style=dashed label="const"]
  177 [label="State 177\n\l 89 vector: '{' exprs '}' .\l"]
  177 -> "177R89" [style=solid]
 "177R89" [label="R89", fillcolor=3, shape=diamond, style=filled]
  178 [label="State 178\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l100 exprs: expr ',' . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  178 -> 75 [style=dotted]
  178 -> 5 [style=solid label="BOOL"]
  178 -> 6 [style=solid label="INTEGER"]
  178 -> 60 [style=solid label="VARIABLE"]
  178 -> 76 [style=solid label="VVARIABLE"]
  178 -> 77 [style=solid label="MVARIABLE"]
  178 -> 26 [style=solid label="MOVE"]
  178 -> 29 [style=solid label="ROBEX"]
  178 -> 30 [style=solid label="WALL"]
  178 -> 31 [style=solid label="'-'"]
  178 -> 32 [style=solid label="'!'"]
  178 -> 64 [style=solid label="'('"]
  178 -> 39 [style=dashed label="robotmove"]
  178 -> 42 [style=dashed label="robotwall"]
  178 -> 43 [style=dashed label="robotexit"]
  178 -> 229 [style=dashed label="expr"]
  178 -> 58 [style=dashed label="const"]
  179 [label="State 179\n\l 42 return_func: return_func ',' type . VAR\l"]
  179 -> 230 [style=solid label="VAR"]
  180 [label="State 180\n\l 68 callfunction: return_func DECLARE FVARIABLE . '[' callfunc_args ']'\l"]
  180 -> 231 [style=solid label="'['"]
  181 [label="State 181\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 41 return_func: . type VAR\l 42            | . return_func ',' type VAR\l 43            | . return_func error\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 57         | function_head B NEWLINE . stmts E\l 68 callfunction: . return_func DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  181 -> 84 [style=dotted]
  181 -> 5 [style=solid label="BOOL"]
  181 -> 6 [style=solid label="INTEGER"]
  181 -> 7 [style=solid label="VARIABLE"]
  181 -> 8 [style=solid label="VVARIABLE"]
  181 -> 9 [style=solid label="MVARIABLE"]
  181 -> 10 [style=solid label="CINT"]
  181 -> 11 [style=solid label="VINT"]
  181 -> 12 [style=solid label="MINT"]
  181 -> 13 [style=solid label="INT"]
  181 -> 14 [style=solid label="CVINT"]
  181 -> 15 [style=solid label="CMINT"]
  181 -> 16 [style=solid label="BOOLEAN"]
  181 -> 17 [style=solid label="CBOOLEAN"]
  181 -> 18 [style=solid label="VBOOLEAN"]
  181 -> 19 [style=solid label="MBOOLEAN"]
  181 -> 20 [style=solid label="CVBOOLEAN"]
  181 -> 21 [style=solid label="CMBOOLEAN"]
  181 -> 22 [style=solid label="NEWLINE"]
  181 -> 23 [style=solid label="PRINT"]
  181 -> 24 [style=solid label="IF"]
  181 -> 25 [style=solid label="FORR"]
  181 -> 26 [style=solid label="MOVE"]
  181 -> 27 [style=solid label="RIGHT"]
  181 -> 28 [style=solid label="LEFT"]
  181 -> 29 [style=solid label="ROBEX"]
  181 -> 30 [style=solid label="WALL"]
  181 -> 31 [style=solid label="'-'"]
  181 -> 32 [style=solid label="'!'"]
  181 -> 33 [style=solid label="'('"]
  181 -> 34 [style=solid label="'['"]
  181 -> 35 [style=solid label="'{'"]
  181 -> 232 [style=dashed label="stmts"]
  181 -> 37 [style=dashed label="stmt"]
  181 -> 38 [style=dashed label="robotactions"]
  181 -> 39 [style=dashed label="robotmove"]
  181 -> 40 [style=dashed label="robotright"]
  181 -> 41 [style=dashed label="robotleft"]
  181 -> 42 [style=dashed label="robotwall"]
  181 -> 43 [style=dashed label="robotexit"]
  181 -> 44 [style=dashed label="iff"]
  181 -> 45 [style=dashed label="forr"]
  181 -> 46 [style=dashed label="return_func"]
  181 -> 47 [style=dashed label="function_head"]
  181 -> 48 [style=dashed label="function"]
  181 -> 49 [style=dashed label="callfunction"]
  181 -> 50 [style=dashed label="matrix"]
  181 -> 51 [style=dashed label="vector"]
  181 -> 52 [style=dashed label="vmdeclaration"]
  181 -> 53 [style=dashed label="declaration"]
  181 -> 54 [style=dashed label="assignment"]
  181 -> 55 [style=dashed label="print"]
  181 -> 56 [style=dashed label="expr"]
  181 -> 57 [style=dashed label="type"]
  181 -> 58 [style=dashed label="const"]
  182 [label="State 182\n\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 76       | matrix ELEMMULT matrix .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l"]
  182 -> 108 [style=solid label="ELEMMULT"]
  182 -> 109 [style=solid label="'\\''"]
  182 -> 110 [style=solid label="LEFTSHIFT"]
  182 -> 111 [style=solid label="RIGHTSHIFT"]
  182 -> 112 [style=solid label="'*'"]
  182 -> "182R76d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']", style=solid]
 "182R76d" [label="R76", fillcolor=5, shape=diamond, style=filled]
  182 -> "182R76" [style=solid]
 "182R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
  183 [label="State 183\n\l 80 matrix: vector . '\\''\l 81       | matrix ELEMMULT vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  183 -> 114 [style=solid label="ELEMMULT"]
  183 -> 115 [style=solid label="'\\''"]
  183 -> 116 [style=solid label="LEFTSHIFT"]
  183 -> 117 [style=solid label="RIGHTSHIFT"]
  183 -> "183R81d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "183R81d" [label="R81", fillcolor=5, shape=diamond, style=filled]
  183 -> "183R81" [style=solid]
 "183R81" [label="R81", fillcolor=3, shape=diamond, style=filled]
  184 [label="State 184\n\l 82 matrix: matrix ELEMMULT expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  184 -> 123 [style=solid label="CONJUNCTION"]
  184 -> 124 [style=solid label="'<'"]
  184 -> 125 [style=solid label="'>'"]
  184 -> 126 [style=solid label="'+'"]
  184 -> 127 [style=solid label="'-'"]
  184 -> 128 [style=solid label="'/'"]
  184 -> "184R82" [style=solid]
 "184R82" [label="R82", fillcolor=3, shape=diamond, style=filled]
  185 [label="State 185\n\l 75 matrix: matrix . '*' matrix\l 75       | matrix '*' matrix .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l"]
  185 -> 108 [style=solid label="ELEMMULT"]
  185 -> 109 [style=solid label="'\\''"]
  185 -> 110 [style=solid label="LEFTSHIFT"]
  185 -> 111 [style=solid label="RIGHTSHIFT"]
  185 -> "185R75d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "185R75d" [label="R75", fillcolor=5, shape=diamond, style=filled]
  185 -> "185R75" [style=solid]
 "185R75" [label="R75", fillcolor=3, shape=diamond, style=filled]
  186 [label="State 186\n\l 94 vector: vector . ELEMMULT vector\l 94       | vector ELEMMULT vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  186 -> 114 [style=solid label="ELEMMULT"]
  186 -> 116 [style=solid label="LEFTSHIFT"]
  186 -> 117 [style=solid label="RIGHTSHIFT"]
  186 -> "186R94d" [label="[ELEMMULT, LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "186R94d" [label="R94", fillcolor=5, shape=diamond, style=filled]
  186 -> "186R94" [style=solid]
 "186R94" [label="R94", fillcolor=3, shape=diamond, style=filled]
  187 [label="State 187\n\l 97 vector: vector ELEMMULT expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  187 -> 123 [style=solid label="CONJUNCTION"]
  187 -> 124 [style=solid label="'<'"]
  187 -> 125 [style=solid label="'>'"]
  187 -> 126 [style=solid label="'+'"]
  187 -> 127 [style=solid label="'-'"]
  187 -> 128 [style=solid label="'/'"]
  187 -> "187R97" [style=solid]
 "187R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  188 [label="State 188\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l132     | expr CONJUNCTION expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l"]
  188 -> 123 [style=solid label="CONJUNCTION"]
  188 -> 124 [style=solid label="'<'"]
  188 -> 125 [style=solid label="'>'"]
  188 -> 126 [style=solid label="'+'"]
  188 -> 127 [style=solid label="'-'"]
  188 -> 128 [style=solid label="'/'"]
  188 -> "188R132d" [label="[CONJUNCTION, '<', '>', '+', '-', '/']", style=solid]
 "188R132d" [label="R132", fillcolor=5, shape=diamond, style=filled]
  188 -> "188R132" [style=solid]
 "188R132" [label="R132", fillcolor=3, shape=diamond, style=filled]
  189 [label="State 189\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l129     | expr '<' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '*', ')', ']', '}']\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  189 -> 123 [style=solid label="CONJUNCTION"]
  189 -> 126 [style=solid label="'+'"]
  189 -> 127 [style=solid label="'-'"]
  189 -> 128 [style=solid label="'/'"]
  189 -> "189R129d" [label="[CONJUNCTION]", style=solid]
 "189R129d" [label="R129", fillcolor=5, shape=diamond, style=filled]
  189 -> "189R129" [style=solid]
 "189R129" [label="R129", fillcolor=3, shape=diamond, style=filled]
  190 [label="State 190\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l130     | expr '>' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '*', ')', ']', '}']\l132     | expr . CONJUNCTION expr\l"]
  190 -> 123 [style=solid label="CONJUNCTION"]
  190 -> 126 [style=solid label="'+'"]
  190 -> 127 [style=solid label="'-'"]
  190 -> 128 [style=solid label="'/'"]
  190 -> "190R130d" [label="[CONJUNCTION]", style=solid]
 "190R130d" [label="R130", fillcolor=5, shape=diamond, style=filled]
  190 -> "190R130" [style=solid]
 "190R130" [label="R130", fillcolor=3, shape=diamond, style=filled]
  191 [label="State 191\n\l126 expr: expr . '+' expr\l126     | expr '+' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', ')', ']', '}']\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  191 -> 123 [style=solid label="CONJUNCTION"]
  191 -> 128 [style=solid label="'/'"]
  191 -> "191R126d" [label="[CONJUNCTION]", style=solid]
 "191R126d" [label="R126", fillcolor=5, shape=diamond, style=filled]
  191 -> "191R126" [style=solid]
 "191R126" [label="R126", fillcolor=3, shape=diamond, style=filled]
  192 [label="State 192\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l127     | expr '-' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', ')', ']', '}']\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  192 -> 123 [style=solid label="CONJUNCTION"]
  192 -> 128 [style=solid label="'/'"]
  192 -> "192R127d" [label="[CONJUNCTION]", style=solid]
 "192R127d" [label="R127", fillcolor=5, shape=diamond, style=filled]
  192 -> "192R127" [style=solid]
 "192R127" [label="R127", fillcolor=3, shape=diamond, style=filled]
  193 [label="State 193\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l128     | expr '/' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  193 -> 123 [style=solid label="CONJUNCTION"]
  193 -> "193R128d" [label="[CONJUNCTION]", style=solid]
 "193R128d" [label="R128", fillcolor=5, shape=diamond, style=filled]
  193 -> "193R128" [style=solid]
 "193R128" [label="R128", fillcolor=3, shape=diamond, style=filled]
  194 [label="State 194\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l111 declaration: type VAR DECLARE . expr\l112            | type VAR DECLARE . vector\l113            | type VAR DECLARE . matrix\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  194 -> 59 [style=dotted]
  194 -> 5 [style=solid label="BOOL"]
  194 -> 6 [style=solid label="INTEGER"]
  194 -> 60 [style=solid label="VARIABLE"]
  194 -> 61 [style=solid label="VVARIABLE"]
  194 -> 62 [style=solid label="MVARIABLE"]
  194 -> 26 [style=solid label="MOVE"]
  194 -> 29 [style=solid label="ROBEX"]
  194 -> 30 [style=solid label="WALL"]
  194 -> 31 [style=solid label="'-'"]
  194 -> 32 [style=solid label="'!'"]
  194 -> 64 [style=solid label="'('"]
  194 -> 35 [style=solid label="'{'"]
  194 -> 39 [style=dashed label="robotmove"]
  194 -> 42 [style=dashed label="robotwall"]
  194 -> 43 [style=dashed label="robotexit"]
  194 -> 233 [style=dashed label="matrix"]
  194 -> 234 [style=dashed label="vector"]
  194 -> 235 [style=dashed label="expr"]
  194 -> 58 [style=dashed label="const"]
  195 [label="State 195\n\l 90 vector: VVARIABLE '(' vector . ',' '[' ']' ')'\l 94       | vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  195 -> 114 [style=solid label="ELEMMULT"]
  195 -> 116 [style=solid label="LEFTSHIFT"]
  195 -> 117 [style=solid label="RIGHTSHIFT"]
  195 -> 236 [style=solid label="','"]
  196 [label="State 196\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l134     | VVARIABLE '(' expr . ')'\l"]
  196 -> 123 [style=solid label="CONJUNCTION"]
  196 -> 124 [style=solid label="'<'"]
  196 -> 125 [style=solid label="'>'"]
  196 -> 126 [style=solid label="'+'"]
  196 -> 127 [style=solid label="'-'"]
  196 -> 128 [style=solid label="'/'"]
  196 -> 237 [style=solid label="')'"]
  197 [label="State 197\n\l 72 matrix: MVARIABLE '(' '[' . ']' ',' vector ')'\l 92 vector: MVARIABLE '(' '[' . ']' ',' expr ')'\l"]
  197 -> 238 [style=solid label="']'"]
  198 [label="State 198\n\l 73 matrix: MVARIABLE '(' matrix . ')'\l 75       | matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l"]
  198 -> 108 [style=solid label="ELEMMULT"]
  198 -> 109 [style=solid label="'\\''"]
  198 -> 110 [style=solid label="LEFTSHIFT"]
  198 -> 111 [style=solid label="RIGHTSHIFT"]
  198 -> 112 [style=solid label="'*'"]
  198 -> 239 [style=solid label="')'"]
  199 [label="State 199\n\l 71 matrix: MVARIABLE '(' vector . ',' '[' ']' ')'\l 80       | vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  199 -> 114 [style=solid label="ELEMMULT"]
  199 -> 115 [style=solid label="'\\''"]
  199 -> 116 [style=solid label="LEFTSHIFT"]
  199 -> 117 [style=solid label="RIGHTSHIFT"]
  199 -> 240 [style=solid label="','"]
  200 [label="State 200\n\l 91 vector: MVARIABLE '(' expr . ',' '[' ']' ')'\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l135     | MVARIABLE '(' expr . ',' expr ')'\l"]
  200 -> 123 [style=solid label="CONJUNCTION"]
  200 -> 241 [style=solid label="','"]
  200 -> 124 [style=solid label="'<'"]
  200 -> 125 [style=solid label="'>'"]
  200 -> 126 [style=solid label="'+'"]
  200 -> 127 [style=solid label="'-'"]
  200 -> 128 [style=solid label="'/'"]
  201 [label="State 201\n\l 66 callfunc_args: callfunc_args error .\l"]
  201 -> "201R66" [style=solid]
 "201R66" [label="R66", fillcolor=3, shape=diamond, style=filled]
  202 [label="State 202\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 62 callfunc_args: callfunc_args ',' . expr\l 63              | callfunc_args ',' . vector\l 64              | callfunc_args ',' . matrix\l 65              | callfunc_args ',' . DFLT\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  202 -> 59 [style=dotted]
  202 -> 5 [style=solid label="BOOL"]
  202 -> 6 [style=solid label="INTEGER"]
  202 -> 60 [style=solid label="VARIABLE"]
  202 -> 61 [style=solid label="VVARIABLE"]
  202 -> 62 [style=solid label="MVARIABLE"]
  202 -> 26 [style=solid label="MOVE"]
  202 -> 29 [style=solid label="ROBEX"]
  202 -> 30 [style=solid label="WALL"]
  202 -> 242 [style=solid label="DFLT"]
  202 -> 31 [style=solid label="'-'"]
  202 -> 32 [style=solid label="'!'"]
  202 -> 64 [style=solid label="'('"]
  202 -> 35 [style=solid label="'{'"]
  202 -> 39 [style=dashed label="robotmove"]
  202 -> 42 [style=dashed label="robotwall"]
  202 -> 43 [style=dashed label="robotexit"]
  202 -> 243 [style=dashed label="matrix"]
  202 -> 244 [style=dashed label="vector"]
  202 -> 245 [style=dashed label="expr"]
  202 -> 58 [style=dashed label="const"]
  203 [label="State 203\n\l 69 callfunction: error '[' callfunc_args ']' .\l"]
  203 -> "203R69" [style=solid]
 "203R69" [label="R69", fillcolor=3, shape=diamond, style=filled]
  204 [label="State 204\n\l 99 vector: error expr .  [error, NEWLINE, ELEMMULT, LEFTSHIFT, RIGHTSHIFT, ',', '}']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  204 -> 123 [style=solid label="CONJUNCTION"]
  204 -> 124 [style=solid label="'<'"]
  204 -> 125 [style=solid label="'>'"]
  204 -> 126 [style=solid label="'+'"]
  204 -> 127 [style=solid label="'-'"]
  204 -> 128 [style=solid label="'/'"]
  204 -> "204R99" [style=solid]
 "204R99" [label="R99", fillcolor=3, shape=diamond, style=filled]
  205 [label="State 205\n\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 90       | VVARIABLE '(' . vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l"]
  205 -> 140 [style=dotted]
  205 -> 141 [style=solid label="VVARIABLE"]
  205 -> 142 [style=solid label="MVARIABLE"]
  205 -> 91 [style=solid label="'{'"]
  205 -> 195 [style=dashed label="vector"]
  206 [label="State 206\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 91 vector: MVARIABLE '(' . expr ',' '[' ']' ')'\l 92       | MVARIABLE '(' . '[' ']' ',' expr ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  206 -> 75 [style=dotted]
  206 -> 5 [style=solid label="BOOL"]
  206 -> 6 [style=solid label="INTEGER"]
  206 -> 60 [style=solid label="VARIABLE"]
  206 -> 76 [style=solid label="VVARIABLE"]
  206 -> 77 [style=solid label="MVARIABLE"]
  206 -> 26 [style=solid label="MOVE"]
  206 -> 29 [style=solid label="ROBEX"]
  206 -> 30 [style=solid label="WALL"]
  206 -> 31 [style=solid label="'-'"]
  206 -> 32 [style=solid label="'!'"]
  206 -> 64 [style=solid label="'('"]
  206 -> 225 [style=solid label="'['"]
  206 -> 39 [style=dashed label="robotmove"]
  206 -> 42 [style=dashed label="robotwall"]
  206 -> 43 [style=dashed label="robotexit"]
  206 -> 246 [style=dashed label="expr"]
  206 -> 58 [style=dashed label="const"]
  207 [label="State 207\n\l 90 vector: VVARIABLE '(' vector ',' . '[' ']' ')'\l104 vmdeclaration: VVARIABLE '(' vector ',' . '[' ']' ')' ASSIGN vector\l"]
  207 -> 247 [style=solid label="'['"]
  208 [label="State 208\n\l103 vmdeclaration: VVARIABLE '(' expr ')' . ASSIGN expr\l134 expr: VVARIABLE '(' expr ')' .  [NEWLINE, CONJUNCTION, '<', '>', '+', '-', '/', ')']\l"]
  208 -> 248 [style=solid label="ASSIGN"]
  208 -> "208R134" [style=solid]
 "208R134" [label="R134", fillcolor=3, shape=diamond, style=filled]
  209 [label="State 209\n\l 85 matrix: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 99 vector: error expr .  [ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  209 -> 123 [style=solid label="CONJUNCTION"]
  209 -> 124 [style=solid label="'<'"]
  209 -> 125 [style=solid label="'>'"]
  209 -> 126 [style=solid label="'+'"]
  209 -> 127 [style=solid label="'-'"]
  209 -> 128 [style=solid label="'/'"]
  209 -> "209R85" [style=solid]
 "209R85" [label="R85", fillcolor=3, shape=diamond, style=filled]
  209 -> "209R99d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "209R99d" [label="R99", fillcolor=5, shape=diamond, style=filled]
  210 [label="State 210\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 71       | MVARIABLE '(' . vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 72       | MVARIABLE '(' . '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 73       | MVARIABLE '(' . matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 91       | MVARIABLE '(' . expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 92       | MVARIABLE '(' . '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  210 -> 59 [style=dotted]
  210 -> 5 [style=solid label="BOOL"]
  210 -> 6 [style=solid label="INTEGER"]
  210 -> 60 [style=solid label="VARIABLE"]
  210 -> 61 [style=solid label="VVARIABLE"]
  210 -> 62 [style=solid label="MVARIABLE"]
  210 -> 26 [style=solid label="MOVE"]
  210 -> 29 [style=solid label="ROBEX"]
  210 -> 30 [style=solid label="WALL"]
  210 -> 31 [style=solid label="'-'"]
  210 -> 32 [style=solid label="'!'"]
  210 -> 64 [style=solid label="'('"]
  210 -> 197 [style=solid label="'['"]
  210 -> 35 [style=solid label="'{'"]
  210 -> 39 [style=dashed label="robotmove"]
  210 -> 42 [style=dashed label="robotwall"]
  210 -> 43 [style=dashed label="robotexit"]
  210 -> 198 [style=dashed label="matrix"]
  210 -> 199 [style=dashed label="vector"]
  210 -> 246 [style=dashed label="expr"]
  210 -> 58 [style=dashed label="const"]
  211 [label="State 211\n\l 72 matrix: MVARIABLE '(' '[' ']' . ',' vector ')'\l 92 vector: MVARIABLE '(' '[' ']' . ',' expr ')'\l107 vmdeclaration: MVARIABLE '(' '[' ']' . ',' expr ')' ASSIGN vector\l109              | MVARIABLE '(' '[' ']' . ',' vector ')' ASSIGN matrix\l"]
  211 -> 249 [style=solid label="','"]
  212 [label="State 212\n\l 73 matrix: MVARIABLE '(' matrix ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l110 vmdeclaration: MVARIABLE '(' matrix ')' . ASSIGN matrix\l"]
  212 -> 250 [style=solid label="ASSIGN"]
  212 -> "212R73" [style=solid]
 "212R73" [label="R73", fillcolor=3, shape=diamond, style=filled]
  213 [label="State 213\n\l 71 matrix: MVARIABLE '(' vector ',' . '[' ']' ')'\l108 vmdeclaration: MVARIABLE '(' vector ',' . '[' ']' ')' ASSIGN matrix\l"]
  213 -> 251 [style=solid label="'['"]
  214 [label="State 214\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 91 vector: MVARIABLE '(' expr ',' . '[' ']' ')'\l105 vmdeclaration: MVARIABLE '(' expr ',' . expr ')' ASSIGN expr\l106              | MVARIABLE '(' expr ',' . '[' ']' ')' ASSIGN vector\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l135     | MVARIABLE '(' expr ',' . expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  214 -> 75 [style=dotted]
  214 -> 5 [style=solid label="BOOL"]
  214 -> 6 [style=solid label="INTEGER"]
  214 -> 60 [style=solid label="VARIABLE"]
  214 -> 76 [style=solid label="VVARIABLE"]
  214 -> 77 [style=solid label="MVARIABLE"]
  214 -> 26 [style=solid label="MOVE"]
  214 -> 29 [style=solid label="ROBEX"]
  214 -> 30 [style=solid label="WALL"]
  214 -> 31 [style=solid label="'-'"]
  214 -> 32 [style=solid label="'!'"]
  214 -> 64 [style=solid label="'('"]
  214 -> 252 [style=solid label="'['"]
  214 -> 39 [style=dashed label="robotmove"]
  214 -> 42 [style=dashed label="robotwall"]
  214 -> 43 [style=dashed label="robotexit"]
  214 -> 253 [style=dashed label="expr"]
  214 -> 58 [style=dashed label="const"]
  215 [label="State 215\n\l118 print: PRINT '(' VVARIABLE ')' .\l"]
  215 -> "215R118" [style=solid]
 "215R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
  216 [label="State 216\n\l119 print: PRINT '(' MVARIABLE ')' .\l"]
  216 -> "216R119" [style=solid]
 "216R119" [label="R119", fillcolor=3, shape=diamond, style=filled]
  217 [label="State 217\n\l117 print: PRINT '(' expr ')' .\l"]
  217 -> "217R117" [style=solid]
 "217R117" [label="R117", fillcolor=3, shape=diamond, style=filled]
  218 [label="State 218\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l135     | MVARIABLE '(' expr . ',' expr ')'\l"]
  218 -> 123 [style=solid label="CONJUNCTION"]
  218 -> 254 [style=solid label="','"]
  218 -> 124 [style=solid label="'<'"]
  218 -> 125 [style=solid label="'>'"]
  218 -> 126 [style=solid label="'+'"]
  218 -> 127 [style=solid label="'-'"]
  218 -> 128 [style=solid label="'/'"]
  219 [label="State 219\n\l 32 begif: B .\l"]
  219 -> "219R32" [style=solid]
 "219R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  220 [label="State 220\n\l 33 begif: BEGIF .\l"]
  220 -> "220R33" [style=solid]
 "220R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  221 [label="State 221\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 31    | IF expr NEWLINE begif . stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 41 return_func: . type VAR\l 42            | . return_func ',' type VAR\l 43            | . return_func error\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 68 callfunction: . return_func DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  221 -> 84 [style=dotted]
  221 -> 5 [style=solid label="BOOL"]
  221 -> 6 [style=solid label="INTEGER"]
  221 -> 7 [style=solid label="VARIABLE"]
  221 -> 8 [style=solid label="VVARIABLE"]
  221 -> 9 [style=solid label="MVARIABLE"]
  221 -> 10 [style=solid label="CINT"]
  221 -> 11 [style=solid label="VINT"]
  221 -> 12 [style=solid label="MINT"]
  221 -> 13 [style=solid label="INT"]
  221 -> 14 [style=solid label="CVINT"]
  221 -> 15 [style=solid label="CMINT"]
  221 -> 16 [style=solid label="BOOLEAN"]
  221 -> 17 [style=solid label="CBOOLEAN"]
  221 -> 18 [style=solid label="VBOOLEAN"]
  221 -> 19 [style=solid label="MBOOLEAN"]
  221 -> 20 [style=solid label="CVBOOLEAN"]
  221 -> 21 [style=solid label="CMBOOLEAN"]
  221 -> 22 [style=solid label="NEWLINE"]
  221 -> 23 [style=solid label="PRINT"]
  221 -> 24 [style=solid label="IF"]
  221 -> 25 [style=solid label="FORR"]
  221 -> 26 [style=solid label="MOVE"]
  221 -> 27 [style=solid label="RIGHT"]
  221 -> 28 [style=solid label="LEFT"]
  221 -> 29 [style=solid label="ROBEX"]
  221 -> 30 [style=solid label="WALL"]
  221 -> 31 [style=solid label="'-'"]
  221 -> 32 [style=solid label="'!'"]
  221 -> 33 [style=solid label="'('"]
  221 -> 34 [style=solid label="'['"]
  221 -> 35 [style=solid label="'{'"]
  221 -> 255 [style=dashed label="stmts"]
  221 -> 37 [style=dashed label="stmt"]
  221 -> 38 [style=dashed label="robotactions"]
  221 -> 39 [style=dashed label="robotmove"]
  221 -> 40 [style=dashed label="robotright"]
  221 -> 41 [style=dashed label="robotleft"]
  221 -> 42 [style=dashed label="robotwall"]
  221 -> 43 [style=dashed label="robotexit"]
  221 -> 44 [style=dashed label="iff"]
  221 -> 45 [style=dashed label="forr"]
  221 -> 46 [style=dashed label="return_func"]
  221 -> 47 [style=dashed label="function_head"]
  221 -> 48 [style=dashed label="function"]
  221 -> 49 [style=dashed label="callfunction"]
  221 -> 50 [style=dashed label="matrix"]
  221 -> 51 [style=dashed label="vector"]
  221 -> 52 [style=dashed label="vmdeclaration"]
  221 -> 53 [style=dashed label="declaration"]
  221 -> 54 [style=dashed label="assignment"]
  221 -> 55 [style=dashed label="print"]
  221 -> 56 [style=dashed label="expr"]
  221 -> 57 [style=dashed label="type"]
  221 -> 58 [style=dashed label="const"]
  222 [label="State 222\n\l 40 forr: FORR declaration DOUBLEDOT expr . NEWLINE begfor stmts endfor\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  222 -> 256 [style=solid label="NEWLINE"]
  222 -> 123 [style=solid label="CONJUNCTION"]
  222 -> 124 [style=solid label="'<'"]
  222 -> 125 [style=solid label="'>'"]
  222 -> 126 [style=solid label="'+'"]
  222 -> 127 [style=solid label="'-'"]
  222 -> 128 [style=solid label="'/'"]
  223 [label="State 223\n\l 26 robotmove: MOVE '(' expr ')' .\l"]
  223 -> "223R26" [style=solid]
 "223R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  224 [label="State 224\n\l 55 function_head: '[' return_func ']' DECLARE . FUNC VAR '(' args_func ')'\l"]
  224 -> 257 [style=solid label="FUNC"]
  225 [label="State 225\n\l 92 vector: MVARIABLE '(' '[' . ']' ',' expr ')'\l"]
  225 -> 258 [style=solid label="']'"]
  226 [label="State 226\n\l 87 listexprs: listexprs ',' vector .  [error, ',', '}']\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  226 -> 114 [style=solid label="ELEMMULT"]
  226 -> 116 [style=solid label="LEFTSHIFT"]
  226 -> 117 [style=solid label="RIGHTSHIFT"]
  226 -> "226R87" [style=solid]
 "226R87" [label="R87", fillcolor=3, shape=diamond, style=filled]
  227 [label="State 227\n\l 86 listexprs: vector ',' vector .  [error, ',', '}']\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  227 -> 114 [style=solid label="ELEMMULT"]
  227 -> 116 [style=solid label="LEFTSHIFT"]
  227 -> 117 [style=solid label="RIGHTSHIFT"]
  227 -> "227R86" [style=solid]
 "227R86" [label="R86", fillcolor=3, shape=diamond, style=filled]
  228 [label="State 228\n\l101 exprs: exprs ',' expr .  [error, ',', '}']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  228 -> 123 [style=solid label="CONJUNCTION"]
  228 -> 124 [style=solid label="'<'"]
  228 -> 125 [style=solid label="'>'"]
  228 -> 126 [style=solid label="'+'"]
  228 -> 127 [style=solid label="'-'"]
  228 -> 128 [style=solid label="'/'"]
  228 -> "228R101" [style=solid]
 "228R101" [label="R101", fillcolor=3, shape=diamond, style=filled]
  229 [label="State 229\n\l100 exprs: expr ',' expr .  [error, ',', '}']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  229 -> 123 [style=solid label="CONJUNCTION"]
  229 -> 124 [style=solid label="'<'"]
  229 -> 125 [style=solid label="'>'"]
  229 -> 126 [style=solid label="'+'"]
  229 -> 127 [style=solid label="'-'"]
  229 -> 128 [style=solid label="'/'"]
  229 -> "229R100" [style=solid]
 "229R100" [label="R100", fillcolor=3, shape=diamond, style=filled]
  230 [label="State 230\n\l 42 return_func: return_func ',' type VAR .\l"]
  230 -> "230R42" [style=solid]
 "230R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
  231 [label="State 231\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 58 callfunc_args: . expr\l 59              | . vector\l 60              | . matrix\l 61              | . DFLT\l 62              | . callfunc_args ',' expr\l 63              | . callfunc_args ',' vector\l 64              | . callfunc_args ',' matrix\l 65              | . callfunc_args ',' DFLT\l 66              | . callfunc_args error\l 67              | . error\l 68 callfunction: return_func DECLARE FVARIABLE '[' . callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  231 -> 133 [style=dotted]
  231 -> 5 [style=solid label="BOOL"]
  231 -> 6 [style=solid label="INTEGER"]
  231 -> 60 [style=solid label="VARIABLE"]
  231 -> 61 [style=solid label="VVARIABLE"]
  231 -> 62 [style=solid label="MVARIABLE"]
  231 -> 26 [style=solid label="MOVE"]
  231 -> 29 [style=solid label="ROBEX"]
  231 -> 30 [style=solid label="WALL"]
  231 -> 134 [style=solid label="DFLT"]
  231 -> 31 [style=solid label="'-'"]
  231 -> 32 [style=solid label="'!'"]
  231 -> 64 [style=solid label="'('"]
  231 -> 35 [style=solid label="'{'"]
  231 -> 39 [style=dashed label="robotmove"]
  231 -> 42 [style=dashed label="robotwall"]
  231 -> 43 [style=dashed label="robotexit"]
  231 -> 259 [style=dashed label="callfunc_args"]
  231 -> 136 [style=dashed label="matrix"]
  231 -> 137 [style=dashed label="vector"]
  231 -> 138 [style=dashed label="expr"]
  231 -> 58 [style=dashed label="const"]
  232 [label="State 232\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 41 return_func: . type VAR\l 42            | . return_func ',' type VAR\l 43            | . return_func error\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 57         | function_head B NEWLINE stmts . E\l 68 callfunction: . return_func DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  232 -> 96 [style=dotted]
  232 -> 5 [style=solid label="BOOL"]
  232 -> 6 [style=solid label="INTEGER"]
  232 -> 7 [style=solid label="VARIABLE"]
  232 -> 8 [style=solid label="VVARIABLE"]
  232 -> 9 [style=solid label="MVARIABLE"]
  232 -> 10 [style=solid label="CINT"]
  232 -> 11 [style=solid label="VINT"]
  232 -> 12 [style=solid label="MINT"]
  232 -> 13 [style=solid label="INT"]
  232 -> 14 [style=solid label="CVINT"]
  232 -> 15 [style=solid label="CMINT"]
  232 -> 16 [style=solid label="BOOLEAN"]
  232 -> 17 [style=solid label="CBOOLEAN"]
  232 -> 18 [style=solid label="VBOOLEAN"]
  232 -> 19 [style=solid label="MBOOLEAN"]
  232 -> 20 [style=solid label="CVBOOLEAN"]
  232 -> 21 [style=solid label="CMBOOLEAN"]
  232 -> 22 [style=solid label="NEWLINE"]
  232 -> 23 [style=solid label="PRINT"]
  232 -> 24 [style=solid label="IF"]
  232 -> 25 [style=solid label="FORR"]
  232 -> 260 [style=solid label="E"]
  232 -> 26 [style=solid label="MOVE"]
  232 -> 27 [style=solid label="RIGHT"]
  232 -> 28 [style=solid label="LEFT"]
  232 -> 29 [style=solid label="ROBEX"]
  232 -> 30 [style=solid label="WALL"]
  232 -> 31 [style=solid label="'-'"]
  232 -> 32 [style=solid label="'!'"]
  232 -> 33 [style=solid label="'('"]
  232 -> 34 [style=solid label="'['"]
  232 -> 35 [style=solid label="'{'"]
  232 -> 97 [style=dashed label="stmt"]
  232 -> 38 [style=dashed label="robotactions"]
  232 -> 39 [style=dashed label="robotmove"]
  232 -> 40 [style=dashed label="robotright"]
  232 -> 41 [style=dashed label="robotleft"]
  232 -> 42 [style=dashed label="robotwall"]
  232 -> 43 [style=dashed label="robotexit"]
  232 -> 44 [style=dashed label="iff"]
  232 -> 45 [style=dashed label="forr"]
  232 -> 46 [style=dashed label="return_func"]
  232 -> 47 [style=dashed label="function_head"]
  232 -> 48 [style=dashed label="function"]
  232 -> 49 [style=dashed label="callfunction"]
  232 -> 50 [style=dashed label="matrix"]
  232 -> 51 [style=dashed label="vector"]
  232 -> 52 [style=dashed label="vmdeclaration"]
  232 -> 53 [style=dashed label="declaration"]
  232 -> 54 [style=dashed label="assignment"]
  232 -> 55 [style=dashed label="print"]
  232 -> 56 [style=dashed label="expr"]
  232 -> 57 [style=dashed label="type"]
  232 -> 58 [style=dashed label="const"]
  233 [label="State 233\n\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l113 declaration: type VAR DECLARE matrix .  [NEWLINE, DOUBLEDOT]\l"]
  233 -> 108 [style=solid label="ELEMMULT"]
  233 -> 109 [style=solid label="'\\''"]
  233 -> 110 [style=solid label="LEFTSHIFT"]
  233 -> 111 [style=solid label="RIGHTSHIFT"]
  233 -> 112 [style=solid label="'*'"]
  233 -> "233R113" [style=solid]
 "233R113" [label="R113", fillcolor=3, shape=diamond, style=filled]
  234 [label="State 234\n\l 80 matrix: vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l112 declaration: type VAR DECLARE vector .  [NEWLINE, DOUBLEDOT]\l"]
  234 -> 114 [style=solid label="ELEMMULT"]
  234 -> 115 [style=solid label="'\\''"]
  234 -> 116 [style=solid label="LEFTSHIFT"]
  234 -> 117 [style=solid label="RIGHTSHIFT"]
  234 -> "234R112" [style=solid]
 "234R112" [label="R112", fillcolor=3, shape=diamond, style=filled]
  235 [label="State 235\n\l111 declaration: type VAR DECLARE expr .  [NEWLINE, DOUBLEDOT]\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  235 -> 123 [style=solid label="CONJUNCTION"]
  235 -> 124 [style=solid label="'<'"]
  235 -> 125 [style=solid label="'>'"]
  235 -> 126 [style=solid label="'+'"]
  235 -> 127 [style=solid label="'-'"]
  235 -> 128 [style=solid label="'/'"]
  235 -> "235R111" [style=solid]
 "235R111" [label="R111", fillcolor=3, shape=diamond, style=filled]
  236 [label="State 236\n\l 90 vector: VVARIABLE '(' vector ',' . '[' ']' ')'\l"]
  236 -> 261 [style=solid label="'['"]
  237 [label="State 237\n\l134 expr: VVARIABLE '(' expr ')' .\l"]
  237 -> "237R134" [style=solid]
 "237R134" [label="R134", fillcolor=3, shape=diamond, style=filled]
  238 [label="State 238\n\l 72 matrix: MVARIABLE '(' '[' ']' . ',' vector ')'\l 92 vector: MVARIABLE '(' '[' ']' . ',' expr ')'\l"]
  238 -> 262 [style=solid label="','"]
  239 [label="State 239\n\l 73 matrix: MVARIABLE '(' matrix ')' .\l"]
  239 -> "239R73" [style=solid]
 "239R73" [label="R73", fillcolor=3, shape=diamond, style=filled]
  240 [label="State 240\n\l 71 matrix: MVARIABLE '(' vector ',' . '[' ']' ')'\l"]
  240 -> 263 [style=solid label="'['"]
  241 [label="State 241\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 91 vector: MVARIABLE '(' expr ',' . '[' ']' ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l135     | MVARIABLE '(' expr ',' . expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  241 -> 75 [style=dotted]
  241 -> 5 [style=solid label="BOOL"]
  241 -> 6 [style=solid label="INTEGER"]
  241 -> 60 [style=solid label="VARIABLE"]
  241 -> 76 [style=solid label="VVARIABLE"]
  241 -> 77 [style=solid label="MVARIABLE"]
  241 -> 26 [style=solid label="MOVE"]
  241 -> 29 [style=solid label="ROBEX"]
  241 -> 30 [style=solid label="WALL"]
  241 -> 31 [style=solid label="'-'"]
  241 -> 32 [style=solid label="'!'"]
  241 -> 64 [style=solid label="'('"]
  241 -> 264 [style=solid label="'['"]
  241 -> 39 [style=dashed label="robotmove"]
  241 -> 42 [style=dashed label="robotwall"]
  241 -> 43 [style=dashed label="robotexit"]
  241 -> 265 [style=dashed label="expr"]
  241 -> 58 [style=dashed label="const"]
  242 [label="State 242\n\l 65 callfunc_args: callfunc_args ',' DFLT .\l"]
  242 -> "242R65" [style=solid]
 "242R65" [label="R65", fillcolor=3, shape=diamond, style=filled]
  243 [label="State 243\n\l 64 callfunc_args: callfunc_args ',' matrix .  [error, ',', ']']\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l"]
  243 -> 108 [style=solid label="ELEMMULT"]
  243 -> 109 [style=solid label="'\\''"]
  243 -> 110 [style=solid label="LEFTSHIFT"]
  243 -> 111 [style=solid label="RIGHTSHIFT"]
  243 -> 112 [style=solid label="'*'"]
  243 -> "243R64" [style=solid]
 "243R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
  244 [label="State 244\n\l 63 callfunc_args: callfunc_args ',' vector .  [error, ',', ']']\l 80 matrix: vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  244 -> 114 [style=solid label="ELEMMULT"]
  244 -> 115 [style=solid label="'\\''"]
  244 -> 116 [style=solid label="LEFTSHIFT"]
  244 -> 117 [style=solid label="RIGHTSHIFT"]
  244 -> "244R63" [style=solid]
 "244R63" [label="R63", fillcolor=3, shape=diamond, style=filled]
  245 [label="State 245\n\l 62 callfunc_args: callfunc_args ',' expr .  [error, ',', ']']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  245 -> 123 [style=solid label="CONJUNCTION"]
  245 -> 124 [style=solid label="'<'"]
  245 -> 125 [style=solid label="'>'"]
  245 -> 126 [style=solid label="'+'"]
  245 -> 127 [style=solid label="'-'"]
  245 -> 128 [style=solid label="'/'"]
  245 -> "245R62" [style=solid]
 "245R62" [label="R62", fillcolor=3, shape=diamond, style=filled]
  246 [label="State 246\n\l 91 vector: MVARIABLE '(' expr . ',' '[' ']' ')'\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  246 -> 123 [style=solid label="CONJUNCTION"]
  246 -> 266 [style=solid label="','"]
  246 -> 124 [style=solid label="'<'"]
  246 -> 125 [style=solid label="'>'"]
  246 -> 126 [style=solid label="'+'"]
  246 -> 127 [style=solid label="'-'"]
  246 -> 128 [style=solid label="'/'"]
  247 [label="State 247\n\l 90 vector: VVARIABLE '(' vector ',' '[' . ']' ')'\l104 vmdeclaration: VVARIABLE '(' vector ',' '[' . ']' ')' ASSIGN vector\l"]
  247 -> 267 [style=solid label="']'"]
  248 [label="State 248\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l103 vmdeclaration: VVARIABLE '(' expr ')' ASSIGN . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  248 -> 75 [style=dotted]
  248 -> 5 [style=solid label="BOOL"]
  248 -> 6 [style=solid label="INTEGER"]
  248 -> 60 [style=solid label="VARIABLE"]
  248 -> 76 [style=solid label="VVARIABLE"]
  248 -> 77 [style=solid label="MVARIABLE"]
  248 -> 26 [style=solid label="MOVE"]
  248 -> 29 [style=solid label="ROBEX"]
  248 -> 30 [style=solid label="WALL"]
  248 -> 31 [style=solid label="'-'"]
  248 -> 32 [style=solid label="'!'"]
  248 -> 64 [style=solid label="'('"]
  248 -> 39 [style=dashed label="robotmove"]
  248 -> 42 [style=dashed label="robotwall"]
  248 -> 43 [style=dashed label="robotexit"]
  248 -> 268 [style=dashed label="expr"]
  248 -> 58 [style=dashed label="const"]
  249 [label="State 249\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 72 matrix: MVARIABLE '(' '[' ']' ',' . vector ')'\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 92       | MVARIABLE '(' '[' ']' ',' . expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l107 vmdeclaration: MVARIABLE '(' '[' ']' ',' . expr ')' ASSIGN vector\l109              | MVARIABLE '(' '[' ']' ',' . vector ')' ASSIGN matrix\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  249 -> 89 [style=dotted]
  249 -> 5 [style=solid label="BOOL"]
  249 -> 6 [style=solid label="INTEGER"]
  249 -> 60 [style=solid label="VARIABLE"]
  249 -> 61 [style=solid label="VVARIABLE"]
  249 -> 90 [style=solid label="MVARIABLE"]
  249 -> 26 [style=solid label="MOVE"]
  249 -> 29 [style=solid label="ROBEX"]
  249 -> 30 [style=solid label="WALL"]
  249 -> 31 [style=solid label="'-'"]
  249 -> 32 [style=solid label="'!'"]
  249 -> 64 [style=solid label="'('"]
  249 -> 91 [style=solid label="'{'"]
  249 -> 39 [style=dashed label="robotmove"]
  249 -> 42 [style=dashed label="robotwall"]
  249 -> 43 [style=dashed label="robotexit"]
  249 -> 269 [style=dashed label="vector"]
  249 -> 270 [style=dashed label="expr"]
  249 -> 58 [style=dashed label="const"]
  250 [label="State 250\n\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l110 vmdeclaration: MVARIABLE '(' matrix ')' ASSIGN . matrix\l"]
  250 -> 146 [style=dotted]
  250 -> 141 [style=solid label="VVARIABLE"]
  250 -> 147 [style=solid label="MVARIABLE"]
  250 -> 35 [style=solid label="'{'"]
  250 -> 271 [style=dashed label="matrix"]
  250 -> 149 [style=dashed label="vector"]
  251 [label="State 251\n\l 71 matrix: MVARIABLE '(' vector ',' '[' . ']' ')'\l108 vmdeclaration: MVARIABLE '(' vector ',' '[' . ']' ')' ASSIGN matrix\l"]
  251 -> 272 [style=solid label="']'"]
  252 [label="State 252\n\l 91 vector: MVARIABLE '(' expr ',' '[' . ']' ')'\l106 vmdeclaration: MVARIABLE '(' expr ',' '[' . ']' ')' ASSIGN vector\l"]
  252 -> 273 [style=solid label="']'"]
  253 [label="State 253\n\l105 vmdeclaration: MVARIABLE '(' expr ',' expr . ')' ASSIGN expr\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l135     | MVARIABLE '(' expr ',' expr . ')'\l"]
  253 -> 123 [style=solid label="CONJUNCTION"]
  253 -> 124 [style=solid label="'<'"]
  253 -> 125 [style=solid label="'>'"]
  253 -> 126 [style=solid label="'+'"]
  253 -> 127 [style=solid label="'-'"]
  253 -> 128 [style=solid label="'/'"]
  253 -> 274 [style=solid label="')'"]
  254 [label="State 254\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l135     | MVARIABLE '(' expr ',' . expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  254 -> 75 [style=dotted]
  254 -> 5 [style=solid label="BOOL"]
  254 -> 6 [style=solid label="INTEGER"]
  254 -> 60 [style=solid label="VARIABLE"]
  254 -> 76 [style=solid label="VVARIABLE"]
  254 -> 77 [style=solid label="MVARIABLE"]
  254 -> 26 [style=solid label="MOVE"]
  254 -> 29 [style=solid label="ROBEX"]
  254 -> 30 [style=solid label="WALL"]
  254 -> 31 [style=solid label="'-'"]
  254 -> 32 [style=solid label="'!'"]
  254 -> 64 [style=solid label="'('"]
  254 -> 39 [style=dashed label="robotmove"]
  254 -> 42 [style=dashed label="robotwall"]
  254 -> 43 [style=dashed label="robotexit"]
  254 -> 265 [style=dashed label="expr"]
  254 -> 58 [style=dashed label="const"]
  255 [label="State 255\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 31    | IF expr NEWLINE begif stmts . endif\l 34 endif: . E\l 35      | . ENDIF\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 41 return_func: . type VAR\l 42            | . return_func ',' type VAR\l 43            | . return_func error\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 68 callfunction: . return_func DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  255 -> 96 [style=dotted]
  255 -> 5 [style=solid label="BOOL"]
  255 -> 6 [style=solid label="INTEGER"]
  255 -> 7 [style=solid label="VARIABLE"]
  255 -> 8 [style=solid label="VVARIABLE"]
  255 -> 9 [style=solid label="MVARIABLE"]
  255 -> 10 [style=solid label="CINT"]
  255 -> 11 [style=solid label="VINT"]
  255 -> 12 [style=solid label="MINT"]
  255 -> 13 [style=solid label="INT"]
  255 -> 14 [style=solid label="CVINT"]
  255 -> 15 [style=solid label="CMINT"]
  255 -> 16 [style=solid label="BOOLEAN"]
  255 -> 17 [style=solid label="CBOOLEAN"]
  255 -> 18 [style=solid label="VBOOLEAN"]
  255 -> 19 [style=solid label="MBOOLEAN"]
  255 -> 20 [style=solid label="CVBOOLEAN"]
  255 -> 21 [style=solid label="CMBOOLEAN"]
  255 -> 22 [style=solid label="NEWLINE"]
  255 -> 23 [style=solid label="PRINT"]
  255 -> 24 [style=solid label="IF"]
  255 -> 25 [style=solid label="FORR"]
  255 -> 275 [style=solid label="E"]
  255 -> 26 [style=solid label="MOVE"]
  255 -> 27 [style=solid label="RIGHT"]
  255 -> 28 [style=solid label="LEFT"]
  255 -> 29 [style=solid label="ROBEX"]
  255 -> 30 [style=solid label="WALL"]
  255 -> 276 [style=solid label="ENDIF"]
  255 -> 31 [style=solid label="'-'"]
  255 -> 32 [style=solid label="'!'"]
  255 -> 33 [style=solid label="'('"]
  255 -> 34 [style=solid label="'['"]
  255 -> 35 [style=solid label="'{'"]
  255 -> 97 [style=dashed label="stmt"]
  255 -> 38 [style=dashed label="robotactions"]
  255 -> 39 [style=dashed label="robotmove"]
  255 -> 40 [style=dashed label="robotright"]
  255 -> 41 [style=dashed label="robotleft"]
  255 -> 42 [style=dashed label="robotwall"]
  255 -> 43 [style=dashed label="robotexit"]
  255 -> 44 [style=dashed label="iff"]
  255 -> 277 [style=dashed label="endif"]
  255 -> 45 [style=dashed label="forr"]
  255 -> 46 [style=dashed label="return_func"]
  255 -> 47 [style=dashed label="function_head"]
  255 -> 48 [style=dashed label="function"]
  255 -> 49 [style=dashed label="callfunction"]
  255 -> 50 [style=dashed label="matrix"]
  255 -> 51 [style=dashed label="vector"]
  255 -> 52 [style=dashed label="vmdeclaration"]
  255 -> 53 [style=dashed label="declaration"]
  255 -> 54 [style=dashed label="assignment"]
  255 -> 55 [style=dashed label="print"]
  255 -> 56 [style=dashed label="expr"]
  255 -> 57 [style=dashed label="type"]
  255 -> 58 [style=dashed label="const"]
  256 [label="State 256\n\l 36 begfor: . B\l 37       | . BEGFOR\l 40 forr: FORR declaration DOUBLEDOT expr NEWLINE . begfor stmts endfor\l"]
  256 -> 278 [style=solid label="B"]
  256 -> 279 [style=solid label="BEGFOR"]
  256 -> 280 [style=dashed label="begfor"]
  257 [label="State 257\n\l 55 function_head: '[' return_func ']' DECLARE FUNC . VAR '(' args_func ')'\l"]
  257 -> 281 [style=solid label="VAR"]
  258 [label="State 258\n\l 92 vector: MVARIABLE '(' '[' ']' . ',' expr ')'\l"]
  258 -> 282 [style=solid label="','"]
  259 [label="State 259\n\l 62 callfunc_args: callfunc_args . ',' expr\l 63              | callfunc_args . ',' vector\l 64              | callfunc_args . ',' matrix\l 65              | callfunc_args . ',' DFLT\l 66              | callfunc_args . error\l 68 callfunction: return_func DECLARE FVARIABLE '[' callfunc_args . ']'\l"]
  259 -> 201 [style=dotted]
  259 -> 202 [style=solid label="','"]
  259 -> 283 [style=solid label="']'"]
  260 [label="State 260\n\l 57 function: function_head B NEWLINE stmts E .\l"]
  260 -> "260R57" [style=solid]
 "260R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
  261 [label="State 261\n\l 90 vector: VVARIABLE '(' vector ',' '[' . ']' ')'\l"]
  261 -> 284 [style=solid label="']'"]
  262 [label="State 262\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 72 matrix: MVARIABLE '(' '[' ']' ',' . vector ')'\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 92       | MVARIABLE '(' '[' ']' ',' . expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  262 -> 89 [style=dotted]
  262 -> 5 [style=solid label="BOOL"]
  262 -> 6 [style=solid label="INTEGER"]
  262 -> 60 [style=solid label="VARIABLE"]
  262 -> 61 [style=solid label="VVARIABLE"]
  262 -> 90 [style=solid label="MVARIABLE"]
  262 -> 26 [style=solid label="MOVE"]
  262 -> 29 [style=solid label="ROBEX"]
  262 -> 30 [style=solid label="WALL"]
  262 -> 31 [style=solid label="'-'"]
  262 -> 32 [style=solid label="'!'"]
  262 -> 64 [style=solid label="'('"]
  262 -> 91 [style=solid label="'{'"]
  262 -> 39 [style=dashed label="robotmove"]
  262 -> 42 [style=dashed label="robotwall"]
  262 -> 43 [style=dashed label="robotexit"]
  262 -> 285 [style=dashed label="vector"]
  262 -> 286 [style=dashed label="expr"]
  262 -> 58 [style=dashed label="const"]
  263 [label="State 263\n\l 71 matrix: MVARIABLE '(' vector ',' '[' . ']' ')'\l"]
  263 -> 287 [style=solid label="']'"]
  264 [label="State 264\n\l 91 vector: MVARIABLE '(' expr ',' '[' . ']' ')'\l"]
  264 -> 288 [style=solid label="']'"]
  265 [label="State 265\n\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l135     | MVARIABLE '(' expr ',' expr . ')'\l"]
  265 -> 123 [style=solid label="CONJUNCTION"]
  265 -> 124 [style=solid label="'<'"]
  265 -> 125 [style=solid label="'>'"]
  265 -> 126 [style=solid label="'+'"]
  265 -> 127 [style=solid label="'-'"]
  265 -> 128 [style=solid label="'/'"]
  265 -> 289 [style=solid label="')'"]
  266 [label="State 266\n\l 91 vector: MVARIABLE '(' expr ',' . '[' ']' ')'\l"]
  266 -> 264 [style=solid label="'['"]
  267 [label="State 267\n\l 90 vector: VVARIABLE '(' vector ',' '[' ']' . ')'\l104 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' . ')' ASSIGN vector\l"]
  267 -> 290 [style=solid label="')'"]
  268 [label="State 268\n\l103 vmdeclaration: VVARIABLE '(' expr ')' ASSIGN expr .  [NEWLINE]\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  268 -> 123 [style=solid label="CONJUNCTION"]
  268 -> 124 [style=solid label="'<'"]
  268 -> 125 [style=solid label="'>'"]
  268 -> 126 [style=solid label="'+'"]
  268 -> 127 [style=solid label="'-'"]
  268 -> 128 [style=solid label="'/'"]
  268 -> "268R103" [style=solid]
 "268R103" [label="R103", fillcolor=3, shape=diamond, style=filled]
  269 [label="State 269\n\l 72 matrix: MVARIABLE '(' '[' ']' ',' vector . ')'\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l109 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector . ')' ASSIGN matrix\l"]
  269 -> 114 [style=solid label="ELEMMULT"]
  269 -> 116 [style=solid label="LEFTSHIFT"]
  269 -> 117 [style=solid label="RIGHTSHIFT"]
  269 -> 291 [style=solid label="')'"]
  270 [label="State 270\n\l 92 vector: MVARIABLE '(' '[' ']' ',' expr . ')'\l107 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr . ')' ASSIGN vector\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  270 -> 123 [style=solid label="CONJUNCTION"]
  270 -> 124 [style=solid label="'<'"]
  270 -> 125 [style=solid label="'>'"]
  270 -> 126 [style=solid label="'+'"]
  270 -> 127 [style=solid label="'-'"]
  270 -> 128 [style=solid label="'/'"]
  270 -> 292 [style=solid label="')'"]
  271 [label="State 271\n\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l110 vmdeclaration: MVARIABLE '(' matrix ')' ASSIGN matrix .  [NEWLINE]\l"]
  271 -> 108 [style=solid label="ELEMMULT"]
  271 -> 109 [style=solid label="'\\''"]
  271 -> 110 [style=solid label="LEFTSHIFT"]
  271 -> 111 [style=solid label="RIGHTSHIFT"]
  271 -> 112 [style=solid label="'*'"]
  271 -> "271R110" [style=solid]
 "271R110" [label="R110", fillcolor=3, shape=diamond, style=filled]
  272 [label="State 272\n\l 71 matrix: MVARIABLE '(' vector ',' '[' ']' . ')'\l108 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' . ')' ASSIGN matrix\l"]
  272 -> 293 [style=solid label="')'"]
  273 [label="State 273\n\l 91 vector: MVARIABLE '(' expr ',' '[' ']' . ')'\l106 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' . ')' ASSIGN vector\l"]
  273 -> 294 [style=solid label="')'"]
  274 [label="State 274\n\l105 vmdeclaration: MVARIABLE '(' expr ',' expr ')' . ASSIGN expr\l135 expr: MVARIABLE '(' expr ',' expr ')' .  [NEWLINE, CONJUNCTION, '<', '>', '+', '-', '/', ')']\l"]
  274 -> 295 [style=solid label="ASSIGN"]
  274 -> "274R135" [style=solid]
 "274R135" [label="R135", fillcolor=3, shape=diamond, style=filled]
  275 [label="State 275\n\l 34 endif: E .\l"]
  275 -> "275R34" [style=solid]
 "275R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  276 [label="State 276\n\l 35 endif: ENDIF .\l"]
  276 -> "276R35" [style=solid]
 "276R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  277 [label="State 277\n\l 31 iff: IF expr NEWLINE begif stmts endif .\l"]
  277 -> "277R31" [style=solid]
 "277R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  278 [label="State 278\n\l 36 begfor: B .\l"]
  278 -> "278R36" [style=solid]
 "278R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  279 [label="State 279\n\l 37 begfor: BEGFOR .\l"]
  279 -> "279R37" [style=solid]
 "279R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  280 [label="State 280\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 40     | FORR declaration DOUBLEDOT expr NEWLINE begfor . stmts endfor\l 41 return_func: . type VAR\l 42            | . return_func ',' type VAR\l 43            | . return_func error\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 68 callfunction: . return_func DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  280 -> 84 [style=dotted]
  280 -> 5 [style=solid label="BOOL"]
  280 -> 6 [style=solid label="INTEGER"]
  280 -> 7 [style=solid label="VARIABLE"]
  280 -> 8 [style=solid label="VVARIABLE"]
  280 -> 9 [style=solid label="MVARIABLE"]
  280 -> 10 [style=solid label="CINT"]
  280 -> 11 [style=solid label="VINT"]
  280 -> 12 [style=solid label="MINT"]
  280 -> 13 [style=solid label="INT"]
  280 -> 14 [style=solid label="CVINT"]
  280 -> 15 [style=solid label="CMINT"]
  280 -> 16 [style=solid label="BOOLEAN"]
  280 -> 17 [style=solid label="CBOOLEAN"]
  280 -> 18 [style=solid label="VBOOLEAN"]
  280 -> 19 [style=solid label="MBOOLEAN"]
  280 -> 20 [style=solid label="CVBOOLEAN"]
  280 -> 21 [style=solid label="CMBOOLEAN"]
  280 -> 22 [style=solid label="NEWLINE"]
  280 -> 23 [style=solid label="PRINT"]
  280 -> 24 [style=solid label="IF"]
  280 -> 25 [style=solid label="FORR"]
  280 -> 26 [style=solid label="MOVE"]
  280 -> 27 [style=solid label="RIGHT"]
  280 -> 28 [style=solid label="LEFT"]
  280 -> 29 [style=solid label="ROBEX"]
  280 -> 30 [style=solid label="WALL"]
  280 -> 31 [style=solid label="'-'"]
  280 -> 32 [style=solid label="'!'"]
  280 -> 33 [style=solid label="'('"]
  280 -> 34 [style=solid label="'['"]
  280 -> 35 [style=solid label="'{'"]
  280 -> 296 [style=dashed label="stmts"]
  280 -> 37 [style=dashed label="stmt"]
  280 -> 38 [style=dashed label="robotactions"]
  280 -> 39 [style=dashed label="robotmove"]
  280 -> 40 [style=dashed label="robotright"]
  280 -> 41 [style=dashed label="robotleft"]
  280 -> 42 [style=dashed label="robotwall"]
  280 -> 43 [style=dashed label="robotexit"]
  280 -> 44 [style=dashed label="iff"]
  280 -> 45 [style=dashed label="forr"]
  280 -> 46 [style=dashed label="return_func"]
  280 -> 47 [style=dashed label="function_head"]
  280 -> 48 [style=dashed label="function"]
  280 -> 49 [style=dashed label="callfunction"]
  280 -> 50 [style=dashed label="matrix"]
  280 -> 51 [style=dashed label="vector"]
  280 -> 52 [style=dashed label="vmdeclaration"]
  280 -> 53 [style=dashed label="declaration"]
  280 -> 54 [style=dashed label="assignment"]
  280 -> 55 [style=dashed label="print"]
  280 -> 56 [style=dashed label="expr"]
  280 -> 57 [style=dashed label="type"]
  280 -> 58 [style=dashed label="const"]
  281 [label="State 281\n\l 55 function_head: '[' return_func ']' DECLARE FUNC VAR . '(' args_func ')'\l"]
  281 -> 297 [style=solid label="'('"]
  282 [label="State 282\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 92 vector: MVARIABLE '(' '[' ']' ',' . expr ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  282 -> 75 [style=dotted]
  282 -> 5 [style=solid label="BOOL"]
  282 -> 6 [style=solid label="INTEGER"]
  282 -> 60 [style=solid label="VARIABLE"]
  282 -> 76 [style=solid label="VVARIABLE"]
  282 -> 77 [style=solid label="MVARIABLE"]
  282 -> 26 [style=solid label="MOVE"]
  282 -> 29 [style=solid label="ROBEX"]
  282 -> 30 [style=solid label="WALL"]
  282 -> 31 [style=solid label="'-'"]
  282 -> 32 [style=solid label="'!'"]
  282 -> 64 [style=solid label="'('"]
  282 -> 39 [style=dashed label="robotmove"]
  282 -> 42 [style=dashed label="robotwall"]
  282 -> 43 [style=dashed label="robotexit"]
  282 -> 286 [style=dashed label="expr"]
  282 -> 58 [style=dashed label="const"]
  283 [label="State 283\n\l 68 callfunction: return_func DECLARE FVARIABLE '[' callfunc_args ']' .\l"]
  283 -> "283R68" [style=solid]
 "283R68" [label="R68", fillcolor=3, shape=diamond, style=filled]
  284 [label="State 284\n\l 90 vector: VVARIABLE '(' vector ',' '[' ']' . ')'\l"]
  284 -> 298 [style=solid label="')'"]
  285 [label="State 285\n\l 72 matrix: MVARIABLE '(' '[' ']' ',' vector . ')'\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  285 -> 114 [style=solid label="ELEMMULT"]
  285 -> 116 [style=solid label="LEFTSHIFT"]
  285 -> 117 [style=solid label="RIGHTSHIFT"]
  285 -> 299 [style=solid label="')'"]
  286 [label="State 286\n\l 92 vector: MVARIABLE '(' '[' ']' ',' expr . ')'\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  286 -> 123 [style=solid label="CONJUNCTION"]
  286 -> 124 [style=solid label="'<'"]
  286 -> 125 [style=solid label="'>'"]
  286 -> 126 [style=solid label="'+'"]
  286 -> 127 [style=solid label="'-'"]
  286 -> 128 [style=solid label="'/'"]
  286 -> 300 [style=solid label="')'"]
  287 [label="State 287\n\l 71 matrix: MVARIABLE '(' vector ',' '[' ']' . ')'\l"]
  287 -> 301 [style=solid label="')'"]
  288 [label="State 288\n\l 91 vector: MVARIABLE '(' expr ',' '[' ']' . ')'\l"]
  288 -> 302 [style=solid label="')'"]
  289 [label="State 289\n\l135 expr: MVARIABLE '(' expr ',' expr ')' .\l"]
  289 -> "289R135" [style=solid]
 "289R135" [label="R135", fillcolor=3, shape=diamond, style=filled]
  290 [label="State 290\n\l 90 vector: VVARIABLE '(' vector ',' '[' ']' ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l104 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' ')' . ASSIGN vector\l"]
  290 -> 303 [style=solid label="ASSIGN"]
  290 -> "290R90" [style=solid]
 "290R90" [label="R90", fillcolor=3, shape=diamond, style=filled]
  291 [label="State 291\n\l 72 matrix: MVARIABLE '(' '[' ']' ',' vector ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l109 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector ')' . ASSIGN matrix\l"]
  291 -> 304 [style=solid label="ASSIGN"]
  291 -> "291R72" [style=solid]
 "291R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
  292 [label="State 292\n\l 92 vector: MVARIABLE '(' '[' ']' ',' expr ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l107 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr ')' . ASSIGN vector\l"]
  292 -> 305 [style=solid label="ASSIGN"]
  292 -> "292R92" [style=solid]
 "292R92" [label="R92", fillcolor=3, shape=diamond, style=filled]
  293 [label="State 293\n\l 71 matrix: MVARIABLE '(' vector ',' '[' ']' ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l108 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' ')' . ASSIGN matrix\l"]
  293 -> 306 [style=solid label="ASSIGN"]
  293 -> "293R71" [style=solid]
 "293R71" [label="R71", fillcolor=3, shape=diamond, style=filled]
  294 [label="State 294\n\l 91 vector: MVARIABLE '(' expr ',' '[' ']' ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l106 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' ')' . ASSIGN vector\l"]
  294 -> 307 [style=solid label="ASSIGN"]
  294 -> "294R91" [style=solid]
 "294R91" [label="R91", fillcolor=3, shape=diamond, style=filled]
  295 [label="State 295\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l105 vmdeclaration: MVARIABLE '(' expr ',' expr ')' ASSIGN . expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  295 -> 75 [style=dotted]
  295 -> 5 [style=solid label="BOOL"]
  295 -> 6 [style=solid label="INTEGER"]
  295 -> 60 [style=solid label="VARIABLE"]
  295 -> 76 [style=solid label="VVARIABLE"]
  295 -> 77 [style=solid label="MVARIABLE"]
  295 -> 26 [style=solid label="MOVE"]
  295 -> 29 [style=solid label="ROBEX"]
  295 -> 30 [style=solid label="WALL"]
  295 -> 31 [style=solid label="'-'"]
  295 -> 32 [style=solid label="'!'"]
  295 -> 64 [style=solid label="'('"]
  295 -> 39 [style=dashed label="robotmove"]
  295 -> 42 [style=dashed label="robotwall"]
  295 -> 43 [style=dashed label="robotexit"]
  295 -> 308 [style=dashed label="expr"]
  295 -> 58 [style=dashed label="const"]
  296 [label="State 296\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . callfunction NEWLINE\l 21     | . robotactions NEWLINE\l 22     | . '(' stmts ')'\l 23     | . error NEWLINE\l 24 robotactions: . robotright\l 25             | . robotleft\l 26 robotmove: . MOVE '(' expr ')'\l 27 robotright: . RIGHT\l 28 robotleft: . LEFT\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 31 iff: . IF expr NEWLINE begif stmts endif\l 38 endfor: . E\l 39       | . ENDFOR\l 40 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 40     | FORR declaration DOUBLEDOT expr NEWLINE begfor stmts . endfor\l 41 return_func: . type VAR\l 42            | . return_func ',' type VAR\l 43            | . return_func error\l 55 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 56              | . error\l 57 function: . function_head B NEWLINE stmts E\l 68 callfunction: . return_func DECLARE FVARIABLE '[' callfunc_args ']'\l 69             | . error '[' callfunc_args ']'\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l103 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l104              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l105              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l106              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l107              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l108              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l109              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l110              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l111 declaration: . type VAR DECLARE expr\l112            | . type VAR DECLARE vector\l113            | . type VAR DECLARE matrix\l114 assignment: . VARIABLE ASSIGN expr\l115           | . VVARIABLE ASSIGN vector\l116           | . MVARIABLE ASSIGN matrix\l117 print: . PRINT '(' expr ')'\l118      | . PRINT '(' VVARIABLE ')'\l119      | . PRINT '(' MVARIABLE ')'\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l149 const: . INTEGER\l150      | . BOOL\l"]
  296 -> 96 [style=dotted]
  296 -> 5 [style=solid label="BOOL"]
  296 -> 6 [style=solid label="INTEGER"]
  296 -> 7 [style=solid label="VARIABLE"]
  296 -> 8 [style=solid label="VVARIABLE"]
  296 -> 9 [style=solid label="MVARIABLE"]
  296 -> 10 [style=solid label="CINT"]
  296 -> 11 [style=solid label="VINT"]
  296 -> 12 [style=solid label="MINT"]
  296 -> 13 [style=solid label="INT"]
  296 -> 14 [style=solid label="CVINT"]
  296 -> 15 [style=solid label="CMINT"]
  296 -> 16 [style=solid label="BOOLEAN"]
  296 -> 17 [style=solid label="CBOOLEAN"]
  296 -> 18 [style=solid label="VBOOLEAN"]
  296 -> 19 [style=solid label="MBOOLEAN"]
  296 -> 20 [style=solid label="CVBOOLEAN"]
  296 -> 21 [style=solid label="CMBOOLEAN"]
  296 -> 22 [style=solid label="NEWLINE"]
  296 -> 23 [style=solid label="PRINT"]
  296 -> 24 [style=solid label="IF"]
  296 -> 25 [style=solid label="FORR"]
  296 -> 309 [style=solid label="E"]
  296 -> 26 [style=solid label="MOVE"]
  296 -> 27 [style=solid label="RIGHT"]
  296 -> 28 [style=solid label="LEFT"]
  296 -> 29 [style=solid label="ROBEX"]
  296 -> 30 [style=solid label="WALL"]
  296 -> 310 [style=solid label="ENDFOR"]
  296 -> 31 [style=solid label="'-'"]
  296 -> 32 [style=solid label="'!'"]
  296 -> 33 [style=solid label="'('"]
  296 -> 34 [style=solid label="'['"]
  296 -> 35 [style=solid label="'{'"]
  296 -> 97 [style=dashed label="stmt"]
  296 -> 38 [style=dashed label="robotactions"]
  296 -> 39 [style=dashed label="robotmove"]
  296 -> 40 [style=dashed label="robotright"]
  296 -> 41 [style=dashed label="robotleft"]
  296 -> 42 [style=dashed label="robotwall"]
  296 -> 43 [style=dashed label="robotexit"]
  296 -> 44 [style=dashed label="iff"]
  296 -> 311 [style=dashed label="endfor"]
  296 -> 45 [style=dashed label="forr"]
  296 -> 46 [style=dashed label="return_func"]
  296 -> 47 [style=dashed label="function_head"]
  296 -> 48 [style=dashed label="function"]
  296 -> 49 [style=dashed label="callfunction"]
  296 -> 50 [style=dashed label="matrix"]
  296 -> 51 [style=dashed label="vector"]
  296 -> 52 [style=dashed label="vmdeclaration"]
  296 -> 53 [style=dashed label="declaration"]
  296 -> 54 [style=dashed label="assignment"]
  296 -> 55 [style=dashed label="print"]
  296 -> 56 [style=dashed label="expr"]
  296 -> 57 [style=dashed label="type"]
  296 -> 58 [style=dashed label="const"]
  297 [label="State 297\n\l 44 args_func: . '[' type VAR\l 45          | . '[' type VAR DECLARE expr\l 46          | . '[' type VAR DECLARE vector\l 47          | . '[' type VAR DECLARE matrix\l 48          | . args_func ',' type VAR\l 49          | . args_func ',' type VAR DECLARE expr\l 50          | . args_func ',' type VAR DECLARE vector\l 51          | . args_func ',' type VAR DECLARE matrix\l 52          | . args_func ']'\l 53          | . args_func error\l 54          | . error\l 55 function_head: '[' return_func ']' DECLARE FUNC VAR '(' . args_func ')'\l"]
  297 -> 312 [style=dotted]
  297 -> 313 [style=solid label="'['"]
  297 -> 314 [style=dashed label="args_func"]
  298 [label="State 298\n\l 90 vector: VVARIABLE '(' vector ',' '[' ']' ')' .\l"]
  298 -> "298R90" [style=solid]
 "298R90" [label="R90", fillcolor=3, shape=diamond, style=filled]
  299 [label="State 299\n\l 72 matrix: MVARIABLE '(' '[' ']' ',' vector ')' .\l"]
  299 -> "299R72" [style=solid]
 "299R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
  300 [label="State 300\n\l 92 vector: MVARIABLE '(' '[' ']' ',' expr ')' .\l"]
  300 -> "300R92" [style=solid]
 "300R92" [label="R92", fillcolor=3, shape=diamond, style=filled]
  301 [label="State 301\n\l 71 matrix: MVARIABLE '(' vector ',' '[' ']' ')' .\l"]
  301 -> "301R71" [style=solid]
 "301R71" [label="R71", fillcolor=3, shape=diamond, style=filled]
  302 [label="State 302\n\l 91 vector: MVARIABLE '(' expr ',' '[' ']' ')' .\l"]
  302 -> "302R91" [style=solid]
 "302R91" [label="R91", fillcolor=3, shape=diamond, style=filled]
  303 [label="State 303\n\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l104 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN . vector\l"]
  303 -> 140 [style=dotted]
  303 -> 141 [style=solid label="VVARIABLE"]
  303 -> 142 [style=solid label="MVARIABLE"]
  303 -> 91 [style=solid label="'{'"]
  303 -> 315 [style=dashed label="vector"]
  304 [label="State 304\n\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l109 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN . matrix\l"]
  304 -> 146 [style=dotted]
  304 -> 141 [style=solid label="VVARIABLE"]
  304 -> 147 [style=solid label="MVARIABLE"]
  304 -> 35 [style=solid label="'{'"]
  304 -> 316 [style=dashed label="matrix"]
  304 -> 149 [style=dashed label="vector"]
  305 [label="State 305\n\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l107 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN . vector\l"]
  305 -> 140 [style=dotted]
  305 -> 141 [style=solid label="VVARIABLE"]
  305 -> 142 [style=solid label="MVARIABLE"]
  305 -> 91 [style=solid label="'{'"]
  305 -> 317 [style=dashed label="vector"]
  306 [label="State 306\n\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l108 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN . matrix\l"]
  306 -> 146 [style=dotted]
  306 -> 141 [style=solid label="VVARIABLE"]
  306 -> 147 [style=solid label="MVARIABLE"]
  306 -> 35 [style=solid label="'{'"]
  306 -> 318 [style=dashed label="matrix"]
  306 -> 149 [style=dashed label="vector"]
  307 [label="State 307\n\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l106 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN . vector\l"]
  307 -> 140 [style=dotted]
  307 -> 141 [style=solid label="VVARIABLE"]
  307 -> 142 [style=solid label="MVARIABLE"]
  307 -> 91 [style=solid label="'{'"]
  307 -> 319 [style=dashed label="vector"]
  308 [label="State 308\n\l105 vmdeclaration: MVARIABLE '(' expr ',' expr ')' ASSIGN expr .  [NEWLINE]\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  308 -> 123 [style=solid label="CONJUNCTION"]
  308 -> 124 [style=solid label="'<'"]
  308 -> 125 [style=solid label="'>'"]
  308 -> 126 [style=solid label="'+'"]
  308 -> 127 [style=solid label="'-'"]
  308 -> 128 [style=solid label="'/'"]
  308 -> "308R105" [style=solid]
 "308R105" [label="R105", fillcolor=3, shape=diamond, style=filled]
  309 [label="State 309\n\l 38 endfor: E .\l"]
  309 -> "309R38" [style=solid]
 "309R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  310 [label="State 310\n\l 39 endfor: ENDFOR .\l"]
  310 -> "310R39" [style=solid]
 "310R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  311 [label="State 311\n\l 40 forr: FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor .\l"]
  311 -> "311R40" [style=solid]
 "311R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  312 [label="State 312\n\l 54 args_func: error .\l"]
  312 -> "312R54" [style=solid]
 "312R54" [label="R54", fillcolor=3, shape=diamond, style=filled]
  313 [label="State 313\n\l 44 args_func: '[' . type VAR\l 45          | '[' . type VAR DECLARE expr\l 46          | '[' . type VAR DECLARE vector\l 47          | '[' . type VAR DECLARE matrix\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l"]
  313 -> 10 [style=solid label="CINT"]
  313 -> 11 [style=solid label="VINT"]
  313 -> 12 [style=solid label="MINT"]
  313 -> 13 [style=solid label="INT"]
  313 -> 14 [style=solid label="CVINT"]
  313 -> 15 [style=solid label="CMINT"]
  313 -> 16 [style=solid label="BOOLEAN"]
  313 -> 17 [style=solid label="CBOOLEAN"]
  313 -> 18 [style=solid label="VBOOLEAN"]
  313 -> 19 [style=solid label="MBOOLEAN"]
  313 -> 20 [style=solid label="CVBOOLEAN"]
  313 -> 21 [style=solid label="CMBOOLEAN"]
  313 -> 320 [style=dashed label="type"]
  314 [label="State 314\n\l 48 args_func: args_func . ',' type VAR\l 49          | args_func . ',' type VAR DECLARE expr\l 50          | args_func . ',' type VAR DECLARE vector\l 51          | args_func . ',' type VAR DECLARE matrix\l 52          | args_func . ']'\l 53          | args_func . error\l 55 function_head: '[' return_func ']' DECLARE FUNC VAR '(' args_func . ')'\l"]
  314 -> 321 [style=dotted]
  314 -> 322 [style=solid label="','"]
  314 -> 323 [style=solid label="')'"]
  314 -> 324 [style=solid label="']'"]
  315 [label="State 315\n\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l104 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector .  [NEWLINE]\l"]
  315 -> 114 [style=solid label="ELEMMULT"]
  315 -> 116 [style=solid label="LEFTSHIFT"]
  315 -> 117 [style=solid label="RIGHTSHIFT"]
  315 -> "315R104" [style=solid]
 "315R104" [label="R104", fillcolor=3, shape=diamond, style=filled]
  316 [label="State 316\n\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l109 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix .  [NEWLINE]\l"]
  316 -> 108 [style=solid label="ELEMMULT"]
  316 -> 109 [style=solid label="'\\''"]
  316 -> 110 [style=solid label="LEFTSHIFT"]
  316 -> 111 [style=solid label="RIGHTSHIFT"]
  316 -> 112 [style=solid label="'*'"]
  316 -> "316R109" [style=solid]
 "316R109" [label="R109", fillcolor=3, shape=diamond, style=filled]
  317 [label="State 317\n\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l107 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector .  [NEWLINE]\l"]
  317 -> 114 [style=solid label="ELEMMULT"]
  317 -> 116 [style=solid label="LEFTSHIFT"]
  317 -> 117 [style=solid label="RIGHTSHIFT"]
  317 -> "317R107" [style=solid]
 "317R107" [label="R107", fillcolor=3, shape=diamond, style=filled]
  318 [label="State 318\n\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l108 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix .  [NEWLINE]\l"]
  318 -> 108 [style=solid label="ELEMMULT"]
  318 -> 109 [style=solid label="'\\''"]
  318 -> 110 [style=solid label="LEFTSHIFT"]
  318 -> 111 [style=solid label="RIGHTSHIFT"]
  318 -> 112 [style=solid label="'*'"]
  318 -> "318R108" [style=solid]
 "318R108" [label="R108", fillcolor=3, shape=diamond, style=filled]
  319 [label="State 319\n\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l106 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector .  [NEWLINE]\l"]
  319 -> 114 [style=solid label="ELEMMULT"]
  319 -> 116 [style=solid label="LEFTSHIFT"]
  319 -> 117 [style=solid label="RIGHTSHIFT"]
  319 -> "319R106" [style=solid]
 "319R106" [label="R106", fillcolor=3, shape=diamond, style=filled]
  320 [label="State 320\n\l 44 args_func: '[' type . VAR\l 45          | '[' type . VAR DECLARE expr\l 46          | '[' type . VAR DECLARE vector\l 47          | '[' type . VAR DECLARE matrix\l"]
  320 -> 325 [style=solid label="VAR"]
  321 [label="State 321\n\l 53 args_func: args_func error .\l"]
  321 -> "321R53" [style=solid]
 "321R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
  322 [label="State 322\n\l 48 args_func: args_func ',' . type VAR\l 49          | args_func ',' . type VAR DECLARE expr\l 50          | args_func ',' . type VAR DECLARE vector\l 51          | args_func ',' . type VAR DECLARE matrix\l137 type: . INT\l138     | . CINT\l139     | . VINT\l140     | . MINT\l141     | . CVINT\l142     | . CMINT\l143     | . BOOLEAN\l144     | . CBOOLEAN\l145     | . VBOOLEAN\l146     | . MBOOLEAN\l147     | . CVBOOLEAN\l148     | . CMBOOLEAN\l"]
  322 -> 10 [style=solid label="CINT"]
  322 -> 11 [style=solid label="VINT"]
  322 -> 12 [style=solid label="MINT"]
  322 -> 13 [style=solid label="INT"]
  322 -> 14 [style=solid label="CVINT"]
  322 -> 15 [style=solid label="CMINT"]
  322 -> 16 [style=solid label="BOOLEAN"]
  322 -> 17 [style=solid label="CBOOLEAN"]
  322 -> 18 [style=solid label="VBOOLEAN"]
  322 -> 19 [style=solid label="MBOOLEAN"]
  322 -> 20 [style=solid label="CVBOOLEAN"]
  322 -> 21 [style=solid label="CMBOOLEAN"]
  322 -> 326 [style=dashed label="type"]
  323 [label="State 323\n\l 55 function_head: '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' .\l"]
  323 -> "323R55" [style=solid]
 "323R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  324 [label="State 324\n\l 52 args_func: args_func ']' .\l"]
  324 -> "324R52" [style=solid]
 "324R52" [label="R52", fillcolor=3, shape=diamond, style=filled]
  325 [label="State 325\n\l 44 args_func: '[' type VAR .  [error, ',', ')', ']']\l 45          | '[' type VAR . DECLARE expr\l 46          | '[' type VAR . DECLARE vector\l 47          | '[' type VAR . DECLARE matrix\l"]
  325 -> 327 [style=solid label="DECLARE"]
  325 -> "325R44" [style=solid]
 "325R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  326 [label="State 326\n\l 48 args_func: args_func ',' type . VAR\l 49          | args_func ',' type . VAR DECLARE expr\l 50          | args_func ',' type . VAR DECLARE vector\l 51          | args_func ',' type . VAR DECLARE matrix\l"]
  326 -> 328 [style=solid label="VAR"]
  327 [label="State 327\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 45 args_func: '[' type VAR DECLARE . expr\l 46          | '[' type VAR DECLARE . vector\l 47          | '[' type VAR DECLARE . matrix\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  327 -> 59 [style=dotted]
  327 -> 5 [style=solid label="BOOL"]
  327 -> 6 [style=solid label="INTEGER"]
  327 -> 60 [style=solid label="VARIABLE"]
  327 -> 61 [style=solid label="VVARIABLE"]
  327 -> 62 [style=solid label="MVARIABLE"]
  327 -> 26 [style=solid label="MOVE"]
  327 -> 29 [style=solid label="ROBEX"]
  327 -> 30 [style=solid label="WALL"]
  327 -> 31 [style=solid label="'-'"]
  327 -> 32 [style=solid label="'!'"]
  327 -> 64 [style=solid label="'('"]
  327 -> 35 [style=solid label="'{'"]
  327 -> 39 [style=dashed label="robotmove"]
  327 -> 42 [style=dashed label="robotwall"]
  327 -> 43 [style=dashed label="robotexit"]
  327 -> 329 [style=dashed label="matrix"]
  327 -> 330 [style=dashed label="vector"]
  327 -> 331 [style=dashed label="expr"]
  327 -> 58 [style=dashed label="const"]
  328 [label="State 328\n\l 48 args_func: args_func ',' type VAR .  [error, ',', ')', ']']\l 49          | args_func ',' type VAR . DECLARE expr\l 50          | args_func ',' type VAR . DECLARE vector\l 51          | args_func ',' type VAR . DECLARE matrix\l"]
  328 -> 332 [style=solid label="DECLARE"]
  328 -> "328R48" [style=solid]
 "328R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  329 [label="State 329\n\l 47 args_func: '[' type VAR DECLARE matrix .  [error, ',', ')', ']']\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l"]
  329 -> 108 [style=solid label="ELEMMULT"]
  329 -> 109 [style=solid label="'\\''"]
  329 -> 110 [style=solid label="LEFTSHIFT"]
  329 -> 111 [style=solid label="RIGHTSHIFT"]
  329 -> 112 [style=solid label="'*'"]
  329 -> "329R47" [style=solid]
 "329R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  330 [label="State 330\n\l 46 args_func: '[' type VAR DECLARE vector .  [error, ',', ')', ']']\l 80 matrix: vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  330 -> 114 [style=solid label="ELEMMULT"]
  330 -> 115 [style=solid label="'\\''"]
  330 -> 116 [style=solid label="LEFTSHIFT"]
  330 -> 117 [style=solid label="RIGHTSHIFT"]
  330 -> "330R46" [style=solid]
 "330R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
  331 [label="State 331\n\l 45 args_func: '[' type VAR DECLARE expr .  [error, ',', ')', ']']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  331 -> 123 [style=solid label="CONJUNCTION"]
  331 -> 124 [style=solid label="'<'"]
  331 -> 125 [style=solid label="'>'"]
  331 -> 126 [style=solid label="'+'"]
  331 -> 127 [style=solid label="'-'"]
  331 -> 128 [style=solid label="'/'"]
  331 -> "331R45" [style=solid]
 "331R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
  332 [label="State 332\n\l 26 robotmove: . MOVE '(' expr ')'\l 29 robotwall: . WALL\l 30 robotexit: . ROBEX\l 49 args_func: args_func ',' type VAR DECLARE . expr\l 50          | args_func ',' type VAR DECLARE . vector\l 51          | args_func ',' type VAR DECLARE . matrix\l 70 matrix: . '{' listexprs '}'\l 71       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 72       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 73       | . MVARIABLE '(' matrix ')'\l 74       | . MVARIABLE\l 75       | . matrix '*' matrix\l 76       | . matrix ELEMMULT matrix\l 77       | . matrix '\\''\l 78       | . matrix RIGHTSHIFT\l 79       | . matrix LEFTSHIFT\l 80       | . vector '\\''\l 81       | . matrix ELEMMULT vector\l 82       | . matrix ELEMMULT expr\l 83       | . error matrix\l 84       | . error vector\l 85       | . error expr\l 89 vector: . '{' exprs '}'\l 90       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 91       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 92       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 93       | . VVARIABLE\l 94       | . vector ELEMMULT vector\l 95       | . vector RIGHTSHIFT\l 96       | . vector LEFTSHIFT\l 97       | . vector ELEMMULT expr\l 98       | . error vector\l 99       | . error expr\l120 expr: . const\l121     | . robotexit\l122     | . robotmove\l123     | . robotwall\l124     | . VARIABLE\l125     | . '-' expr\l126     | . expr '+' expr\l127     | . expr '-' expr\l128     | . expr '/' expr\l129     | . expr '<' expr\l130     | . expr '>' expr\l131     | . '!' expr\l132     | . expr CONJUNCTION expr\l133     | . '(' expr ')'\l134     | . VVARIABLE '(' expr ')'\l135     | . MVARIABLE '(' expr ',' expr ')'\l136     | . error expr\l149 const: . INTEGER\l150      | . BOOL\l"]
  332 -> 59 [style=dotted]
  332 -> 5 [style=solid label="BOOL"]
  332 -> 6 [style=solid label="INTEGER"]
  332 -> 60 [style=solid label="VARIABLE"]
  332 -> 61 [style=solid label="VVARIABLE"]
  332 -> 62 [style=solid label="MVARIABLE"]
  332 -> 26 [style=solid label="MOVE"]
  332 -> 29 [style=solid label="ROBEX"]
  332 -> 30 [style=solid label="WALL"]
  332 -> 31 [style=solid label="'-'"]
  332 -> 32 [style=solid label="'!'"]
  332 -> 64 [style=solid label="'('"]
  332 -> 35 [style=solid label="'{'"]
  332 -> 39 [style=dashed label="robotmove"]
  332 -> 42 [style=dashed label="robotwall"]
  332 -> 43 [style=dashed label="robotexit"]
  332 -> 333 [style=dashed label="matrix"]
  332 -> 334 [style=dashed label="vector"]
  332 -> 335 [style=dashed label="expr"]
  332 -> 58 [style=dashed label="const"]
  333 [label="State 333\n\l 51 args_func: args_func ',' type VAR DECLARE matrix .  [error, ',', ')', ']']\l 75 matrix: matrix . '*' matrix\l 76       | matrix . ELEMMULT matrix\l 77       | matrix . '\\''\l 78       | matrix . RIGHTSHIFT\l 79       | matrix . LEFTSHIFT\l 81       | matrix . ELEMMULT vector\l 82       | matrix . ELEMMULT expr\l"]
  333 -> 108 [style=solid label="ELEMMULT"]
  333 -> 109 [style=solid label="'\\''"]
  333 -> 110 [style=solid label="LEFTSHIFT"]
  333 -> 111 [style=solid label="RIGHTSHIFT"]
  333 -> 112 [style=solid label="'*'"]
  333 -> "333R51" [style=solid]
 "333R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
  334 [label="State 334\n\l 50 args_func: args_func ',' type VAR DECLARE vector .  [error, ',', ')', ']']\l 80 matrix: vector . '\\''\l 94 vector: vector . ELEMMULT vector\l 95       | vector . RIGHTSHIFT\l 96       | vector . LEFTSHIFT\l 97       | vector . ELEMMULT expr\l"]
  334 -> 114 [style=solid label="ELEMMULT"]
  334 -> 115 [style=solid label="'\\''"]
  334 -> 116 [style=solid label="LEFTSHIFT"]
  334 -> 117 [style=solid label="RIGHTSHIFT"]
  334 -> "334R50" [style=solid]
 "334R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
  335 [label="State 335\n\l 49 args_func: args_func ',' type VAR DECLARE expr .  [error, ',', ')', ']']\l126 expr: expr . '+' expr\l127     | expr . '-' expr\l128     | expr . '/' expr\l129     | expr . '<' expr\l130     | expr . '>' expr\l132     | expr . CONJUNCTION expr\l"]
  335 -> 123 [style=solid label="CONJUNCTION"]
  335 -> 124 [style=solid label="'<'"]
  335 -> 125 [style=solid label="'>'"]
  335 -> 126 [style=solid label="'+'"]
  335 -> 127 [style=solid label="'-'"]
  335 -> 128 [style=solid label="'/'"]
  335 -> "335R49" [style=solid]
 "335R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
}
