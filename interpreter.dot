// Generated by GNU Bison 3.3.2.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <http://www.gnu.org/software/bison/>.

digraph "interpreter.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: . program $end\l  1 program: . func\l  2 func: . func stmts\l  3     | . func error\l  4     | . %empty\l"]
  0 -> 1 [style=dashed label="program"]
  0 -> 2 [style=dashed label="func"]
  0 -> "0R4" [style=solid]
 "0R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  1 [label="State 1\n\l  0 $accept: program . $end\l"]
  1 -> 3 [style=solid label="$end"]
  2 [label="State 2\n\l  1 program: func .  [$end]\l  2 func: func . stmts\l  3     | func . error\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . robotactions NEWLINE\l 21     | . '(' stmts ')'\l 22     | . error NEWLINE\l 23 robotactions: . robotright\l 24             | . robotleft\l 25 robotmove: . MOVE '(' expr ')'\l 26 robotright: . RIGHT\l 27 robotleft: . LEFT\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 30 iff: . IF expr NEWLINE begif stmts endif\l 39 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 54 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 55              | . error\l 56 function: . function_head B NEWLINE stmts E\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 90 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 91              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 92              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 93              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 94              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 95              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 96              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 97              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 98 declaration: . type VAR DECLARE expr\l 99            | . type VAR DECLARE vector\l100            | . type VAR DECLARE matrix\l101 assignment: . VARIABLE ASSIGN expr\l102           | . VVARIABLE ASSIGN vector\l103           | . MVARIABLE ASSIGN matrix\l104 print: . PRINT '(' expr ')'\l105      | . PRINT '(' VVARIABLE ')'\l106      | . PRINT '(' MVARIABLE ')'\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l124 type: . INT\l125     | . CINT\l126     | . VINT\l127     | . MINT\l128     | . CVINT\l129     | . CMINT\l130     | . BOOLEAN\l131     | . CBOOLEAN\l132     | . VBOOLEAN\l133     | . MBOOLEAN\l134     | . CVBOOLEAN\l135     | . CMBOOLEAN\l136 const: . INTEGER\l137      | . BOOL\l"]
  2 -> 4 [style=dotted]
  2 -> 5 [style=solid label="BOOL"]
  2 -> 6 [style=solid label="INTEGER"]
  2 -> 7 [style=solid label="VARIABLE"]
  2 -> 8 [style=solid label="VVARIABLE"]
  2 -> 9 [style=solid label="MVARIABLE"]
  2 -> 10 [style=solid label="CINT"]
  2 -> 11 [style=solid label="VINT"]
  2 -> 12 [style=solid label="MINT"]
  2 -> 13 [style=solid label="INT"]
  2 -> 14 [style=solid label="CVINT"]
  2 -> 15 [style=solid label="CMINT"]
  2 -> 16 [style=solid label="BOOLEAN"]
  2 -> 17 [style=solid label="CBOOLEAN"]
  2 -> 18 [style=solid label="VBOOLEAN"]
  2 -> 19 [style=solid label="MBOOLEAN"]
  2 -> 20 [style=solid label="CVBOOLEAN"]
  2 -> 21 [style=solid label="CMBOOLEAN"]
  2 -> 22 [style=solid label="NEWLINE"]
  2 -> 23 [style=solid label="PRINT"]
  2 -> 24 [style=solid label="IF"]
  2 -> 25 [style=solid label="FORR"]
  2 -> 26 [style=solid label="MOVE"]
  2 -> 27 [style=solid label="RIGHT"]
  2 -> 28 [style=solid label="LEFT"]
  2 -> 29 [style=solid label="ROBEX"]
  2 -> 30 [style=solid label="WALL"]
  2 -> 31 [style=solid label="'-'"]
  2 -> 32 [style=solid label="'!'"]
  2 -> 33 [style=solid label="'('"]
  2 -> 34 [style=solid label="'['"]
  2 -> 35 [style=solid label="'{'"]
  2 -> 36 [style=dashed label="stmts"]
  2 -> 37 [style=dashed label="stmt"]
  2 -> 38 [style=dashed label="robotactions"]
  2 -> 39 [style=dashed label="robotmove"]
  2 -> 40 [style=dashed label="robotright"]
  2 -> 41 [style=dashed label="robotleft"]
  2 -> 42 [style=dashed label="robotwall"]
  2 -> 43 [style=dashed label="robotexit"]
  2 -> 44 [style=dashed label="iff"]
  2 -> 45 [style=dashed label="forr"]
  2 -> 46 [style=dashed label="function_head"]
  2 -> 47 [style=dashed label="function"]
  2 -> 48 [style=dashed label="matrix"]
  2 -> 49 [style=dashed label="vector"]
  2 -> 50 [style=dashed label="vmdeclaration"]
  2 -> 51 [style=dashed label="declaration"]
  2 -> 52 [style=dashed label="assignment"]
  2 -> 53 [style=dashed label="print"]
  2 -> 54 [style=dashed label="expr"]
  2 -> 55 [style=dashed label="type"]
  2 -> 56 [style=dashed label="const"]
  2 -> "2R1" [label="[$end]", style=solid]
 "2R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  3 [label="State 3\n\l  0 $accept: program $end .\l"]
  3 -> "3R0" [style=solid]
 "3R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  4 [label="State 4\n\l  3 func: func error .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']\l  8 stmts: error .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']\l 22 stmt: error . NEWLINE\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 55 function_head: error .  [B]\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 70       | error . matrix\l 71       | . error vector\l 71       | error . vector\l 72       | . error expr\l 72       | error . expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 85       | error . vector\l 86       | . error expr\l 86       | error . expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l123     | error . expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  4 -> 57 [style=dotted]
  4 -> 5 [style=solid label="BOOL"]
  4 -> 6 [style=solid label="INTEGER"]
  4 -> 58 [style=solid label="VARIABLE"]
  4 -> 59 [style=solid label="VVARIABLE"]
  4 -> 60 [style=solid label="MVARIABLE"]
  4 -> 61 [style=solid label="NEWLINE"]
  4 -> 26 [style=solid label="MOVE"]
  4 -> 29 [style=solid label="ROBEX"]
  4 -> 30 [style=solid label="WALL"]
  4 -> 31 [style=solid label="'-'"]
  4 -> 32 [style=solid label="'!'"]
  4 -> 62 [style=solid label="'('"]
  4 -> 35 [style=solid label="'{'"]
  4 -> 39 [style=dashed label="robotmove"]
  4 -> 42 [style=dashed label="robotwall"]
  4 -> 43 [style=dashed label="robotexit"]
  4 -> 63 [style=dashed label="matrix"]
  4 -> 64 [style=dashed label="vector"]
  4 -> 65 [style=dashed label="expr"]
  4 -> 56 [style=dashed label="const"]
  4 -> "4R3d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, NEWLINE, MOVE, ROBEX, WALL, '-', '!', '(', '{']", style=solid]
 "4R3d" [label="R3", fillcolor=5, shape=diamond, style=filled]
  4 -> "4R3" [label="[$end, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, PRINT, IF, FORR, RIGHT, LEFT, '[']", style=solid]
 "4R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  4 -> "4R8d" [label="[$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "4R8d" [label="R8", fillcolor=5, shape=diamond, style=filled]
  4 -> "4R55" [label="[B]", style=solid]
 "4R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  5 [label="State 5\n\l137 const: BOOL .\l"]
  5 -> "5R137" [style=solid]
 "5R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
  6 [label="State 6\n\l136 const: INTEGER .\l"]
  6 -> "6R136" [style=solid]
 "6R136" [label="R136", fillcolor=3, shape=diamond, style=filled]
  7 [label="State 7\n\l101 assignment: VARIABLE . ASSIGN expr\l111 expr: VARIABLE .  [NEWLINE, CONJUNCTION, '<', '>', '+', '-', '/', ')']\l"]
  7 -> 66 [style=solid label="ASSIGN"]
  7 -> "7R111" [style=solid]
 "7R111" [label="R111", fillcolor=3, shape=diamond, style=filled]
  8 [label="State 8\n\l 77 vector: VVARIABLE . '(' vector ',' '[' ']' ')'\l 80       | VVARIABLE .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l 90 vmdeclaration: VVARIABLE . '(' expr ')' ASSIGN expr\l 91              | VVARIABLE . '(' vector ',' '[' ']' ')' ASSIGN vector\l102 assignment: VVARIABLE . ASSIGN vector\l121 expr: VVARIABLE . '(' expr ')'\l"]
  8 -> 67 [style=solid label="ASSIGN"]
  8 -> 68 [style=solid label="'('"]
  8 -> "8R80" [style=solid]
 "8R80" [label="R80", fillcolor=3, shape=diamond, style=filled]
  9 [label="State 9\n\l 58 matrix: MVARIABLE . '(' vector ',' '[' ']' ')'\l 59       | MVARIABLE . '(' '[' ']' ',' vector ')'\l 60       | MVARIABLE . '(' matrix ')'\l 61       | MVARIABLE .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l 78 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 79       | MVARIABLE . '(' '[' ']' ',' expr ')'\l 92 vmdeclaration: MVARIABLE . '(' expr ',' expr ')' ASSIGN expr\l 93              | MVARIABLE . '(' expr ',' '[' ']' ')' ASSIGN vector\l 94              | MVARIABLE . '(' '[' ']' ',' expr ')' ASSIGN vector\l 95              | MVARIABLE . '(' vector ',' '[' ']' ')' ASSIGN matrix\l 96              | MVARIABLE . '(' '[' ']' ',' vector ')' ASSIGN matrix\l 97              | MVARIABLE . '(' matrix ')' ASSIGN matrix\l103 assignment: MVARIABLE . ASSIGN matrix\l122 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  9 -> 69 [style=solid label="ASSIGN"]
  9 -> 70 [style=solid label="'('"]
  9 -> "9R61" [style=solid]
 "9R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
  10 [label="State 10\n\l125 type: CINT .\l"]
  10 -> "10R125" [style=solid]
 "10R125" [label="R125", fillcolor=3, shape=diamond, style=filled]
  11 [label="State 11\n\l126 type: VINT .\l"]
  11 -> "11R126" [style=solid]
 "11R126" [label="R126", fillcolor=3, shape=diamond, style=filled]
  12 [label="State 12\n\l127 type: MINT .\l"]
  12 -> "12R127" [style=solid]
 "12R127" [label="R127", fillcolor=3, shape=diamond, style=filled]
  13 [label="State 13\n\l124 type: INT .\l"]
  13 -> "13R124" [style=solid]
 "13R124" [label="R124", fillcolor=3, shape=diamond, style=filled]
  14 [label="State 14\n\l128 type: CVINT .\l"]
  14 -> "14R128" [style=solid]
 "14R128" [label="R128", fillcolor=3, shape=diamond, style=filled]
  15 [label="State 15\n\l129 type: CMINT .\l"]
  15 -> "15R129" [style=solid]
 "15R129" [label="R129", fillcolor=3, shape=diamond, style=filled]
  16 [label="State 16\n\l130 type: BOOLEAN .\l"]
  16 -> "16R130" [style=solid]
 "16R130" [label="R130", fillcolor=3, shape=diamond, style=filled]
  17 [label="State 17\n\l131 type: CBOOLEAN .\l"]
  17 -> "17R131" [style=solid]
 "17R131" [label="R131", fillcolor=3, shape=diamond, style=filled]
  18 [label="State 18\n\l132 type: VBOOLEAN .\l"]
  18 -> "18R132" [style=solid]
 "18R132" [label="R132", fillcolor=3, shape=diamond, style=filled]
  19 [label="State 19\n\l133 type: MBOOLEAN .\l"]
  19 -> "19R133" [style=solid]
 "19R133" [label="R133", fillcolor=3, shape=diamond, style=filled]
  20 [label="State 20\n\l134 type: CVBOOLEAN .\l"]
  20 -> "20R134" [style=solid]
 "20R134" [label="R134", fillcolor=3, shape=diamond, style=filled]
  21 [label="State 21\n\l135 type: CMBOOLEAN .\l"]
  21 -> "21R135" [style=solid]
 "21R135" [label="R135", fillcolor=3, shape=diamond, style=filled]
  22 [label="State 22\n\l  9 stmt: NEWLINE .\l"]
  22 -> "22R9" [style=solid]
 "22R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  23 [label="State 23\n\l104 print: PRINT . '(' expr ')'\l105      | PRINT . '(' VVARIABLE ')'\l106      | PRINT . '(' MVARIABLE ')'\l"]
  23 -> 71 [style=solid label="'('"]
  24 [label="State 24\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 30 iff: IF . expr NEWLINE begif stmts endif\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  24 -> 72 [style=dotted]
  24 -> 5 [style=solid label="BOOL"]
  24 -> 6 [style=solid label="INTEGER"]
  24 -> 58 [style=solid label="VARIABLE"]
  24 -> 73 [style=solid label="VVARIABLE"]
  24 -> 74 [style=solid label="MVARIABLE"]
  24 -> 26 [style=solid label="MOVE"]
  24 -> 29 [style=solid label="ROBEX"]
  24 -> 30 [style=solid label="WALL"]
  24 -> 31 [style=solid label="'-'"]
  24 -> 32 [style=solid label="'!'"]
  24 -> 62 [style=solid label="'('"]
  24 -> 39 [style=dashed label="robotmove"]
  24 -> 42 [style=dashed label="robotwall"]
  24 -> 43 [style=dashed label="robotexit"]
  24 -> 75 [style=dashed label="expr"]
  24 -> 56 [style=dashed label="const"]
  25 [label="State 25\n\l 39 forr: FORR . declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 98 declaration: . type VAR DECLARE expr\l 99            | . type VAR DECLARE vector\l100            | . type VAR DECLARE matrix\l124 type: . INT\l125     | . CINT\l126     | . VINT\l127     | . MINT\l128     | . CVINT\l129     | . CMINT\l130     | . BOOLEAN\l131     | . CBOOLEAN\l132     | . VBOOLEAN\l133     | . MBOOLEAN\l134     | . CVBOOLEAN\l135     | . CMBOOLEAN\l"]
  25 -> 10 [style=solid label="CINT"]
  25 -> 11 [style=solid label="VINT"]
  25 -> 12 [style=solid label="MINT"]
  25 -> 13 [style=solid label="INT"]
  25 -> 14 [style=solid label="CVINT"]
  25 -> 15 [style=solid label="CMINT"]
  25 -> 16 [style=solid label="BOOLEAN"]
  25 -> 17 [style=solid label="CBOOLEAN"]
  25 -> 18 [style=solid label="VBOOLEAN"]
  25 -> 19 [style=solid label="MBOOLEAN"]
  25 -> 20 [style=solid label="CVBOOLEAN"]
  25 -> 21 [style=solid label="CMBOOLEAN"]
  25 -> 76 [style=dashed label="declaration"]
  25 -> 55 [style=dashed label="type"]
  26 [label="State 26\n\l 25 robotmove: MOVE . '(' expr ')'\l"]
  26 -> 77 [style=solid label="'('"]
  27 [label="State 27\n\l 26 robotright: RIGHT .\l"]
  27 -> "27R26" [style=solid]
 "27R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  28 [label="State 28\n\l 27 robotleft: LEFT .\l"]
  28 -> "28R27" [style=solid]
 "28R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  29 [label="State 29\n\l 29 robotexit: ROBEX .\l"]
  29 -> "29R29" [style=solid]
 "29R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  30 [label="State 30\n\l 28 robotwall: WALL .\l"]
  30 -> "30R28" [style=solid]
 "30R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  31 [label="State 31\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l112     | '-' . expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  31 -> 72 [style=dotted]
  31 -> 5 [style=solid label="BOOL"]
  31 -> 6 [style=solid label="INTEGER"]
  31 -> 58 [style=solid label="VARIABLE"]
  31 -> 73 [style=solid label="VVARIABLE"]
  31 -> 74 [style=solid label="MVARIABLE"]
  31 -> 26 [style=solid label="MOVE"]
  31 -> 29 [style=solid label="ROBEX"]
  31 -> 30 [style=solid label="WALL"]
  31 -> 31 [style=solid label="'-'"]
  31 -> 32 [style=solid label="'!'"]
  31 -> 62 [style=solid label="'('"]
  31 -> 39 [style=dashed label="robotmove"]
  31 -> 42 [style=dashed label="robotwall"]
  31 -> 43 [style=dashed label="robotexit"]
  31 -> 78 [style=dashed label="expr"]
  31 -> 56 [style=dashed label="const"]
  32 [label="State 32\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l118     | '!' . expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  32 -> 72 [style=dotted]
  32 -> 5 [style=solid label="BOOL"]
  32 -> 6 [style=solid label="INTEGER"]
  32 -> 58 [style=solid label="VARIABLE"]
  32 -> 73 [style=solid label="VVARIABLE"]
  32 -> 74 [style=solid label="MVARIABLE"]
  32 -> 26 [style=solid label="MOVE"]
  32 -> 29 [style=solid label="ROBEX"]
  32 -> 30 [style=solid label="WALL"]
  32 -> 31 [style=solid label="'-'"]
  32 -> 32 [style=solid label="'!'"]
  32 -> 62 [style=solid label="'('"]
  32 -> 39 [style=dashed label="robotmove"]
  32 -> 42 [style=dashed label="robotwall"]
  32 -> 43 [style=dashed label="robotexit"]
  32 -> 79 [style=dashed label="expr"]
  32 -> 56 [style=dashed label="const"]
  33 [label="State 33\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . robotactions NEWLINE\l 21     | . '(' stmts ')'\l 21     | '(' . stmts ')'\l 22     | . error NEWLINE\l 23 robotactions: . robotright\l 24             | . robotleft\l 25 robotmove: . MOVE '(' expr ')'\l 26 robotright: . RIGHT\l 27 robotleft: . LEFT\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 30 iff: . IF expr NEWLINE begif stmts endif\l 39 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 54 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 55              | . error\l 56 function: . function_head B NEWLINE stmts E\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 90 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 91              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 92              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 93              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 94              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 95              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 96              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 97              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 98 declaration: . type VAR DECLARE expr\l 99            | . type VAR DECLARE vector\l100            | . type VAR DECLARE matrix\l101 assignment: . VARIABLE ASSIGN expr\l102           | . VVARIABLE ASSIGN vector\l103           | . MVARIABLE ASSIGN matrix\l104 print: . PRINT '(' expr ')'\l105      | . PRINT '(' VVARIABLE ')'\l106      | . PRINT '(' MVARIABLE ')'\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l120     | '(' . expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l124 type: . INT\l125     | . CINT\l126     | . VINT\l127     | . MINT\l128     | . CVINT\l129     | . CMINT\l130     | . BOOLEAN\l131     | . CBOOLEAN\l132     | . VBOOLEAN\l133     | . MBOOLEAN\l134     | . CVBOOLEAN\l135     | . CMBOOLEAN\l136 const: . INTEGER\l137      | . BOOL\l"]
  33 -> 80 [style=dotted]
  33 -> 5 [style=solid label="BOOL"]
  33 -> 6 [style=solid label="INTEGER"]
  33 -> 7 [style=solid label="VARIABLE"]
  33 -> 8 [style=solid label="VVARIABLE"]
  33 -> 9 [style=solid label="MVARIABLE"]
  33 -> 10 [style=solid label="CINT"]
  33 -> 11 [style=solid label="VINT"]
  33 -> 12 [style=solid label="MINT"]
  33 -> 13 [style=solid label="INT"]
  33 -> 14 [style=solid label="CVINT"]
  33 -> 15 [style=solid label="CMINT"]
  33 -> 16 [style=solid label="BOOLEAN"]
  33 -> 17 [style=solid label="CBOOLEAN"]
  33 -> 18 [style=solid label="VBOOLEAN"]
  33 -> 19 [style=solid label="MBOOLEAN"]
  33 -> 20 [style=solid label="CVBOOLEAN"]
  33 -> 21 [style=solid label="CMBOOLEAN"]
  33 -> 22 [style=solid label="NEWLINE"]
  33 -> 23 [style=solid label="PRINT"]
  33 -> 24 [style=solid label="IF"]
  33 -> 25 [style=solid label="FORR"]
  33 -> 26 [style=solid label="MOVE"]
  33 -> 27 [style=solid label="RIGHT"]
  33 -> 28 [style=solid label="LEFT"]
  33 -> 29 [style=solid label="ROBEX"]
  33 -> 30 [style=solid label="WALL"]
  33 -> 31 [style=solid label="'-'"]
  33 -> 32 [style=solid label="'!'"]
  33 -> 33 [style=solid label="'('"]
  33 -> 34 [style=solid label="'['"]
  33 -> 35 [style=solid label="'{'"]
  33 -> 81 [style=dashed label="stmts"]
  33 -> 37 [style=dashed label="stmt"]
  33 -> 38 [style=dashed label="robotactions"]
  33 -> 39 [style=dashed label="robotmove"]
  33 -> 40 [style=dashed label="robotright"]
  33 -> 41 [style=dashed label="robotleft"]
  33 -> 42 [style=dashed label="robotwall"]
  33 -> 43 [style=dashed label="robotexit"]
  33 -> 44 [style=dashed label="iff"]
  33 -> 45 [style=dashed label="forr"]
  33 -> 46 [style=dashed label="function_head"]
  33 -> 47 [style=dashed label="function"]
  33 -> 48 [style=dashed label="matrix"]
  33 -> 49 [style=dashed label="vector"]
  33 -> 50 [style=dashed label="vmdeclaration"]
  33 -> 51 [style=dashed label="declaration"]
  33 -> 52 [style=dashed label="assignment"]
  33 -> 53 [style=dashed label="print"]
  33 -> 82 [style=dashed label="expr"]
  33 -> 55 [style=dashed label="type"]
  33 -> 56 [style=dashed label="const"]
  34 [label="State 34\n\l 40 return_func: . type VAR\l 41            | . return_func ',' type VAR\l 42            | . return_func error\l 54 function_head: '[' . return_func ']' DECLARE FUNC VAR '(' args_func ')'\l124 type: . INT\l125     | . CINT\l126     | . VINT\l127     | . MINT\l128     | . CVINT\l129     | . CMINT\l130     | . BOOLEAN\l131     | . CBOOLEAN\l132     | . VBOOLEAN\l133     | . MBOOLEAN\l134     | . CVBOOLEAN\l135     | . CMBOOLEAN\l"]
  34 -> 10 [style=solid label="CINT"]
  34 -> 11 [style=solid label="VINT"]
  34 -> 12 [style=solid label="MINT"]
  34 -> 13 [style=solid label="INT"]
  34 -> 14 [style=solid label="CVINT"]
  34 -> 15 [style=solid label="CMINT"]
  34 -> 16 [style=solid label="BOOLEAN"]
  34 -> 17 [style=solid label="CBOOLEAN"]
  34 -> 18 [style=solid label="VBOOLEAN"]
  34 -> 19 [style=solid label="MBOOLEAN"]
  34 -> 20 [style=solid label="CVBOOLEAN"]
  34 -> 21 [style=solid label="CMBOOLEAN"]
  34 -> 83 [style=dashed label="return_func"]
  34 -> 84 [style=dashed label="type"]
  35 [label="State 35\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 57 matrix: '{' . listexprs '}'\l 73 listexprs: . vector ',' vector\l 74          | . listexprs ',' vector\l 75          | . listexprs error\l 76 vector: . '{' exprs '}'\l 76       | '{' . exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 87 exprs: . expr ',' expr\l 88      | . exprs ',' expr\l 89      | . exprs error\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  35 -> 85 [style=dotted]
  35 -> 5 [style=solid label="BOOL"]
  35 -> 6 [style=solid label="INTEGER"]
  35 -> 58 [style=solid label="VARIABLE"]
  35 -> 59 [style=solid label="VVARIABLE"]
  35 -> 86 [style=solid label="MVARIABLE"]
  35 -> 26 [style=solid label="MOVE"]
  35 -> 29 [style=solid label="ROBEX"]
  35 -> 30 [style=solid label="WALL"]
  35 -> 31 [style=solid label="'-'"]
  35 -> 32 [style=solid label="'!'"]
  35 -> 62 [style=solid label="'('"]
  35 -> 87 [style=solid label="'{'"]
  35 -> 39 [style=dashed label="robotmove"]
  35 -> 42 [style=dashed label="robotwall"]
  35 -> 43 [style=dashed label="robotexit"]
  35 -> 88 [style=dashed label="listexprs"]
  35 -> 89 [style=dashed label="vector"]
  35 -> 90 [style=dashed label="exprs"]
  35 -> 91 [style=dashed label="expr"]
  35 -> 56 [style=dashed label="const"]
  36 [label="State 36\n\l  2 func: func stmts .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . robotactions NEWLINE\l 21     | . '(' stmts ')'\l 22     | . error NEWLINE\l 23 robotactions: . robotright\l 24             | . robotleft\l 25 robotmove: . MOVE '(' expr ')'\l 26 robotright: . RIGHT\l 27 robotleft: . LEFT\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 30 iff: . IF expr NEWLINE begif stmts endif\l 39 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 54 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 55              | . error\l 56 function: . function_head B NEWLINE stmts E\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 90 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 91              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 92              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 93              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 94              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 95              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 96              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 97              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 98 declaration: . type VAR DECLARE expr\l 99            | . type VAR DECLARE vector\l100            | . type VAR DECLARE matrix\l101 assignment: . VARIABLE ASSIGN expr\l102           | . VVARIABLE ASSIGN vector\l103           | . MVARIABLE ASSIGN matrix\l104 print: . PRINT '(' expr ')'\l105      | . PRINT '(' VVARIABLE ')'\l106      | . PRINT '(' MVARIABLE ')'\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l124 type: . INT\l125     | . CINT\l126     | . VINT\l127     | . MINT\l128     | . CVINT\l129     | . CMINT\l130     | . BOOLEAN\l131     | . CBOOLEAN\l132     | . VBOOLEAN\l133     | . MBOOLEAN\l134     | . CVBOOLEAN\l135     | . CMBOOLEAN\l136 const: . INTEGER\l137      | . BOOL\l"]
  36 -> 92 [style=dotted]
  36 -> 5 [style=solid label="BOOL"]
  36 -> 6 [style=solid label="INTEGER"]
  36 -> 7 [style=solid label="VARIABLE"]
  36 -> 8 [style=solid label="VVARIABLE"]
  36 -> 9 [style=solid label="MVARIABLE"]
  36 -> 10 [style=solid label="CINT"]
  36 -> 11 [style=solid label="VINT"]
  36 -> 12 [style=solid label="MINT"]
  36 -> 13 [style=solid label="INT"]
  36 -> 14 [style=solid label="CVINT"]
  36 -> 15 [style=solid label="CMINT"]
  36 -> 16 [style=solid label="BOOLEAN"]
  36 -> 17 [style=solid label="CBOOLEAN"]
  36 -> 18 [style=solid label="VBOOLEAN"]
  36 -> 19 [style=solid label="MBOOLEAN"]
  36 -> 20 [style=solid label="CVBOOLEAN"]
  36 -> 21 [style=solid label="CMBOOLEAN"]
  36 -> 22 [style=solid label="NEWLINE"]
  36 -> 23 [style=solid label="PRINT"]
  36 -> 24 [style=solid label="IF"]
  36 -> 25 [style=solid label="FORR"]
  36 -> 26 [style=solid label="MOVE"]
  36 -> 27 [style=solid label="RIGHT"]
  36 -> 28 [style=solid label="LEFT"]
  36 -> 29 [style=solid label="ROBEX"]
  36 -> 30 [style=solid label="WALL"]
  36 -> 31 [style=solid label="'-'"]
  36 -> 32 [style=solid label="'!'"]
  36 -> 33 [style=solid label="'('"]
  36 -> 34 [style=solid label="'['"]
  36 -> 35 [style=solid label="'{'"]
  36 -> 93 [style=dashed label="stmt"]
  36 -> 38 [style=dashed label="robotactions"]
  36 -> 39 [style=dashed label="robotmove"]
  36 -> 40 [style=dashed label="robotright"]
  36 -> 41 [style=dashed label="robotleft"]
  36 -> 42 [style=dashed label="robotwall"]
  36 -> 43 [style=dashed label="robotexit"]
  36 -> 44 [style=dashed label="iff"]
  36 -> 45 [style=dashed label="forr"]
  36 -> 46 [style=dashed label="function_head"]
  36 -> 47 [style=dashed label="function"]
  36 -> 48 [style=dashed label="matrix"]
  36 -> 49 [style=dashed label="vector"]
  36 -> 50 [style=dashed label="vmdeclaration"]
  36 -> 51 [style=dashed label="declaration"]
  36 -> 52 [style=dashed label="assignment"]
  36 -> 53 [style=dashed label="print"]
  36 -> 54 [style=dashed label="expr"]
  36 -> 55 [style=dashed label="type"]
  36 -> 56 [style=dashed label="const"]
  36 -> "36R2d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, MOVE, RIGHT, LEFT, ROBEX, WALL, '-', '!', '(', '[', '{']", style=solid]
 "36R2d" [label="R2", fillcolor=5, shape=diamond, style=filled]
  36 -> "36R2" [label="[$end]", style=solid]
 "36R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  37 [label="State 37\n\l  5 stmts: stmt .\l"]
  37 -> "37R5" [style=solid]
 "37R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  38 [label="State 38\n\l 20 stmt: robotactions . NEWLINE\l"]
  38 -> 94 [style=solid label="NEWLINE"]
  39 [label="State 39\n\l109 expr: robotmove .\l"]
  39 -> "39R109" [style=solid]
 "39R109" [label="R109", fillcolor=3, shape=diamond, style=filled]
  40 [label="State 40\n\l 23 robotactions: robotright .\l"]
  40 -> "40R23" [style=solid]
 "40R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  41 [label="State 41\n\l 24 robotactions: robotleft .\l"]
  41 -> "41R24" [style=solid]
 "41R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  42 [label="State 42\n\l110 expr: robotwall .\l"]
  42 -> "42R110" [style=solid]
 "42R110" [label="R110", fillcolor=3, shape=diamond, style=filled]
  43 [label="State 43\n\l108 expr: robotexit .\l"]
  43 -> "43R108" [style=solid]
 "43R108" [label="R108", fillcolor=3, shape=diamond, style=filled]
  44 [label="State 44\n\l 17 stmt: iff . NEWLINE\l"]
  44 -> 95 [style=solid label="NEWLINE"]
  45 [label="State 45\n\l 18 stmt: forr . NEWLINE\l"]
  45 -> 96 [style=solid label="NEWLINE"]
  46 [label="State 46\n\l 56 function: function_head . B NEWLINE stmts E\l"]
  46 -> 97 [style=solid label="B"]
  47 [label="State 47\n\l 19 stmt: function . NEWLINE\l"]
  47 -> 98 [style=solid label="NEWLINE"]
  48 [label="State 48\n\l 12 stmt: matrix . NEWLINE\l 62 matrix: matrix . '*' matrix\l 63       | matrix . ELEMMULT matrix\l 64       | matrix . '\\''\l 65       | matrix . RIGHTSHIFT\l 66       | matrix . LEFTSHIFT\l 68       | matrix . ELEMMULT vector\l 69       | matrix . ELEMMULT expr\l"]
  48 -> 99 [style=solid label="NEWLINE"]
  48 -> 100 [style=solid label="ELEMMULT"]
  48 -> 101 [style=solid label="'\\''"]
  48 -> 102 [style=solid label="LEFTSHIFT"]
  48 -> 103 [style=solid label="RIGHTSHIFT"]
  48 -> 104 [style=solid label="'*'"]
  49 [label="State 49\n\l 11 stmt: vector . NEWLINE\l 67 matrix: vector . '\\''\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l"]
  49 -> 105 [style=solid label="NEWLINE"]
  49 -> 106 [style=solid label="ELEMMULT"]
  49 -> 107 [style=solid label="'\\''"]
  49 -> 108 [style=solid label="LEFTSHIFT"]
  49 -> 109 [style=solid label="RIGHTSHIFT"]
  50 [label="State 50\n\l 14 stmt: vmdeclaration . NEWLINE\l"]
  50 -> 110 [style=solid label="NEWLINE"]
  51 [label="State 51\n\l 15 stmt: declaration . NEWLINE\l"]
  51 -> 111 [style=solid label="NEWLINE"]
  52 [label="State 52\n\l 16 stmt: assignment . NEWLINE\l"]
  52 -> 112 [style=solid label="NEWLINE"]
  53 [label="State 53\n\l 13 stmt: print . NEWLINE\l"]
  53 -> 113 [style=solid label="NEWLINE"]
  54 [label="State 54\n\l 10 stmt: expr . NEWLINE\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  54 -> 114 [style=solid label="NEWLINE"]
  54 -> 115 [style=solid label="CONJUNCTION"]
  54 -> 116 [style=solid label="'<'"]
  54 -> 117 [style=solid label="'>'"]
  54 -> 118 [style=solid label="'+'"]
  54 -> 119 [style=solid label="'-'"]
  54 -> 120 [style=solid label="'/'"]
  55 [label="State 55\n\l 98 declaration: type . VAR DECLARE expr\l 99            | type . VAR DECLARE vector\l100            | type . VAR DECLARE matrix\l"]
  55 -> 121 [style=solid label="VAR"]
  56 [label="State 56\n\l107 expr: const .\l"]
  56 -> "56R107" [style=solid]
 "56R107" [label="R107", fillcolor=3, shape=diamond, style=filled]
  57 [label="State 57\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 70       | error . matrix\l 71       | . error vector\l 71       | error . vector\l 72       | . error expr\l 72       | error . expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 85       | error . vector\l 86       | . error expr\l 86       | error . expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l123     | error . expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  57 -> 57 [style=dotted]
  57 -> 5 [style=solid label="BOOL"]
  57 -> 6 [style=solid label="INTEGER"]
  57 -> 58 [style=solid label="VARIABLE"]
  57 -> 59 [style=solid label="VVARIABLE"]
  57 -> 60 [style=solid label="MVARIABLE"]
  57 -> 26 [style=solid label="MOVE"]
  57 -> 29 [style=solid label="ROBEX"]
  57 -> 30 [style=solid label="WALL"]
  57 -> 31 [style=solid label="'-'"]
  57 -> 32 [style=solid label="'!'"]
  57 -> 62 [style=solid label="'('"]
  57 -> 35 [style=solid label="'{'"]
  57 -> 39 [style=dashed label="robotmove"]
  57 -> 42 [style=dashed label="robotwall"]
  57 -> 43 [style=dashed label="robotexit"]
  57 -> 63 [style=dashed label="matrix"]
  57 -> 64 [style=dashed label="vector"]
  57 -> 65 [style=dashed label="expr"]
  57 -> 56 [style=dashed label="const"]
  58 [label="State 58\n\l111 expr: VARIABLE .\l"]
  58 -> "58R111" [style=solid]
 "58R111" [label="R111", fillcolor=3, shape=diamond, style=filled]
  59 [label="State 59\n\l 77 vector: VVARIABLE . '(' vector ',' '[' ']' ')'\l 80       | VVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l121 expr: VVARIABLE . '(' expr ')'\l"]
  59 -> 122 [style=solid label="'('"]
  59 -> "59R80" [style=solid]
 "59R80" [label="R80", fillcolor=3, shape=diamond, style=filled]
  60 [label="State 60\n\l 58 matrix: MVARIABLE . '(' vector ',' '[' ']' ')'\l 59       | MVARIABLE . '(' '[' ']' ',' vector ')'\l 60       | MVARIABLE . '(' matrix ')'\l 61       | MVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 78 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 79       | MVARIABLE . '(' '[' ']' ',' expr ')'\l122 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  60 -> 123 [style=solid label="'('"]
  60 -> "60R61" [style=solid]
 "60R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
  61 [label="State 61\n\l 22 stmt: error NEWLINE .\l"]
  61 -> "61R22" [style=solid]
 "61R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  62 [label="State 62\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l120     | '(' . expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  62 -> 72 [style=dotted]
  62 -> 5 [style=solid label="BOOL"]
  62 -> 6 [style=solid label="INTEGER"]
  62 -> 58 [style=solid label="VARIABLE"]
  62 -> 73 [style=solid label="VVARIABLE"]
  62 -> 74 [style=solid label="MVARIABLE"]
  62 -> 26 [style=solid label="MOVE"]
  62 -> 29 [style=solid label="ROBEX"]
  62 -> 30 [style=solid label="WALL"]
  62 -> 31 [style=solid label="'-'"]
  62 -> 32 [style=solid label="'!'"]
  62 -> 62 [style=solid label="'('"]
  62 -> 39 [style=dashed label="robotmove"]
  62 -> 42 [style=dashed label="robotwall"]
  62 -> 43 [style=dashed label="robotexit"]
  62 -> 124 [style=dashed label="expr"]
  62 -> 56 [style=dashed label="const"]
  63 [label="State 63\n\l 62 matrix: matrix . '*' matrix\l 63       | matrix . ELEMMULT matrix\l 64       | matrix . '\\''\l 65       | matrix . RIGHTSHIFT\l 66       | matrix . LEFTSHIFT\l 68       | matrix . ELEMMULT vector\l 69       | matrix . ELEMMULT expr\l 70       | error matrix .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l"]
  63 -> 100 [style=solid label="ELEMMULT"]
  63 -> 101 [style=solid label="'\\''"]
  63 -> 102 [style=solid label="LEFTSHIFT"]
  63 -> 103 [style=solid label="RIGHTSHIFT"]
  63 -> 104 [style=solid label="'*'"]
  63 -> "63R70d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']", style=solid]
 "63R70d" [label="R70", fillcolor=5, shape=diamond, style=filled]
  63 -> "63R70" [style=solid]
 "63R70" [label="R70", fillcolor=3, shape=diamond, style=filled]
  64 [label="State 64\n\l 67 matrix: vector . '\\''\l 71       | error vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l 85       | error vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l"]
  64 -> 106 [style=solid label="ELEMMULT"]
  64 -> 107 [style=solid label="'\\''"]
  64 -> 108 [style=solid label="LEFTSHIFT"]
  64 -> 109 [style=solid label="RIGHTSHIFT"]
  64 -> "64R71d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "64R71d" [label="R71", fillcolor=5, shape=diamond, style=filled]
  64 -> "64R71" [style=solid]
 "64R71" [label="R71", fillcolor=3, shape=diamond, style=filled]
  64 -> "64R85d" [label="[error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']", style=solid]
 "64R85d" [label="R85", fillcolor=5, shape=diamond, style=filled]
  65 [label="State 65\n\l 72 matrix: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 86 vector: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l123     | error expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']']\l"]
  65 -> 115 [style=solid label="CONJUNCTION"]
  65 -> 116 [style=solid label="'<'"]
  65 -> 117 [style=solid label="'>'"]
  65 -> 118 [style=solid label="'+'"]
  65 -> 119 [style=solid label="'-'"]
  65 -> 120 [style=solid label="'/'"]
  65 -> "65R72" [style=solid]
 "65R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
  65 -> "65R86d" [label="[error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']", style=solid]
 "65R86d" [label="R86", fillcolor=5, shape=diamond, style=filled]
  65 -> "65R123d" [label="[error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']']", style=solid]
 "65R123d" [label="R123", fillcolor=5, shape=diamond, style=filled]
  66 [label="State 66\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l101 assignment: VARIABLE ASSIGN . expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  66 -> 72 [style=dotted]
  66 -> 5 [style=solid label="BOOL"]
  66 -> 6 [style=solid label="INTEGER"]
  66 -> 58 [style=solid label="VARIABLE"]
  66 -> 73 [style=solid label="VVARIABLE"]
  66 -> 74 [style=solid label="MVARIABLE"]
  66 -> 26 [style=solid label="MOVE"]
  66 -> 29 [style=solid label="ROBEX"]
  66 -> 30 [style=solid label="WALL"]
  66 -> 31 [style=solid label="'-'"]
  66 -> 32 [style=solid label="'!'"]
  66 -> 62 [style=solid label="'('"]
  66 -> 39 [style=dashed label="robotmove"]
  66 -> 42 [style=dashed label="robotwall"]
  66 -> 43 [style=dashed label="robotexit"]
  66 -> 125 [style=dashed label="expr"]
  66 -> 56 [style=dashed label="const"]
  67 [label="State 67\n\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l102 assignment: VVARIABLE ASSIGN . vector\l"]
  67 -> 126 [style=dotted]
  67 -> 127 [style=solid label="VVARIABLE"]
  67 -> 128 [style=solid label="MVARIABLE"]
  67 -> 87 [style=solid label="'{'"]
  67 -> 129 [style=dashed label="vector"]
  68 [label="State 68\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 77       | VVARIABLE '(' . vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 90 vmdeclaration: VVARIABLE '(' . expr ')' ASSIGN expr\l 91              | VVARIABLE '(' . vector ',' '[' ']' ')' ASSIGN vector\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l121     | VVARIABLE '(' . expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  68 -> 85 [style=dotted]
  68 -> 5 [style=solid label="BOOL"]
  68 -> 6 [style=solid label="INTEGER"]
  68 -> 58 [style=solid label="VARIABLE"]
  68 -> 59 [style=solid label="VVARIABLE"]
  68 -> 86 [style=solid label="MVARIABLE"]
  68 -> 26 [style=solid label="MOVE"]
  68 -> 29 [style=solid label="ROBEX"]
  68 -> 30 [style=solid label="WALL"]
  68 -> 31 [style=solid label="'-'"]
  68 -> 32 [style=solid label="'!'"]
  68 -> 62 [style=solid label="'('"]
  68 -> 87 [style=solid label="'{'"]
  68 -> 39 [style=dashed label="robotmove"]
  68 -> 42 [style=dashed label="robotwall"]
  68 -> 43 [style=dashed label="robotexit"]
  68 -> 130 [style=dashed label="vector"]
  68 -> 131 [style=dashed label="expr"]
  68 -> 56 [style=dashed label="const"]
  69 [label="State 69\n\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l103 assignment: MVARIABLE ASSIGN . matrix\l"]
  69 -> 132 [style=dotted]
  69 -> 127 [style=solid label="VVARIABLE"]
  69 -> 133 [style=solid label="MVARIABLE"]
  69 -> 35 [style=solid label="'{'"]
  69 -> 134 [style=dashed label="matrix"]
  69 -> 135 [style=dashed label="vector"]
  70 [label="State 70\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 58       | MVARIABLE '(' . vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 59       | MVARIABLE '(' . '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 60       | MVARIABLE '(' . matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 78       | MVARIABLE '(' . expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 79       | MVARIABLE '(' . '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 92 vmdeclaration: MVARIABLE '(' . expr ',' expr ')' ASSIGN expr\l 93              | MVARIABLE '(' . expr ',' '[' ']' ')' ASSIGN vector\l 94              | MVARIABLE '(' . '[' ']' ',' expr ')' ASSIGN vector\l 95              | MVARIABLE '(' . vector ',' '[' ']' ')' ASSIGN matrix\l 96              | MVARIABLE '(' . '[' ']' ',' vector ')' ASSIGN matrix\l 97              | MVARIABLE '(' . matrix ')' ASSIGN matrix\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l122     | MVARIABLE '(' . expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  70 -> 57 [style=dotted]
  70 -> 5 [style=solid label="BOOL"]
  70 -> 6 [style=solid label="INTEGER"]
  70 -> 58 [style=solid label="VARIABLE"]
  70 -> 59 [style=solid label="VVARIABLE"]
  70 -> 60 [style=solid label="MVARIABLE"]
  70 -> 26 [style=solid label="MOVE"]
  70 -> 29 [style=solid label="ROBEX"]
  70 -> 30 [style=solid label="WALL"]
  70 -> 31 [style=solid label="'-'"]
  70 -> 32 [style=solid label="'!'"]
  70 -> 62 [style=solid label="'('"]
  70 -> 136 [style=solid label="'['"]
  70 -> 35 [style=solid label="'{'"]
  70 -> 39 [style=dashed label="robotmove"]
  70 -> 42 [style=dashed label="robotwall"]
  70 -> 43 [style=dashed label="robotexit"]
  70 -> 137 [style=dashed label="matrix"]
  70 -> 138 [style=dashed label="vector"]
  70 -> 139 [style=dashed label="expr"]
  70 -> 56 [style=dashed label="const"]
  71 [label="State 71\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l104 print: PRINT '(' . expr ')'\l105      | PRINT '(' . VVARIABLE ')'\l106      | PRINT '(' . MVARIABLE ')'\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  71 -> 72 [style=dotted]
  71 -> 5 [style=solid label="BOOL"]
  71 -> 6 [style=solid label="INTEGER"]
  71 -> 58 [style=solid label="VARIABLE"]
  71 -> 140 [style=solid label="VVARIABLE"]
  71 -> 141 [style=solid label="MVARIABLE"]
  71 -> 26 [style=solid label="MOVE"]
  71 -> 29 [style=solid label="ROBEX"]
  71 -> 30 [style=solid label="WALL"]
  71 -> 31 [style=solid label="'-'"]
  71 -> 32 [style=solid label="'!'"]
  71 -> 62 [style=solid label="'('"]
  71 -> 39 [style=dashed label="robotmove"]
  71 -> 42 [style=dashed label="robotwall"]
  71 -> 43 [style=dashed label="robotexit"]
  71 -> 142 [style=dashed label="expr"]
  71 -> 56 [style=dashed label="const"]
  72 [label="State 72\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l123     | error . expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  72 -> 72 [style=dotted]
  72 -> 5 [style=solid label="BOOL"]
  72 -> 6 [style=solid label="INTEGER"]
  72 -> 58 [style=solid label="VARIABLE"]
  72 -> 73 [style=solid label="VVARIABLE"]
  72 -> 74 [style=solid label="MVARIABLE"]
  72 -> 26 [style=solid label="MOVE"]
  72 -> 29 [style=solid label="ROBEX"]
  72 -> 30 [style=solid label="WALL"]
  72 -> 31 [style=solid label="'-'"]
  72 -> 32 [style=solid label="'!'"]
  72 -> 62 [style=solid label="'('"]
  72 -> 39 [style=dashed label="robotmove"]
  72 -> 42 [style=dashed label="robotwall"]
  72 -> 43 [style=dashed label="robotexit"]
  72 -> 143 [style=dashed label="expr"]
  72 -> 56 [style=dashed label="const"]
  73 [label="State 73\n\l121 expr: VVARIABLE . '(' expr ')'\l"]
  73 -> 144 [style=solid label="'('"]
  74 [label="State 74\n\l122 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  74 -> 145 [style=solid label="'('"]
  75 [label="State 75\n\l 30 iff: IF expr . NEWLINE begif stmts endif\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  75 -> 146 [style=solid label="NEWLINE"]
  75 -> 115 [style=solid label="CONJUNCTION"]
  75 -> 116 [style=solid label="'<'"]
  75 -> 117 [style=solid label="'>'"]
  75 -> 118 [style=solid label="'+'"]
  75 -> 119 [style=solid label="'-'"]
  75 -> 120 [style=solid label="'/'"]
  76 [label="State 76\n\l 39 forr: FORR declaration . DOUBLEDOT expr NEWLINE begfor stmts endfor\l"]
  76 -> 147 [style=solid label="DOUBLEDOT"]
  77 [label="State 77\n\l 25 robotmove: . MOVE '(' expr ')'\l 25          | MOVE '(' . expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  77 -> 72 [style=dotted]
  77 -> 5 [style=solid label="BOOL"]
  77 -> 6 [style=solid label="INTEGER"]
  77 -> 58 [style=solid label="VARIABLE"]
  77 -> 73 [style=solid label="VVARIABLE"]
  77 -> 74 [style=solid label="MVARIABLE"]
  77 -> 26 [style=solid label="MOVE"]
  77 -> 29 [style=solid label="ROBEX"]
  77 -> 30 [style=solid label="WALL"]
  77 -> 31 [style=solid label="'-'"]
  77 -> 32 [style=solid label="'!'"]
  77 -> 62 [style=solid label="'('"]
  77 -> 39 [style=dashed label="robotmove"]
  77 -> 42 [style=dashed label="robotwall"]
  77 -> 43 [style=dashed label="robotexit"]
  77 -> 148 [style=dashed label="expr"]
  77 -> 56 [style=dashed label="const"]
  78 [label="State 78\n\l112 expr: '-' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l113     | expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  78 -> 115 [style=solid label="CONJUNCTION"]
  78 -> "78R112d" [label="[CONJUNCTION]", style=solid]
 "78R112d" [label="R112", fillcolor=5, shape=diamond, style=filled]
  78 -> "78R112" [style=solid]
 "78R112" [label="R112", fillcolor=3, shape=diamond, style=filled]
  79 [label="State 79\n\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l118     | '!' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l119     | expr . CONJUNCTION expr\l"]
  79 -> 115 [style=solid label="CONJUNCTION"]
  79 -> "79R118d" [label="[CONJUNCTION]", style=solid]
 "79R118d" [label="R118", fillcolor=5, shape=diamond, style=filled]
  79 -> "79R118" [style=solid]
 "79R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
  80 [label="State 80\n\l  8 stmts: error .  [error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, E, MOVE, RIGHT, LEFT, ROBEX, WALL, ENDIF, ENDFOR, '-', '!', '(', ')', '[', '{']\l 22 stmt: error . NEWLINE\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 55 function_head: error .  [B]\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 70       | error . matrix\l 71       | . error vector\l 71       | error . vector\l 72       | . error expr\l 72       | error . expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 85       | error . vector\l 86       | . error expr\l 86       | error . expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l123     | error . expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  80 -> 57 [style=dotted]
  80 -> 5 [style=solid label="BOOL"]
  80 -> 6 [style=solid label="INTEGER"]
  80 -> 58 [style=solid label="VARIABLE"]
  80 -> 59 [style=solid label="VVARIABLE"]
  80 -> 60 [style=solid label="MVARIABLE"]
  80 -> 61 [style=solid label="NEWLINE"]
  80 -> 26 [style=solid label="MOVE"]
  80 -> 29 [style=solid label="ROBEX"]
  80 -> 30 [style=solid label="WALL"]
  80 -> 31 [style=solid label="'-'"]
  80 -> 32 [style=solid label="'!'"]
  80 -> 62 [style=solid label="'('"]
  80 -> 35 [style=solid label="'{'"]
  80 -> 39 [style=dashed label="robotmove"]
  80 -> 42 [style=dashed label="robotwall"]
  80 -> 43 [style=dashed label="robotexit"]
  80 -> 63 [style=dashed label="matrix"]
  80 -> 64 [style=dashed label="vector"]
  80 -> 65 [style=dashed label="expr"]
  80 -> 56 [style=dashed label="const"]
  80 -> "80R8d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, NEWLINE, MOVE, ROBEX, WALL, '-', '!', '(', '{']", style=solid]
 "80R8d" [label="R8", fillcolor=5, shape=diamond, style=filled]
  80 -> "80R8" [label="[CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, PRINT, IF, FORR, E, RIGHT, LEFT, ENDIF, ENDFOR, ')', '[']", style=solid]
 "80R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  80 -> "80R55" [label="[B]", style=solid]
 "80R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  81 [label="State 81\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . robotactions NEWLINE\l 21     | . '(' stmts ')'\l 21     | '(' stmts . ')'\l 22     | . error NEWLINE\l 23 robotactions: . robotright\l 24             | . robotleft\l 25 robotmove: . MOVE '(' expr ')'\l 26 robotright: . RIGHT\l 27 robotleft: . LEFT\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 30 iff: . IF expr NEWLINE begif stmts endif\l 39 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 54 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 55              | . error\l 56 function: . function_head B NEWLINE stmts E\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 90 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 91              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 92              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 93              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 94              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 95              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 96              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 97              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 98 declaration: . type VAR DECLARE expr\l 99            | . type VAR DECLARE vector\l100            | . type VAR DECLARE matrix\l101 assignment: . VARIABLE ASSIGN expr\l102           | . VVARIABLE ASSIGN vector\l103           | . MVARIABLE ASSIGN matrix\l104 print: . PRINT '(' expr ')'\l105      | . PRINT '(' VVARIABLE ')'\l106      | . PRINT '(' MVARIABLE ')'\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l124 type: . INT\l125     | . CINT\l126     | . VINT\l127     | . MINT\l128     | . CVINT\l129     | . CMINT\l130     | . BOOLEAN\l131     | . CBOOLEAN\l132     | . VBOOLEAN\l133     | . MBOOLEAN\l134     | . CVBOOLEAN\l135     | . CMBOOLEAN\l136 const: . INTEGER\l137      | . BOOL\l"]
  81 -> 92 [style=dotted]
  81 -> 5 [style=solid label="BOOL"]
  81 -> 6 [style=solid label="INTEGER"]
  81 -> 7 [style=solid label="VARIABLE"]
  81 -> 8 [style=solid label="VVARIABLE"]
  81 -> 9 [style=solid label="MVARIABLE"]
  81 -> 10 [style=solid label="CINT"]
  81 -> 11 [style=solid label="VINT"]
  81 -> 12 [style=solid label="MINT"]
  81 -> 13 [style=solid label="INT"]
  81 -> 14 [style=solid label="CVINT"]
  81 -> 15 [style=solid label="CMINT"]
  81 -> 16 [style=solid label="BOOLEAN"]
  81 -> 17 [style=solid label="CBOOLEAN"]
  81 -> 18 [style=solid label="VBOOLEAN"]
  81 -> 19 [style=solid label="MBOOLEAN"]
  81 -> 20 [style=solid label="CVBOOLEAN"]
  81 -> 21 [style=solid label="CMBOOLEAN"]
  81 -> 22 [style=solid label="NEWLINE"]
  81 -> 23 [style=solid label="PRINT"]
  81 -> 24 [style=solid label="IF"]
  81 -> 25 [style=solid label="FORR"]
  81 -> 26 [style=solid label="MOVE"]
  81 -> 27 [style=solid label="RIGHT"]
  81 -> 28 [style=solid label="LEFT"]
  81 -> 29 [style=solid label="ROBEX"]
  81 -> 30 [style=solid label="WALL"]
  81 -> 31 [style=solid label="'-'"]
  81 -> 32 [style=solid label="'!'"]
  81 -> 33 [style=solid label="'('"]
  81 -> 149 [style=solid label="')'"]
  81 -> 34 [style=solid label="'['"]
  81 -> 35 [style=solid label="'{'"]
  81 -> 93 [style=dashed label="stmt"]
  81 -> 38 [style=dashed label="robotactions"]
  81 -> 39 [style=dashed label="robotmove"]
  81 -> 40 [style=dashed label="robotright"]
  81 -> 41 [style=dashed label="robotleft"]
  81 -> 42 [style=dashed label="robotwall"]
  81 -> 43 [style=dashed label="robotexit"]
  81 -> 44 [style=dashed label="iff"]
  81 -> 45 [style=dashed label="forr"]
  81 -> 46 [style=dashed label="function_head"]
  81 -> 47 [style=dashed label="function"]
  81 -> 48 [style=dashed label="matrix"]
  81 -> 49 [style=dashed label="vector"]
  81 -> 50 [style=dashed label="vmdeclaration"]
  81 -> 51 [style=dashed label="declaration"]
  81 -> 52 [style=dashed label="assignment"]
  81 -> 53 [style=dashed label="print"]
  81 -> 54 [style=dashed label="expr"]
  81 -> 55 [style=dashed label="type"]
  81 -> 56 [style=dashed label="const"]
  82 [label="State 82\n\l 10 stmt: expr . NEWLINE\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l120     | '(' expr . ')'\l"]
  82 -> 114 [style=solid label="NEWLINE"]
  82 -> 115 [style=solid label="CONJUNCTION"]
  82 -> 116 [style=solid label="'<'"]
  82 -> 117 [style=solid label="'>'"]
  82 -> 118 [style=solid label="'+'"]
  82 -> 119 [style=solid label="'-'"]
  82 -> 120 [style=solid label="'/'"]
  82 -> 150 [style=solid label="')'"]
  83 [label="State 83\n\l 41 return_func: return_func . ',' type VAR\l 42            | return_func . error\l 54 function_head: '[' return_func . ']' DECLARE FUNC VAR '(' args_func ')'\l"]
  83 -> 151 [style=dotted]
  83 -> 152 [style=solid label="','"]
  83 -> 153 [style=solid label="']'"]
  84 [label="State 84\n\l 40 return_func: type . VAR\l"]
  84 -> 154 [style=solid label="VAR"]
  85 [label="State 85\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 85       | error . vector\l 86       | . error expr\l 86       | error . expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l123     | error . expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  85 -> 85 [style=dotted]
  85 -> 5 [style=solid label="BOOL"]
  85 -> 6 [style=solid label="INTEGER"]
  85 -> 58 [style=solid label="VARIABLE"]
  85 -> 59 [style=solid label="VVARIABLE"]
  85 -> 86 [style=solid label="MVARIABLE"]
  85 -> 26 [style=solid label="MOVE"]
  85 -> 29 [style=solid label="ROBEX"]
  85 -> 30 [style=solid label="WALL"]
  85 -> 31 [style=solid label="'-'"]
  85 -> 32 [style=solid label="'!'"]
  85 -> 62 [style=solid label="'('"]
  85 -> 87 [style=solid label="'{'"]
  85 -> 39 [style=dashed label="robotmove"]
  85 -> 42 [style=dashed label="robotwall"]
  85 -> 43 [style=dashed label="robotexit"]
  85 -> 155 [style=dashed label="vector"]
  85 -> 156 [style=dashed label="expr"]
  85 -> 56 [style=dashed label="const"]
  86 [label="State 86\n\l 78 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 79       | MVARIABLE . '(' '[' ']' ',' expr ')'\l122 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  86 -> 157 [style=solid label="'('"]
  87 [label="State 87\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 76 vector: '{' . exprs '}'\l 87 exprs: . expr ',' expr\l 88      | . exprs ',' expr\l 89      | . exprs error\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  87 -> 72 [style=dotted]
  87 -> 5 [style=solid label="BOOL"]
  87 -> 6 [style=solid label="INTEGER"]
  87 -> 58 [style=solid label="VARIABLE"]
  87 -> 73 [style=solid label="VVARIABLE"]
  87 -> 74 [style=solid label="MVARIABLE"]
  87 -> 26 [style=solid label="MOVE"]
  87 -> 29 [style=solid label="ROBEX"]
  87 -> 30 [style=solid label="WALL"]
  87 -> 31 [style=solid label="'-'"]
  87 -> 32 [style=solid label="'!'"]
  87 -> 62 [style=solid label="'('"]
  87 -> 39 [style=dashed label="robotmove"]
  87 -> 42 [style=dashed label="robotwall"]
  87 -> 43 [style=dashed label="robotexit"]
  87 -> 90 [style=dashed label="exprs"]
  87 -> 91 [style=dashed label="expr"]
  87 -> 56 [style=dashed label="const"]
  88 [label="State 88\n\l 57 matrix: '{' listexprs . '}'\l 74 listexprs: listexprs . ',' vector\l 75          | listexprs . error\l"]
  88 -> 158 [style=dotted]
  88 -> 159 [style=solid label="','"]
  88 -> 160 [style=solid label="'}'"]
  89 [label="State 89\n\l 73 listexprs: vector . ',' vector\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l"]
  89 -> 106 [style=solid label="ELEMMULT"]
  89 -> 108 [style=solid label="LEFTSHIFT"]
  89 -> 109 [style=solid label="RIGHTSHIFT"]
  89 -> 161 [style=solid label="','"]
  90 [label="State 90\n\l 76 vector: '{' exprs . '}'\l 88 exprs: exprs . ',' expr\l 89      | exprs . error\l"]
  90 -> 162 [style=dotted]
  90 -> 163 [style=solid label="','"]
  90 -> 164 [style=solid label="'}'"]
  91 [label="State 91\n\l 87 exprs: expr . ',' expr\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  91 -> 115 [style=solid label="CONJUNCTION"]
  91 -> 165 [style=solid label="','"]
  91 -> 116 [style=solid label="'<'"]
  91 -> 117 [style=solid label="'>'"]
  91 -> 118 [style=solid label="'+'"]
  91 -> 119 [style=solid label="'-'"]
  91 -> 120 [style=solid label="'/'"]
  92 [label="State 92\n\l  7 stmts: stmts error .  [$end, error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, NEWLINE, PRINT, IF, FORR, E, MOVE, RIGHT, LEFT, ROBEX, WALL, ENDIF, ENDFOR, '-', '!', '(', ')', '[', '{']\l 22 stmt: error . NEWLINE\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 55 function_head: error .  [B]\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 70       | error . matrix\l 71       | . error vector\l 71       | error . vector\l 72       | . error expr\l 72       | error . expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 85       | error . vector\l 86       | . error expr\l 86       | error . expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l123     | error . expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  92 -> 57 [style=dotted]
  92 -> 5 [style=solid label="BOOL"]
  92 -> 6 [style=solid label="INTEGER"]
  92 -> 58 [style=solid label="VARIABLE"]
  92 -> 59 [style=solid label="VVARIABLE"]
  92 -> 60 [style=solid label="MVARIABLE"]
  92 -> 61 [style=solid label="NEWLINE"]
  92 -> 26 [style=solid label="MOVE"]
  92 -> 29 [style=solid label="ROBEX"]
  92 -> 30 [style=solid label="WALL"]
  92 -> 31 [style=solid label="'-'"]
  92 -> 32 [style=solid label="'!'"]
  92 -> 62 [style=solid label="'('"]
  92 -> 35 [style=solid label="'{'"]
  92 -> 39 [style=dashed label="robotmove"]
  92 -> 42 [style=dashed label="robotwall"]
  92 -> 43 [style=dashed label="robotexit"]
  92 -> 63 [style=dashed label="matrix"]
  92 -> 64 [style=dashed label="vector"]
  92 -> 65 [style=dashed label="expr"]
  92 -> 56 [style=dashed label="const"]
  92 -> "92R7d" [label="[error, BOOL, INTEGER, VARIABLE, VVARIABLE, MVARIABLE, NEWLINE, MOVE, ROBEX, WALL, '-', '!', '(', '{']", style=solid]
 "92R7d" [label="R7", fillcolor=5, shape=diamond, style=filled]
  92 -> "92R7" [label="[$end, CINT, VINT, MINT, INT, CVINT, CMINT, BOOLEAN, CBOOLEAN, VBOOLEAN, MBOOLEAN, CVBOOLEAN, CMBOOLEAN, PRINT, IF, FORR, E, RIGHT, LEFT, ENDIF, ENDFOR, ')', '[']", style=solid]
 "92R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  92 -> "92R55" [label="[B]", style=solid]
 "92R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  93 [label="State 93\n\l  6 stmts: stmts stmt .\l"]
  93 -> "93R6" [style=solid]
 "93R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  94 [label="State 94\n\l 20 stmt: robotactions NEWLINE .\l"]
  94 -> "94R20" [style=solid]
 "94R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  95 [label="State 95\n\l 17 stmt: iff NEWLINE .\l"]
  95 -> "95R17" [style=solid]
 "95R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  96 [label="State 96\n\l 18 stmt: forr NEWLINE .\l"]
  96 -> "96R18" [style=solid]
 "96R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  97 [label="State 97\n\l 56 function: function_head B . NEWLINE stmts E\l"]
  97 -> 166 [style=solid label="NEWLINE"]
  98 [label="State 98\n\l 19 stmt: function NEWLINE .\l"]
  98 -> "98R19" [style=solid]
 "98R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  99 [label="State 99\n\l 12 stmt: matrix NEWLINE .\l"]
  99 -> "99R12" [style=solid]
 "99R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  100 [label="State 100\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 63       | matrix ELEMMULT . matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 68       | matrix ELEMMULT . vector\l 69       | . matrix ELEMMULT expr\l 69       | matrix ELEMMULT . expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  100 -> 57 [style=dotted]
  100 -> 5 [style=solid label="BOOL"]
  100 -> 6 [style=solid label="INTEGER"]
  100 -> 58 [style=solid label="VARIABLE"]
  100 -> 59 [style=solid label="VVARIABLE"]
  100 -> 60 [style=solid label="MVARIABLE"]
  100 -> 26 [style=solid label="MOVE"]
  100 -> 29 [style=solid label="ROBEX"]
  100 -> 30 [style=solid label="WALL"]
  100 -> 31 [style=solid label="'-'"]
  100 -> 32 [style=solid label="'!'"]
  100 -> 62 [style=solid label="'('"]
  100 -> 35 [style=solid label="'{'"]
  100 -> 39 [style=dashed label="robotmove"]
  100 -> 42 [style=dashed label="robotwall"]
  100 -> 43 [style=dashed label="robotexit"]
  100 -> 167 [style=dashed label="matrix"]
  100 -> 168 [style=dashed label="vector"]
  100 -> 169 [style=dashed label="expr"]
  100 -> 56 [style=dashed label="const"]
  101 [label="State 101\n\l 64 matrix: matrix '\\'' .\l"]
  101 -> "101R64" [style=solid]
 "101R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
  102 [label="State 102\n\l 66 matrix: matrix LEFTSHIFT .\l"]
  102 -> "102R66" [style=solid]
 "102R66" [label="R66", fillcolor=3, shape=diamond, style=filled]
  103 [label="State 103\n\l 65 matrix: matrix RIGHTSHIFT .\l"]
  103 -> "103R65" [style=solid]
 "103R65" [label="R65", fillcolor=3, shape=diamond, style=filled]
  104 [label="State 104\n\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 62       | matrix '*' . matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l"]
  104 -> 132 [style=dotted]
  104 -> 127 [style=solid label="VVARIABLE"]
  104 -> 133 [style=solid label="MVARIABLE"]
  104 -> 35 [style=solid label="'{'"]
  104 -> 170 [style=dashed label="matrix"]
  104 -> 135 [style=dashed label="vector"]
  105 [label="State 105\n\l 11 stmt: vector NEWLINE .\l"]
  105 -> "105R11" [style=solid]
 "105R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  106 [label="State 106\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 81       | vector ELEMMULT . vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 84       | vector ELEMMULT . expr\l 85       | . error vector\l 86       | . error expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  106 -> 85 [style=dotted]
  106 -> 5 [style=solid label="BOOL"]
  106 -> 6 [style=solid label="INTEGER"]
  106 -> 58 [style=solid label="VARIABLE"]
  106 -> 59 [style=solid label="VVARIABLE"]
  106 -> 86 [style=solid label="MVARIABLE"]
  106 -> 26 [style=solid label="MOVE"]
  106 -> 29 [style=solid label="ROBEX"]
  106 -> 30 [style=solid label="WALL"]
  106 -> 31 [style=solid label="'-'"]
  106 -> 32 [style=solid label="'!'"]
  106 -> 62 [style=solid label="'('"]
  106 -> 87 [style=solid label="'{'"]
  106 -> 39 [style=dashed label="robotmove"]
  106 -> 42 [style=dashed label="robotwall"]
  106 -> 43 [style=dashed label="robotexit"]
  106 -> 171 [style=dashed label="vector"]
  106 -> 172 [style=dashed label="expr"]
  106 -> 56 [style=dashed label="const"]
  107 [label="State 107\n\l 67 matrix: vector '\\'' .\l"]
  107 -> "107R67" [style=solid]
 "107R67" [label="R67", fillcolor=3, shape=diamond, style=filled]
  108 [label="State 108\n\l 83 vector: vector LEFTSHIFT .\l"]
  108 -> "108R83" [style=solid]
 "108R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  109 [label="State 109\n\l 82 vector: vector RIGHTSHIFT .\l"]
  109 -> "109R82" [style=solid]
 "109R82" [label="R82", fillcolor=3, shape=diamond, style=filled]
  110 [label="State 110\n\l 14 stmt: vmdeclaration NEWLINE .\l"]
  110 -> "110R14" [style=solid]
 "110R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  111 [label="State 111\n\l 15 stmt: declaration NEWLINE .\l"]
  111 -> "111R15" [style=solid]
 "111R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  112 [label="State 112\n\l 16 stmt: assignment NEWLINE .\l"]
  112 -> "112R16" [style=solid]
 "112R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  113 [label="State 113\n\l 13 stmt: print NEWLINE .\l"]
  113 -> "113R13" [style=solid]
 "113R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  114 [label="State 114\n\l 10 stmt: expr NEWLINE .\l"]
  114 -> "114R10" [style=solid]
 "114R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  115 [label="State 115\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l119     | expr CONJUNCTION . expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  115 -> 72 [style=dotted]
  115 -> 5 [style=solid label="BOOL"]
  115 -> 6 [style=solid label="INTEGER"]
  115 -> 58 [style=solid label="VARIABLE"]
  115 -> 73 [style=solid label="VVARIABLE"]
  115 -> 74 [style=solid label="MVARIABLE"]
  115 -> 26 [style=solid label="MOVE"]
  115 -> 29 [style=solid label="ROBEX"]
  115 -> 30 [style=solid label="WALL"]
  115 -> 31 [style=solid label="'-'"]
  115 -> 32 [style=solid label="'!'"]
  115 -> 62 [style=solid label="'('"]
  115 -> 39 [style=dashed label="robotmove"]
  115 -> 42 [style=dashed label="robotwall"]
  115 -> 43 [style=dashed label="robotexit"]
  115 -> 173 [style=dashed label="expr"]
  115 -> 56 [style=dashed label="const"]
  116 [label="State 116\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l116     | expr '<' . expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  116 -> 72 [style=dotted]
  116 -> 5 [style=solid label="BOOL"]
  116 -> 6 [style=solid label="INTEGER"]
  116 -> 58 [style=solid label="VARIABLE"]
  116 -> 73 [style=solid label="VVARIABLE"]
  116 -> 74 [style=solid label="MVARIABLE"]
  116 -> 26 [style=solid label="MOVE"]
  116 -> 29 [style=solid label="ROBEX"]
  116 -> 30 [style=solid label="WALL"]
  116 -> 31 [style=solid label="'-'"]
  116 -> 32 [style=solid label="'!'"]
  116 -> 62 [style=solid label="'('"]
  116 -> 39 [style=dashed label="robotmove"]
  116 -> 42 [style=dashed label="robotwall"]
  116 -> 43 [style=dashed label="robotexit"]
  116 -> 174 [style=dashed label="expr"]
  116 -> 56 [style=dashed label="const"]
  117 [label="State 117\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l117     | expr '>' . expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  117 -> 72 [style=dotted]
  117 -> 5 [style=solid label="BOOL"]
  117 -> 6 [style=solid label="INTEGER"]
  117 -> 58 [style=solid label="VARIABLE"]
  117 -> 73 [style=solid label="VVARIABLE"]
  117 -> 74 [style=solid label="MVARIABLE"]
  117 -> 26 [style=solid label="MOVE"]
  117 -> 29 [style=solid label="ROBEX"]
  117 -> 30 [style=solid label="WALL"]
  117 -> 31 [style=solid label="'-'"]
  117 -> 32 [style=solid label="'!'"]
  117 -> 62 [style=solid label="'('"]
  117 -> 39 [style=dashed label="robotmove"]
  117 -> 42 [style=dashed label="robotwall"]
  117 -> 43 [style=dashed label="robotexit"]
  117 -> 175 [style=dashed label="expr"]
  117 -> 56 [style=dashed label="const"]
  118 [label="State 118\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l113     | expr '+' . expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  118 -> 72 [style=dotted]
  118 -> 5 [style=solid label="BOOL"]
  118 -> 6 [style=solid label="INTEGER"]
  118 -> 58 [style=solid label="VARIABLE"]
  118 -> 73 [style=solid label="VVARIABLE"]
  118 -> 74 [style=solid label="MVARIABLE"]
  118 -> 26 [style=solid label="MOVE"]
  118 -> 29 [style=solid label="ROBEX"]
  118 -> 30 [style=solid label="WALL"]
  118 -> 31 [style=solid label="'-'"]
  118 -> 32 [style=solid label="'!'"]
  118 -> 62 [style=solid label="'('"]
  118 -> 39 [style=dashed label="robotmove"]
  118 -> 42 [style=dashed label="robotwall"]
  118 -> 43 [style=dashed label="robotexit"]
  118 -> 176 [style=dashed label="expr"]
  118 -> 56 [style=dashed label="const"]
  119 [label="State 119\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l114     | expr '-' . expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  119 -> 72 [style=dotted]
  119 -> 5 [style=solid label="BOOL"]
  119 -> 6 [style=solid label="INTEGER"]
  119 -> 58 [style=solid label="VARIABLE"]
  119 -> 73 [style=solid label="VVARIABLE"]
  119 -> 74 [style=solid label="MVARIABLE"]
  119 -> 26 [style=solid label="MOVE"]
  119 -> 29 [style=solid label="ROBEX"]
  119 -> 30 [style=solid label="WALL"]
  119 -> 31 [style=solid label="'-'"]
  119 -> 32 [style=solid label="'!'"]
  119 -> 62 [style=solid label="'('"]
  119 -> 39 [style=dashed label="robotmove"]
  119 -> 42 [style=dashed label="robotwall"]
  119 -> 43 [style=dashed label="robotexit"]
  119 -> 177 [style=dashed label="expr"]
  119 -> 56 [style=dashed label="const"]
  120 [label="State 120\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l115     | expr '/' . expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  120 -> 72 [style=dotted]
  120 -> 5 [style=solid label="BOOL"]
  120 -> 6 [style=solid label="INTEGER"]
  120 -> 58 [style=solid label="VARIABLE"]
  120 -> 73 [style=solid label="VVARIABLE"]
  120 -> 74 [style=solid label="MVARIABLE"]
  120 -> 26 [style=solid label="MOVE"]
  120 -> 29 [style=solid label="ROBEX"]
  120 -> 30 [style=solid label="WALL"]
  120 -> 31 [style=solid label="'-'"]
  120 -> 32 [style=solid label="'!'"]
  120 -> 62 [style=solid label="'('"]
  120 -> 39 [style=dashed label="robotmove"]
  120 -> 42 [style=dashed label="robotwall"]
  120 -> 43 [style=dashed label="robotexit"]
  120 -> 178 [style=dashed label="expr"]
  120 -> 56 [style=dashed label="const"]
  121 [label="State 121\n\l 98 declaration: type VAR . DECLARE expr\l 99            | type VAR . DECLARE vector\l100            | type VAR . DECLARE matrix\l"]
  121 -> 179 [style=solid label="DECLARE"]
  122 [label="State 122\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 77       | VVARIABLE '(' . vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l121     | VVARIABLE '(' . expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  122 -> 85 [style=dotted]
  122 -> 5 [style=solid label="BOOL"]
  122 -> 6 [style=solid label="INTEGER"]
  122 -> 58 [style=solid label="VARIABLE"]
  122 -> 59 [style=solid label="VVARIABLE"]
  122 -> 86 [style=solid label="MVARIABLE"]
  122 -> 26 [style=solid label="MOVE"]
  122 -> 29 [style=solid label="ROBEX"]
  122 -> 30 [style=solid label="WALL"]
  122 -> 31 [style=solid label="'-'"]
  122 -> 32 [style=solid label="'!'"]
  122 -> 62 [style=solid label="'('"]
  122 -> 87 [style=solid label="'{'"]
  122 -> 39 [style=dashed label="robotmove"]
  122 -> 42 [style=dashed label="robotwall"]
  122 -> 43 [style=dashed label="robotexit"]
  122 -> 180 [style=dashed label="vector"]
  122 -> 181 [style=dashed label="expr"]
  122 -> 56 [style=dashed label="const"]
  123 [label="State 123\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 58       | MVARIABLE '(' . vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 59       | MVARIABLE '(' . '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 60       | MVARIABLE '(' . matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 78       | MVARIABLE '(' . expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 79       | MVARIABLE '(' . '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l122     | MVARIABLE '(' . expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  123 -> 57 [style=dotted]
  123 -> 5 [style=solid label="BOOL"]
  123 -> 6 [style=solid label="INTEGER"]
  123 -> 58 [style=solid label="VARIABLE"]
  123 -> 59 [style=solid label="VVARIABLE"]
  123 -> 60 [style=solid label="MVARIABLE"]
  123 -> 26 [style=solid label="MOVE"]
  123 -> 29 [style=solid label="ROBEX"]
  123 -> 30 [style=solid label="WALL"]
  123 -> 31 [style=solid label="'-'"]
  123 -> 32 [style=solid label="'!'"]
  123 -> 62 [style=solid label="'('"]
  123 -> 182 [style=solid label="'['"]
  123 -> 35 [style=solid label="'{'"]
  123 -> 39 [style=dashed label="robotmove"]
  123 -> 42 [style=dashed label="robotwall"]
  123 -> 43 [style=dashed label="robotexit"]
  123 -> 183 [style=dashed label="matrix"]
  123 -> 184 [style=dashed label="vector"]
  123 -> 185 [style=dashed label="expr"]
  123 -> 56 [style=dashed label="const"]
  124 [label="State 124\n\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l120     | '(' expr . ')'\l"]
  124 -> 115 [style=solid label="CONJUNCTION"]
  124 -> 116 [style=solid label="'<'"]
  124 -> 117 [style=solid label="'>'"]
  124 -> 118 [style=solid label="'+'"]
  124 -> 119 [style=solid label="'-'"]
  124 -> 120 [style=solid label="'/'"]
  124 -> 150 [style=solid label="')'"]
  125 [label="State 125\n\l101 assignment: VARIABLE ASSIGN expr .  [NEWLINE]\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  125 -> 115 [style=solid label="CONJUNCTION"]
  125 -> 116 [style=solid label="'<'"]
  125 -> 117 [style=solid label="'>'"]
  125 -> 118 [style=solid label="'+'"]
  125 -> 119 [style=solid label="'-'"]
  125 -> 120 [style=solid label="'/'"]
  125 -> "125R101" [style=solid]
 "125R101" [label="R101", fillcolor=3, shape=diamond, style=filled]
  126 [label="State 126\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 85       | error . vector\l 86       | . error expr\l 86       | error . expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  126 -> 85 [style=dotted]
  126 -> 5 [style=solid label="BOOL"]
  126 -> 6 [style=solid label="INTEGER"]
  126 -> 58 [style=solid label="VARIABLE"]
  126 -> 59 [style=solid label="VVARIABLE"]
  126 -> 86 [style=solid label="MVARIABLE"]
  126 -> 26 [style=solid label="MOVE"]
  126 -> 29 [style=solid label="ROBEX"]
  126 -> 30 [style=solid label="WALL"]
  126 -> 31 [style=solid label="'-'"]
  126 -> 32 [style=solid label="'!'"]
  126 -> 62 [style=solid label="'('"]
  126 -> 87 [style=solid label="'{'"]
  126 -> 39 [style=dashed label="robotmove"]
  126 -> 42 [style=dashed label="robotwall"]
  126 -> 43 [style=dashed label="robotexit"]
  126 -> 155 [style=dashed label="vector"]
  126 -> 186 [style=dashed label="expr"]
  126 -> 56 [style=dashed label="const"]
  127 [label="State 127\n\l 77 vector: VVARIABLE . '(' vector ',' '[' ']' ')'\l 80       | VVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', '}']\l"]
  127 -> 187 [style=solid label="'('"]
  127 -> "127R80" [style=solid]
 "127R80" [label="R80", fillcolor=3, shape=diamond, style=filled]
  128 [label="State 128\n\l 78 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 79       | MVARIABLE . '(' '[' ']' ',' expr ')'\l"]
  128 -> 188 [style=solid label="'('"]
  129 [label="State 129\n\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l102 assignment: VVARIABLE ASSIGN vector .  [NEWLINE]\l"]
  129 -> 106 [style=solid label="ELEMMULT"]
  129 -> 108 [style=solid label="LEFTSHIFT"]
  129 -> 109 [style=solid label="RIGHTSHIFT"]
  129 -> "129R102" [style=solid]
 "129R102" [label="R102", fillcolor=3, shape=diamond, style=filled]
  130 [label="State 130\n\l 77 vector: VVARIABLE '(' vector . ',' '[' ']' ')'\l 81       | vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l 91 vmdeclaration: VVARIABLE '(' vector . ',' '[' ']' ')' ASSIGN vector\l"]
  130 -> 106 [style=solid label="ELEMMULT"]
  130 -> 108 [style=solid label="LEFTSHIFT"]
  130 -> 109 [style=solid label="RIGHTSHIFT"]
  130 -> 189 [style=solid label="','"]
  131 [label="State 131\n\l 90 vmdeclaration: VVARIABLE '(' expr . ')' ASSIGN expr\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l121     | VVARIABLE '(' expr . ')'\l"]
  131 -> 115 [style=solid label="CONJUNCTION"]
  131 -> 116 [style=solid label="'<'"]
  131 -> 117 [style=solid label="'>'"]
  131 -> 118 [style=solid label="'+'"]
  131 -> 119 [style=solid label="'-'"]
  131 -> 120 [style=solid label="'/'"]
  131 -> 190 [style=solid label="')'"]
  132 [label="State 132\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 70       | error . matrix\l 71       | . error vector\l 71       | error . vector\l 72       | . error expr\l 72       | error . expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 85       | error . vector\l 86       | . error expr\l 86       | error . expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  132 -> 57 [style=dotted]
  132 -> 5 [style=solid label="BOOL"]
  132 -> 6 [style=solid label="INTEGER"]
  132 -> 58 [style=solid label="VARIABLE"]
  132 -> 59 [style=solid label="VVARIABLE"]
  132 -> 60 [style=solid label="MVARIABLE"]
  132 -> 26 [style=solid label="MOVE"]
  132 -> 29 [style=solid label="ROBEX"]
  132 -> 30 [style=solid label="WALL"]
  132 -> 31 [style=solid label="'-'"]
  132 -> 32 [style=solid label="'!'"]
  132 -> 62 [style=solid label="'('"]
  132 -> 35 [style=solid label="'{'"]
  132 -> 39 [style=dashed label="robotmove"]
  132 -> 42 [style=dashed label="robotwall"]
  132 -> 43 [style=dashed label="robotexit"]
  132 -> 63 [style=dashed label="matrix"]
  132 -> 64 [style=dashed label="vector"]
  132 -> 191 [style=dashed label="expr"]
  132 -> 56 [style=dashed label="const"]
  133 [label="State 133\n\l 58 matrix: MVARIABLE . '(' vector ',' '[' ']' ')'\l 59       | MVARIABLE . '(' '[' ']' ',' vector ')'\l 60       | MVARIABLE . '(' matrix ')'\l 61       | MVARIABLE .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 78 vector: MVARIABLE . '(' expr ',' '[' ']' ')'\l 79       | MVARIABLE . '(' '[' ']' ',' expr ')'\l"]
  133 -> 192 [style=solid label="'('"]
  133 -> "133R61" [style=solid]
 "133R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
  134 [label="State 134\n\l 62 matrix: matrix . '*' matrix\l 63       | matrix . ELEMMULT matrix\l 64       | matrix . '\\''\l 65       | matrix . RIGHTSHIFT\l 66       | matrix . LEFTSHIFT\l 68       | matrix . ELEMMULT vector\l 69       | matrix . ELEMMULT expr\l103 assignment: MVARIABLE ASSIGN matrix .  [NEWLINE]\l"]
  134 -> 100 [style=solid label="ELEMMULT"]
  134 -> 101 [style=solid label="'\\''"]
  134 -> 102 [style=solid label="LEFTSHIFT"]
  134 -> 103 [style=solid label="RIGHTSHIFT"]
  134 -> 104 [style=solid label="'*'"]
  134 -> "134R103" [style=solid]
 "134R103" [label="R103", fillcolor=3, shape=diamond, style=filled]
  135 [label="State 135\n\l 67 matrix: vector . '\\''\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l"]
  135 -> 106 [style=solid label="ELEMMULT"]
  135 -> 107 [style=solid label="'\\''"]
  135 -> 108 [style=solid label="LEFTSHIFT"]
  135 -> 109 [style=solid label="RIGHTSHIFT"]
  136 [label="State 136\n\l 59 matrix: MVARIABLE '(' '[' . ']' ',' vector ')'\l 79 vector: MVARIABLE '(' '[' . ']' ',' expr ')'\l 94 vmdeclaration: MVARIABLE '(' '[' . ']' ',' expr ')' ASSIGN vector\l 96              | MVARIABLE '(' '[' . ']' ',' vector ')' ASSIGN matrix\l"]
  136 -> 193 [style=solid label="']'"]
  137 [label="State 137\n\l 60 matrix: MVARIABLE '(' matrix . ')'\l 62       | matrix . '*' matrix\l 63       | matrix . ELEMMULT matrix\l 64       | matrix . '\\''\l 65       | matrix . RIGHTSHIFT\l 66       | matrix . LEFTSHIFT\l 68       | matrix . ELEMMULT vector\l 69       | matrix . ELEMMULT expr\l 97 vmdeclaration: MVARIABLE '(' matrix . ')' ASSIGN matrix\l"]
  137 -> 100 [style=solid label="ELEMMULT"]
  137 -> 101 [style=solid label="'\\''"]
  137 -> 102 [style=solid label="LEFTSHIFT"]
  137 -> 103 [style=solid label="RIGHTSHIFT"]
  137 -> 104 [style=solid label="'*'"]
  137 -> 194 [style=solid label="')'"]
  138 [label="State 138\n\l 58 matrix: MVARIABLE '(' vector . ',' '[' ']' ')'\l 67       | vector . '\\''\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l 95 vmdeclaration: MVARIABLE '(' vector . ',' '[' ']' ')' ASSIGN matrix\l"]
  138 -> 106 [style=solid label="ELEMMULT"]
  138 -> 107 [style=solid label="'\\''"]
  138 -> 108 [style=solid label="LEFTSHIFT"]
  138 -> 109 [style=solid label="RIGHTSHIFT"]
  138 -> 195 [style=solid label="','"]
  139 [label="State 139\n\l 78 vector: MVARIABLE '(' expr . ',' '[' ']' ')'\l 92 vmdeclaration: MVARIABLE '(' expr . ',' expr ')' ASSIGN expr\l 93              | MVARIABLE '(' expr . ',' '[' ']' ')' ASSIGN vector\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l122     | MVARIABLE '(' expr . ',' expr ')'\l"]
  139 -> 115 [style=solid label="CONJUNCTION"]
  139 -> 196 [style=solid label="','"]
  139 -> 116 [style=solid label="'<'"]
  139 -> 117 [style=solid label="'>'"]
  139 -> 118 [style=solid label="'+'"]
  139 -> 119 [style=solid label="'-'"]
  139 -> 120 [style=solid label="'/'"]
  140 [label="State 140\n\l105 print: PRINT '(' VVARIABLE . ')'\l121 expr: VVARIABLE . '(' expr ')'\l"]
  140 -> 144 [style=solid label="'('"]
  140 -> 197 [style=solid label="')'"]
  141 [label="State 141\n\l106 print: PRINT '(' MVARIABLE . ')'\l122 expr: MVARIABLE . '(' expr ',' expr ')'\l"]
  141 -> 145 [style=solid label="'('"]
  141 -> 198 [style=solid label="')'"]
  142 [label="State 142\n\l104 print: PRINT '(' expr . ')'\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  142 -> 115 [style=solid label="CONJUNCTION"]
  142 -> 116 [style=solid label="'<'"]
  142 -> 117 [style=solid label="'>'"]
  142 -> 118 [style=solid label="'+'"]
  142 -> 119 [style=solid label="'-'"]
  142 -> 120 [style=solid label="'/'"]
  142 -> 199 [style=solid label="')'"]
  143 [label="State 143\n\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l123     | error expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l"]
  143 -> 115 [style=solid label="CONJUNCTION"]
  143 -> 116 [style=solid label="'<'"]
  143 -> 117 [style=solid label="'>'"]
  143 -> 118 [style=solid label="'+'"]
  143 -> 119 [style=solid label="'-'"]
  143 -> 120 [style=solid label="'/'"]
  143 -> "143R123d" [label="[CONJUNCTION, '<', '>', '+', '-', '/']", style=solid]
 "143R123d" [label="R123", fillcolor=5, shape=diamond, style=filled]
  143 -> "143R123" [style=solid]
 "143R123" [label="R123", fillcolor=3, shape=diamond, style=filled]
  144 [label="State 144\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l121     | VVARIABLE '(' . expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  144 -> 72 [style=dotted]
  144 -> 5 [style=solid label="BOOL"]
  144 -> 6 [style=solid label="INTEGER"]
  144 -> 58 [style=solid label="VARIABLE"]
  144 -> 73 [style=solid label="VVARIABLE"]
  144 -> 74 [style=solid label="MVARIABLE"]
  144 -> 26 [style=solid label="MOVE"]
  144 -> 29 [style=solid label="ROBEX"]
  144 -> 30 [style=solid label="WALL"]
  144 -> 31 [style=solid label="'-'"]
  144 -> 32 [style=solid label="'!'"]
  144 -> 62 [style=solid label="'('"]
  144 -> 39 [style=dashed label="robotmove"]
  144 -> 42 [style=dashed label="robotwall"]
  144 -> 43 [style=dashed label="robotexit"]
  144 -> 181 [style=dashed label="expr"]
  144 -> 56 [style=dashed label="const"]
  145 [label="State 145\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l122     | MVARIABLE '(' . expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  145 -> 72 [style=dotted]
  145 -> 5 [style=solid label="BOOL"]
  145 -> 6 [style=solid label="INTEGER"]
  145 -> 58 [style=solid label="VARIABLE"]
  145 -> 73 [style=solid label="VVARIABLE"]
  145 -> 74 [style=solid label="MVARIABLE"]
  145 -> 26 [style=solid label="MOVE"]
  145 -> 29 [style=solid label="ROBEX"]
  145 -> 30 [style=solid label="WALL"]
  145 -> 31 [style=solid label="'-'"]
  145 -> 32 [style=solid label="'!'"]
  145 -> 62 [style=solid label="'('"]
  145 -> 39 [style=dashed label="robotmove"]
  145 -> 42 [style=dashed label="robotwall"]
  145 -> 43 [style=dashed label="robotexit"]
  145 -> 200 [style=dashed label="expr"]
  145 -> 56 [style=dashed label="const"]
  146 [label="State 146\n\l 30 iff: IF expr NEWLINE . begif stmts endif\l 31 begif: . B\l 32      | . BEGIF\l"]
  146 -> 201 [style=solid label="B"]
  146 -> 202 [style=solid label="BEGIF"]
  146 -> 203 [style=dashed label="begif"]
  147 [label="State 147\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 39 forr: FORR declaration DOUBLEDOT . expr NEWLINE begfor stmts endfor\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  147 -> 72 [style=dotted]
  147 -> 5 [style=solid label="BOOL"]
  147 -> 6 [style=solid label="INTEGER"]
  147 -> 58 [style=solid label="VARIABLE"]
  147 -> 73 [style=solid label="VVARIABLE"]
  147 -> 74 [style=solid label="MVARIABLE"]
  147 -> 26 [style=solid label="MOVE"]
  147 -> 29 [style=solid label="ROBEX"]
  147 -> 30 [style=solid label="WALL"]
  147 -> 31 [style=solid label="'-'"]
  147 -> 32 [style=solid label="'!'"]
  147 -> 62 [style=solid label="'('"]
  147 -> 39 [style=dashed label="robotmove"]
  147 -> 42 [style=dashed label="robotwall"]
  147 -> 43 [style=dashed label="robotexit"]
  147 -> 204 [style=dashed label="expr"]
  147 -> 56 [style=dashed label="const"]
  148 [label="State 148\n\l 25 robotmove: MOVE '(' expr . ')'\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  148 -> 115 [style=solid label="CONJUNCTION"]
  148 -> 116 [style=solid label="'<'"]
  148 -> 117 [style=solid label="'>'"]
  148 -> 118 [style=solid label="'+'"]
  148 -> 119 [style=solid label="'-'"]
  148 -> 120 [style=solid label="'/'"]
  148 -> 205 [style=solid label="')'"]
  149 [label="State 149\n\l 21 stmt: '(' stmts ')' .\l"]
  149 -> "149R21" [style=solid]
 "149R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  150 [label="State 150\n\l120 expr: '(' expr ')' .\l"]
  150 -> "150R120" [style=solid]
 "150R120" [label="R120", fillcolor=3, shape=diamond, style=filled]
  151 [label="State 151\n\l 42 return_func: return_func error .\l"]
  151 -> "151R42" [style=solid]
 "151R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
  152 [label="State 152\n\l 41 return_func: return_func ',' . type VAR\l124 type: . INT\l125     | . CINT\l126     | . VINT\l127     | . MINT\l128     | . CVINT\l129     | . CMINT\l130     | . BOOLEAN\l131     | . CBOOLEAN\l132     | . VBOOLEAN\l133     | . MBOOLEAN\l134     | . CVBOOLEAN\l135     | . CMBOOLEAN\l"]
  152 -> 10 [style=solid label="CINT"]
  152 -> 11 [style=solid label="VINT"]
  152 -> 12 [style=solid label="MINT"]
  152 -> 13 [style=solid label="INT"]
  152 -> 14 [style=solid label="CVINT"]
  152 -> 15 [style=solid label="CMINT"]
  152 -> 16 [style=solid label="BOOLEAN"]
  152 -> 17 [style=solid label="CBOOLEAN"]
  152 -> 18 [style=solid label="VBOOLEAN"]
  152 -> 19 [style=solid label="MBOOLEAN"]
  152 -> 20 [style=solid label="CVBOOLEAN"]
  152 -> 21 [style=solid label="CMBOOLEAN"]
  152 -> 206 [style=dashed label="type"]
  153 [label="State 153\n\l 54 function_head: '[' return_func ']' . DECLARE FUNC VAR '(' args_func ')'\l"]
  153 -> 207 [style=solid label="DECLARE"]
  154 [label="State 154\n\l 40 return_func: type VAR .\l"]
  154 -> "154R40" [style=solid]
 "154R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  155 [label="State 155\n\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l 85       | error vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l"]
  155 -> 106 [style=solid label="ELEMMULT"]
  155 -> 108 [style=solid label="LEFTSHIFT"]
  155 -> 109 [style=solid label="RIGHTSHIFT"]
  155 -> "155R85d" [label="[ELEMMULT, LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "155R85d" [label="R85", fillcolor=5, shape=diamond, style=filled]
  155 -> "155R85" [style=solid]
 "155R85" [label="R85", fillcolor=3, shape=diamond, style=filled]
  156 [label="State 156\n\l 86 vector: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l123     | error expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l"]
  156 -> 115 [style=solid label="CONJUNCTION"]
  156 -> 116 [style=solid label="'<'"]
  156 -> 117 [style=solid label="'>'"]
  156 -> 118 [style=solid label="'+'"]
  156 -> 119 [style=solid label="'-'"]
  156 -> 120 [style=solid label="'/'"]
  156 -> "156R86" [style=solid]
 "156R86" [label="R86", fillcolor=3, shape=diamond, style=filled]
  156 -> "156R123d" [label="[error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']", style=solid]
 "156R123d" [label="R123", fillcolor=5, shape=diamond, style=filled]
  157 [label="State 157\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 78 vector: MVARIABLE '(' . expr ',' '[' ']' ')'\l 79       | MVARIABLE '(' . '[' ']' ',' expr ')'\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l122     | MVARIABLE '(' . expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  157 -> 72 [style=dotted]
  157 -> 5 [style=solid label="BOOL"]
  157 -> 6 [style=solid label="INTEGER"]
  157 -> 58 [style=solid label="VARIABLE"]
  157 -> 73 [style=solid label="VVARIABLE"]
  157 -> 74 [style=solid label="MVARIABLE"]
  157 -> 26 [style=solid label="MOVE"]
  157 -> 29 [style=solid label="ROBEX"]
  157 -> 30 [style=solid label="WALL"]
  157 -> 31 [style=solid label="'-'"]
  157 -> 32 [style=solid label="'!'"]
  157 -> 62 [style=solid label="'('"]
  157 -> 208 [style=solid label="'['"]
  157 -> 39 [style=dashed label="robotmove"]
  157 -> 42 [style=dashed label="robotwall"]
  157 -> 43 [style=dashed label="robotexit"]
  157 -> 185 [style=dashed label="expr"]
  157 -> 56 [style=dashed label="const"]
  158 [label="State 158\n\l 75 listexprs: listexprs error .\l"]
  158 -> "158R75" [style=solid]
 "158R75" [label="R75", fillcolor=3, shape=diamond, style=filled]
  159 [label="State 159\n\l 74 listexprs: listexprs ',' . vector\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l"]
  159 -> 126 [style=dotted]
  159 -> 127 [style=solid label="VVARIABLE"]
  159 -> 128 [style=solid label="MVARIABLE"]
  159 -> 87 [style=solid label="'{'"]
  159 -> 209 [style=dashed label="vector"]
  160 [label="State 160\n\l 57 matrix: '{' listexprs '}' .\l"]
  160 -> "160R57" [style=solid]
 "160R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
  161 [label="State 161\n\l 73 listexprs: vector ',' . vector\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l"]
  161 -> 126 [style=dotted]
  161 -> 127 [style=solid label="VVARIABLE"]
  161 -> 128 [style=solid label="MVARIABLE"]
  161 -> 87 [style=solid label="'{'"]
  161 -> 210 [style=dashed label="vector"]
  162 [label="State 162\n\l 89 exprs: exprs error .\l"]
  162 -> "162R89" [style=solid]
 "162R89" [label="R89", fillcolor=3, shape=diamond, style=filled]
  163 [label="State 163\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 88 exprs: exprs ',' . expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  163 -> 72 [style=dotted]
  163 -> 5 [style=solid label="BOOL"]
  163 -> 6 [style=solid label="INTEGER"]
  163 -> 58 [style=solid label="VARIABLE"]
  163 -> 73 [style=solid label="VVARIABLE"]
  163 -> 74 [style=solid label="MVARIABLE"]
  163 -> 26 [style=solid label="MOVE"]
  163 -> 29 [style=solid label="ROBEX"]
  163 -> 30 [style=solid label="WALL"]
  163 -> 31 [style=solid label="'-'"]
  163 -> 32 [style=solid label="'!'"]
  163 -> 62 [style=solid label="'('"]
  163 -> 39 [style=dashed label="robotmove"]
  163 -> 42 [style=dashed label="robotwall"]
  163 -> 43 [style=dashed label="robotexit"]
  163 -> 211 [style=dashed label="expr"]
  163 -> 56 [style=dashed label="const"]
  164 [label="State 164\n\l 76 vector: '{' exprs '}' .\l"]
  164 -> "164R76" [style=solid]
 "164R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
  165 [label="State 165\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 87 exprs: expr ',' . expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  165 -> 72 [style=dotted]
  165 -> 5 [style=solid label="BOOL"]
  165 -> 6 [style=solid label="INTEGER"]
  165 -> 58 [style=solid label="VARIABLE"]
  165 -> 73 [style=solid label="VVARIABLE"]
  165 -> 74 [style=solid label="MVARIABLE"]
  165 -> 26 [style=solid label="MOVE"]
  165 -> 29 [style=solid label="ROBEX"]
  165 -> 30 [style=solid label="WALL"]
  165 -> 31 [style=solid label="'-'"]
  165 -> 32 [style=solid label="'!'"]
  165 -> 62 [style=solid label="'('"]
  165 -> 39 [style=dashed label="robotmove"]
  165 -> 42 [style=dashed label="robotwall"]
  165 -> 43 [style=dashed label="robotexit"]
  165 -> 212 [style=dashed label="expr"]
  165 -> 56 [style=dashed label="const"]
  166 [label="State 166\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . robotactions NEWLINE\l 21     | . '(' stmts ')'\l 22     | . error NEWLINE\l 23 robotactions: . robotright\l 24             | . robotleft\l 25 robotmove: . MOVE '(' expr ')'\l 26 robotright: . RIGHT\l 27 robotleft: . LEFT\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 30 iff: . IF expr NEWLINE begif stmts endif\l 39 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 54 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 55              | . error\l 56 function: . function_head B NEWLINE stmts E\l 56         | function_head B NEWLINE . stmts E\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 90 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 91              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 92              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 93              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 94              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 95              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 96              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 97              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 98 declaration: . type VAR DECLARE expr\l 99            | . type VAR DECLARE vector\l100            | . type VAR DECLARE matrix\l101 assignment: . VARIABLE ASSIGN expr\l102           | . VVARIABLE ASSIGN vector\l103           | . MVARIABLE ASSIGN matrix\l104 print: . PRINT '(' expr ')'\l105      | . PRINT '(' VVARIABLE ')'\l106      | . PRINT '(' MVARIABLE ')'\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l124 type: . INT\l125     | . CINT\l126     | . VINT\l127     | . MINT\l128     | . CVINT\l129     | . CMINT\l130     | . BOOLEAN\l131     | . CBOOLEAN\l132     | . VBOOLEAN\l133     | . MBOOLEAN\l134     | . CVBOOLEAN\l135     | . CMBOOLEAN\l136 const: . INTEGER\l137      | . BOOL\l"]
  166 -> 80 [style=dotted]
  166 -> 5 [style=solid label="BOOL"]
  166 -> 6 [style=solid label="INTEGER"]
  166 -> 7 [style=solid label="VARIABLE"]
  166 -> 8 [style=solid label="VVARIABLE"]
  166 -> 9 [style=solid label="MVARIABLE"]
  166 -> 10 [style=solid label="CINT"]
  166 -> 11 [style=solid label="VINT"]
  166 -> 12 [style=solid label="MINT"]
  166 -> 13 [style=solid label="INT"]
  166 -> 14 [style=solid label="CVINT"]
  166 -> 15 [style=solid label="CMINT"]
  166 -> 16 [style=solid label="BOOLEAN"]
  166 -> 17 [style=solid label="CBOOLEAN"]
  166 -> 18 [style=solid label="VBOOLEAN"]
  166 -> 19 [style=solid label="MBOOLEAN"]
  166 -> 20 [style=solid label="CVBOOLEAN"]
  166 -> 21 [style=solid label="CMBOOLEAN"]
  166 -> 22 [style=solid label="NEWLINE"]
  166 -> 23 [style=solid label="PRINT"]
  166 -> 24 [style=solid label="IF"]
  166 -> 25 [style=solid label="FORR"]
  166 -> 26 [style=solid label="MOVE"]
  166 -> 27 [style=solid label="RIGHT"]
  166 -> 28 [style=solid label="LEFT"]
  166 -> 29 [style=solid label="ROBEX"]
  166 -> 30 [style=solid label="WALL"]
  166 -> 31 [style=solid label="'-'"]
  166 -> 32 [style=solid label="'!'"]
  166 -> 33 [style=solid label="'('"]
  166 -> 34 [style=solid label="'['"]
  166 -> 35 [style=solid label="'{'"]
  166 -> 213 [style=dashed label="stmts"]
  166 -> 37 [style=dashed label="stmt"]
  166 -> 38 [style=dashed label="robotactions"]
  166 -> 39 [style=dashed label="robotmove"]
  166 -> 40 [style=dashed label="robotright"]
  166 -> 41 [style=dashed label="robotleft"]
  166 -> 42 [style=dashed label="robotwall"]
  166 -> 43 [style=dashed label="robotexit"]
  166 -> 44 [style=dashed label="iff"]
  166 -> 45 [style=dashed label="forr"]
  166 -> 46 [style=dashed label="function_head"]
  166 -> 47 [style=dashed label="function"]
  166 -> 48 [style=dashed label="matrix"]
  166 -> 49 [style=dashed label="vector"]
  166 -> 50 [style=dashed label="vmdeclaration"]
  166 -> 51 [style=dashed label="declaration"]
  166 -> 52 [style=dashed label="assignment"]
  166 -> 53 [style=dashed label="print"]
  166 -> 54 [style=dashed label="expr"]
  166 -> 55 [style=dashed label="type"]
  166 -> 56 [style=dashed label="const"]
  167 [label="State 167\n\l 62 matrix: matrix . '*' matrix\l 63       | matrix . ELEMMULT matrix\l 63       | matrix ELEMMULT matrix .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 64       | matrix . '\\''\l 65       | matrix . RIGHTSHIFT\l 66       | matrix . LEFTSHIFT\l 68       | matrix . ELEMMULT vector\l 69       | matrix . ELEMMULT expr\l"]
  167 -> 100 [style=solid label="ELEMMULT"]
  167 -> 101 [style=solid label="'\\''"]
  167 -> 102 [style=solid label="LEFTSHIFT"]
  167 -> 103 [style=solid label="RIGHTSHIFT"]
  167 -> 104 [style=solid label="'*'"]
  167 -> "167R63d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']", style=solid]
 "167R63d" [label="R63", fillcolor=5, shape=diamond, style=filled]
  167 -> "167R63" [style=solid]
 "167R63" [label="R63", fillcolor=3, shape=diamond, style=filled]
  168 [label="State 168\n\l 67 matrix: vector . '\\''\l 68       | matrix ELEMMULT vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l"]
  168 -> 106 [style=solid label="ELEMMULT"]
  168 -> 107 [style=solid label="'\\''"]
  168 -> 108 [style=solid label="LEFTSHIFT"]
  168 -> 109 [style=solid label="RIGHTSHIFT"]
  168 -> "168R68d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "168R68d" [label="R68", fillcolor=5, shape=diamond, style=filled]
  168 -> "168R68" [style=solid]
 "168R68" [label="R68", fillcolor=3, shape=diamond, style=filled]
  169 [label="State 169\n\l 69 matrix: matrix ELEMMULT expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  169 -> 115 [style=solid label="CONJUNCTION"]
  169 -> 116 [style=solid label="'<'"]
  169 -> 117 [style=solid label="'>'"]
  169 -> 118 [style=solid label="'+'"]
  169 -> 119 [style=solid label="'-'"]
  169 -> 120 [style=solid label="'/'"]
  169 -> "169R69" [style=solid]
 "169R69" [label="R69", fillcolor=3, shape=diamond, style=filled]
  170 [label="State 170\n\l 62 matrix: matrix . '*' matrix\l 62       | matrix '*' matrix .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 63       | matrix . ELEMMULT matrix\l 64       | matrix . '\\''\l 65       | matrix . RIGHTSHIFT\l 66       | matrix . LEFTSHIFT\l 68       | matrix . ELEMMULT vector\l 69       | matrix . ELEMMULT expr\l"]
  170 -> 100 [style=solid label="ELEMMULT"]
  170 -> 101 [style=solid label="'\\''"]
  170 -> 102 [style=solid label="LEFTSHIFT"]
  170 -> 103 [style=solid label="RIGHTSHIFT"]
  170 -> "170R62d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "170R62d" [label="R62", fillcolor=5, shape=diamond, style=filled]
  170 -> "170R62" [style=solid]
 "170R62" [label="R62", fillcolor=3, shape=diamond, style=filled]
  171 [label="State 171\n\l 81 vector: vector . ELEMMULT vector\l 81       | vector ELEMMULT vector .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l"]
  171 -> 106 [style=solid label="ELEMMULT"]
  171 -> 108 [style=solid label="LEFTSHIFT"]
  171 -> 109 [style=solid label="RIGHTSHIFT"]
  171 -> "171R81d" [label="[ELEMMULT, LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "171R81d" [label="R81", fillcolor=5, shape=diamond, style=filled]
  171 -> "171R81" [style=solid]
 "171R81" [label="R81", fillcolor=3, shape=diamond, style=filled]
  172 [label="State 172\n\l 84 vector: vector ELEMMULT expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']', '}']\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  172 -> 115 [style=solid label="CONJUNCTION"]
  172 -> 116 [style=solid label="'<'"]
  172 -> 117 [style=solid label="'>'"]
  172 -> 118 [style=solid label="'+'"]
  172 -> 119 [style=solid label="'-'"]
  172 -> 120 [style=solid label="'/'"]
  172 -> "172R84" [style=solid]
 "172R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
  173 [label="State 173\n\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l119     | expr CONJUNCTION expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l"]
  173 -> 115 [style=solid label="CONJUNCTION"]
  173 -> 116 [style=solid label="'<'"]
  173 -> 117 [style=solid label="'>'"]
  173 -> 118 [style=solid label="'+'"]
  173 -> 119 [style=solid label="'-'"]
  173 -> 120 [style=solid label="'/'"]
  173 -> "173R119d" [label="[CONJUNCTION, '<', '>', '+', '-', '/']", style=solid]
 "173R119d" [label="R119", fillcolor=5, shape=diamond, style=filled]
  173 -> "173R119" [style=solid]
 "173R119" [label="R119", fillcolor=3, shape=diamond, style=filled]
  174 [label="State 174\n\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l116     | expr '<' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '*', ')', ']', '}']\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  174 -> 115 [style=solid label="CONJUNCTION"]
  174 -> 118 [style=solid label="'+'"]
  174 -> 119 [style=solid label="'-'"]
  174 -> 120 [style=solid label="'/'"]
  174 -> "174R116d" [label="[CONJUNCTION]", style=solid]
 "174R116d" [label="R116", fillcolor=5, shape=diamond, style=filled]
  174 -> "174R116" [style=solid]
 "174R116" [label="R116", fillcolor=3, shape=diamond, style=filled]
  175 [label="State 175\n\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l117     | expr '>' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '*', ')', ']', '}']\l119     | expr . CONJUNCTION expr\l"]
  175 -> 115 [style=solid label="CONJUNCTION"]
  175 -> 118 [style=solid label="'+'"]
  175 -> 119 [style=solid label="'-'"]
  175 -> 120 [style=solid label="'/'"]
  175 -> "175R117d" [label="[CONJUNCTION]", style=solid]
 "175R117d" [label="R117", fillcolor=5, shape=diamond, style=filled]
  175 -> "175R117" [style=solid]
 "175R117" [label="R117", fillcolor=3, shape=diamond, style=filled]
  176 [label="State 176\n\l113 expr: expr . '+' expr\l113     | expr '+' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', ')', ']', '}']\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  176 -> 115 [style=solid label="CONJUNCTION"]
  176 -> 120 [style=solid label="'/'"]
  176 -> "176R113d" [label="[CONJUNCTION]", style=solid]
 "176R113d" [label="R113", fillcolor=5, shape=diamond, style=filled]
  176 -> "176R113" [style=solid]
 "176R113" [label="R113", fillcolor=3, shape=diamond, style=filled]
  177 [label="State 177\n\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l114     | expr '-' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', ')', ']', '}']\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  177 -> 115 [style=solid label="CONJUNCTION"]
  177 -> 120 [style=solid label="'/'"]
  177 -> "177R114d" [label="[CONJUNCTION]", style=solid]
 "177R114d" [label="R114", fillcolor=5, shape=diamond, style=filled]
  177 -> "177R114" [style=solid]
 "177R114" [label="R114", fillcolor=3, shape=diamond, style=filled]
  178 [label="State 178\n\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l115     | expr '/' expr .  [error, NEWLINE, CONJUNCTION, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '<', '>', '+', '-', '*', '/', ')', ']', '}']\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  178 -> 115 [style=solid label="CONJUNCTION"]
  178 -> "178R115d" [label="[CONJUNCTION]", style=solid]
 "178R115d" [label="R115", fillcolor=5, shape=diamond, style=filled]
  178 -> "178R115" [style=solid]
 "178R115" [label="R115", fillcolor=3, shape=diamond, style=filled]
  179 [label="State 179\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 98 declaration: type VAR DECLARE . expr\l 99            | type VAR DECLARE . vector\l100            | type VAR DECLARE . matrix\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  179 -> 57 [style=dotted]
  179 -> 5 [style=solid label="BOOL"]
  179 -> 6 [style=solid label="INTEGER"]
  179 -> 58 [style=solid label="VARIABLE"]
  179 -> 59 [style=solid label="VVARIABLE"]
  179 -> 60 [style=solid label="MVARIABLE"]
  179 -> 26 [style=solid label="MOVE"]
  179 -> 29 [style=solid label="ROBEX"]
  179 -> 30 [style=solid label="WALL"]
  179 -> 31 [style=solid label="'-'"]
  179 -> 32 [style=solid label="'!'"]
  179 -> 62 [style=solid label="'('"]
  179 -> 35 [style=solid label="'{'"]
  179 -> 39 [style=dashed label="robotmove"]
  179 -> 42 [style=dashed label="robotwall"]
  179 -> 43 [style=dashed label="robotexit"]
  179 -> 214 [style=dashed label="matrix"]
  179 -> 215 [style=dashed label="vector"]
  179 -> 216 [style=dashed label="expr"]
  179 -> 56 [style=dashed label="const"]
  180 [label="State 180\n\l 77 vector: VVARIABLE '(' vector . ',' '[' ']' ')'\l 81       | vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l"]
  180 -> 106 [style=solid label="ELEMMULT"]
  180 -> 108 [style=solid label="LEFTSHIFT"]
  180 -> 109 [style=solid label="RIGHTSHIFT"]
  180 -> 217 [style=solid label="','"]
  181 [label="State 181\n\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l121     | VVARIABLE '(' expr . ')'\l"]
  181 -> 115 [style=solid label="CONJUNCTION"]
  181 -> 116 [style=solid label="'<'"]
  181 -> 117 [style=solid label="'>'"]
  181 -> 118 [style=solid label="'+'"]
  181 -> 119 [style=solid label="'-'"]
  181 -> 120 [style=solid label="'/'"]
  181 -> 218 [style=solid label="')'"]
  182 [label="State 182\n\l 59 matrix: MVARIABLE '(' '[' . ']' ',' vector ')'\l 79 vector: MVARIABLE '(' '[' . ']' ',' expr ')'\l"]
  182 -> 219 [style=solid label="']'"]
  183 [label="State 183\n\l 60 matrix: MVARIABLE '(' matrix . ')'\l 62       | matrix . '*' matrix\l 63       | matrix . ELEMMULT matrix\l 64       | matrix . '\\''\l 65       | matrix . RIGHTSHIFT\l 66       | matrix . LEFTSHIFT\l 68       | matrix . ELEMMULT vector\l 69       | matrix . ELEMMULT expr\l"]
  183 -> 100 [style=solid label="ELEMMULT"]
  183 -> 101 [style=solid label="'\\''"]
  183 -> 102 [style=solid label="LEFTSHIFT"]
  183 -> 103 [style=solid label="RIGHTSHIFT"]
  183 -> 104 [style=solid label="'*'"]
  183 -> 220 [style=solid label="')'"]
  184 [label="State 184\n\l 58 matrix: MVARIABLE '(' vector . ',' '[' ']' ')'\l 67       | vector . '\\''\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l"]
  184 -> 106 [style=solid label="ELEMMULT"]
  184 -> 107 [style=solid label="'\\''"]
  184 -> 108 [style=solid label="LEFTSHIFT"]
  184 -> 109 [style=solid label="RIGHTSHIFT"]
  184 -> 221 [style=solid label="','"]
  185 [label="State 185\n\l 78 vector: MVARIABLE '(' expr . ',' '[' ']' ')'\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l122     | MVARIABLE '(' expr . ',' expr ')'\l"]
  185 -> 115 [style=solid label="CONJUNCTION"]
  185 -> 222 [style=solid label="','"]
  185 -> 116 [style=solid label="'<'"]
  185 -> 117 [style=solid label="'>'"]
  185 -> 118 [style=solid label="'+'"]
  185 -> 119 [style=solid label="'-'"]
  185 -> 120 [style=solid label="'/'"]
  186 [label="State 186\n\l 86 vector: error expr .  [error, NEWLINE, ELEMMULT, LEFTSHIFT, RIGHTSHIFT, ',', '}']\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  186 -> 115 [style=solid label="CONJUNCTION"]
  186 -> 116 [style=solid label="'<'"]
  186 -> 117 [style=solid label="'>'"]
  186 -> 118 [style=solid label="'+'"]
  186 -> 119 [style=solid label="'-'"]
  186 -> 120 [style=solid label="'/'"]
  186 -> "186R86" [style=solid]
 "186R86" [label="R86", fillcolor=3, shape=diamond, style=filled]
  187 [label="State 187\n\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 77       | VVARIABLE '(' . vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l"]
  187 -> 126 [style=dotted]
  187 -> 127 [style=solid label="VVARIABLE"]
  187 -> 128 [style=solid label="MVARIABLE"]
  187 -> 87 [style=solid label="'{'"]
  187 -> 180 [style=dashed label="vector"]
  188 [label="State 188\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 78 vector: MVARIABLE '(' . expr ',' '[' ']' ')'\l 79       | MVARIABLE '(' . '[' ']' ',' expr ')'\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  188 -> 72 [style=dotted]
  188 -> 5 [style=solid label="BOOL"]
  188 -> 6 [style=solid label="INTEGER"]
  188 -> 58 [style=solid label="VARIABLE"]
  188 -> 73 [style=solid label="VVARIABLE"]
  188 -> 74 [style=solid label="MVARIABLE"]
  188 -> 26 [style=solid label="MOVE"]
  188 -> 29 [style=solid label="ROBEX"]
  188 -> 30 [style=solid label="WALL"]
  188 -> 31 [style=solid label="'-'"]
  188 -> 32 [style=solid label="'!'"]
  188 -> 62 [style=solid label="'('"]
  188 -> 208 [style=solid label="'['"]
  188 -> 39 [style=dashed label="robotmove"]
  188 -> 42 [style=dashed label="robotwall"]
  188 -> 43 [style=dashed label="robotexit"]
  188 -> 223 [style=dashed label="expr"]
  188 -> 56 [style=dashed label="const"]
  189 [label="State 189\n\l 77 vector: VVARIABLE '(' vector ',' . '[' ']' ')'\l 91 vmdeclaration: VVARIABLE '(' vector ',' . '[' ']' ')' ASSIGN vector\l"]
  189 -> 224 [style=solid label="'['"]
  190 [label="State 190\n\l 90 vmdeclaration: VVARIABLE '(' expr ')' . ASSIGN expr\l121 expr: VVARIABLE '(' expr ')' .  [NEWLINE, CONJUNCTION, '<', '>', '+', '-', '/', ')']\l"]
  190 -> 225 [style=solid label="ASSIGN"]
  190 -> "190R121" [style=solid]
 "190R121" [label="R121", fillcolor=3, shape=diamond, style=filled]
  191 [label="State 191\n\l 72 matrix: error expr .  [error, NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, ',', DOUBLEDOT, '*', ')', ']']\l 86 vector: error expr .  [ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  191 -> 115 [style=solid label="CONJUNCTION"]
  191 -> 116 [style=solid label="'<'"]
  191 -> 117 [style=solid label="'>'"]
  191 -> 118 [style=solid label="'+'"]
  191 -> 119 [style=solid label="'-'"]
  191 -> 120 [style=solid label="'/'"]
  191 -> "191R72" [style=solid]
 "191R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
  191 -> "191R86d" [label="[ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]", style=solid]
 "191R86d" [label="R86", fillcolor=5, shape=diamond, style=filled]
  192 [label="State 192\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 58       | MVARIABLE '(' . vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 59       | MVARIABLE '(' . '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 60       | MVARIABLE '(' . matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 78       | MVARIABLE '(' . expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 79       | MVARIABLE '(' . '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  192 -> 57 [style=dotted]
  192 -> 5 [style=solid label="BOOL"]
  192 -> 6 [style=solid label="INTEGER"]
  192 -> 58 [style=solid label="VARIABLE"]
  192 -> 59 [style=solid label="VVARIABLE"]
  192 -> 60 [style=solid label="MVARIABLE"]
  192 -> 26 [style=solid label="MOVE"]
  192 -> 29 [style=solid label="ROBEX"]
  192 -> 30 [style=solid label="WALL"]
  192 -> 31 [style=solid label="'-'"]
  192 -> 32 [style=solid label="'!'"]
  192 -> 62 [style=solid label="'('"]
  192 -> 182 [style=solid label="'['"]
  192 -> 35 [style=solid label="'{'"]
  192 -> 39 [style=dashed label="robotmove"]
  192 -> 42 [style=dashed label="robotwall"]
  192 -> 43 [style=dashed label="robotexit"]
  192 -> 183 [style=dashed label="matrix"]
  192 -> 184 [style=dashed label="vector"]
  192 -> 223 [style=dashed label="expr"]
  192 -> 56 [style=dashed label="const"]
  193 [label="State 193\n\l 59 matrix: MVARIABLE '(' '[' ']' . ',' vector ')'\l 79 vector: MVARIABLE '(' '[' ']' . ',' expr ')'\l 94 vmdeclaration: MVARIABLE '(' '[' ']' . ',' expr ')' ASSIGN vector\l 96              | MVARIABLE '(' '[' ']' . ',' vector ')' ASSIGN matrix\l"]
  193 -> 226 [style=solid label="','"]
  194 [label="State 194\n\l 60 matrix: MVARIABLE '(' matrix ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l 97 vmdeclaration: MVARIABLE '(' matrix ')' . ASSIGN matrix\l"]
  194 -> 227 [style=solid label="ASSIGN"]
  194 -> "194R60" [style=solid]
 "194R60" [label="R60", fillcolor=3, shape=diamond, style=filled]
  195 [label="State 195\n\l 58 matrix: MVARIABLE '(' vector ',' . '[' ']' ')'\l 95 vmdeclaration: MVARIABLE '(' vector ',' . '[' ']' ')' ASSIGN matrix\l"]
  195 -> 228 [style=solid label="'['"]
  196 [label="State 196\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 78 vector: MVARIABLE '(' expr ',' . '[' ']' ')'\l 92 vmdeclaration: MVARIABLE '(' expr ',' . expr ')' ASSIGN expr\l 93              | MVARIABLE '(' expr ',' . '[' ']' ')' ASSIGN vector\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l122     | MVARIABLE '(' expr ',' . expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  196 -> 72 [style=dotted]
  196 -> 5 [style=solid label="BOOL"]
  196 -> 6 [style=solid label="INTEGER"]
  196 -> 58 [style=solid label="VARIABLE"]
  196 -> 73 [style=solid label="VVARIABLE"]
  196 -> 74 [style=solid label="MVARIABLE"]
  196 -> 26 [style=solid label="MOVE"]
  196 -> 29 [style=solid label="ROBEX"]
  196 -> 30 [style=solid label="WALL"]
  196 -> 31 [style=solid label="'-'"]
  196 -> 32 [style=solid label="'!'"]
  196 -> 62 [style=solid label="'('"]
  196 -> 229 [style=solid label="'['"]
  196 -> 39 [style=dashed label="robotmove"]
  196 -> 42 [style=dashed label="robotwall"]
  196 -> 43 [style=dashed label="robotexit"]
  196 -> 230 [style=dashed label="expr"]
  196 -> 56 [style=dashed label="const"]
  197 [label="State 197\n\l105 print: PRINT '(' VVARIABLE ')' .\l"]
  197 -> "197R105" [style=solid]
 "197R105" [label="R105", fillcolor=3, shape=diamond, style=filled]
  198 [label="State 198\n\l106 print: PRINT '(' MVARIABLE ')' .\l"]
  198 -> "198R106" [style=solid]
 "198R106" [label="R106", fillcolor=3, shape=diamond, style=filled]
  199 [label="State 199\n\l104 print: PRINT '(' expr ')' .\l"]
  199 -> "199R104" [style=solid]
 "199R104" [label="R104", fillcolor=3, shape=diamond, style=filled]
  200 [label="State 200\n\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l122     | MVARIABLE '(' expr . ',' expr ')'\l"]
  200 -> 115 [style=solid label="CONJUNCTION"]
  200 -> 231 [style=solid label="','"]
  200 -> 116 [style=solid label="'<'"]
  200 -> 117 [style=solid label="'>'"]
  200 -> 118 [style=solid label="'+'"]
  200 -> 119 [style=solid label="'-'"]
  200 -> 120 [style=solid label="'/'"]
  201 [label="State 201\n\l 31 begif: B .\l"]
  201 -> "201R31" [style=solid]
 "201R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  202 [label="State 202\n\l 32 begif: BEGIF .\l"]
  202 -> "202R32" [style=solid]
 "202R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  203 [label="State 203\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . robotactions NEWLINE\l 21     | . '(' stmts ')'\l 22     | . error NEWLINE\l 23 robotactions: . robotright\l 24             | . robotleft\l 25 robotmove: . MOVE '(' expr ')'\l 26 robotright: . RIGHT\l 27 robotleft: . LEFT\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 30 iff: . IF expr NEWLINE begif stmts endif\l 30    | IF expr NEWLINE begif . stmts endif\l 39 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 54 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 55              | . error\l 56 function: . function_head B NEWLINE stmts E\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 90 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 91              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 92              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 93              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 94              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 95              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 96              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 97              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 98 declaration: . type VAR DECLARE expr\l 99            | . type VAR DECLARE vector\l100            | . type VAR DECLARE matrix\l101 assignment: . VARIABLE ASSIGN expr\l102           | . VVARIABLE ASSIGN vector\l103           | . MVARIABLE ASSIGN matrix\l104 print: . PRINT '(' expr ')'\l105      | . PRINT '(' VVARIABLE ')'\l106      | . PRINT '(' MVARIABLE ')'\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l124 type: . INT\l125     | . CINT\l126     | . VINT\l127     | . MINT\l128     | . CVINT\l129     | . CMINT\l130     | . BOOLEAN\l131     | . CBOOLEAN\l132     | . VBOOLEAN\l133     | . MBOOLEAN\l134     | . CVBOOLEAN\l135     | . CMBOOLEAN\l136 const: . INTEGER\l137      | . BOOL\l"]
  203 -> 80 [style=dotted]
  203 -> 5 [style=solid label="BOOL"]
  203 -> 6 [style=solid label="INTEGER"]
  203 -> 7 [style=solid label="VARIABLE"]
  203 -> 8 [style=solid label="VVARIABLE"]
  203 -> 9 [style=solid label="MVARIABLE"]
  203 -> 10 [style=solid label="CINT"]
  203 -> 11 [style=solid label="VINT"]
  203 -> 12 [style=solid label="MINT"]
  203 -> 13 [style=solid label="INT"]
  203 -> 14 [style=solid label="CVINT"]
  203 -> 15 [style=solid label="CMINT"]
  203 -> 16 [style=solid label="BOOLEAN"]
  203 -> 17 [style=solid label="CBOOLEAN"]
  203 -> 18 [style=solid label="VBOOLEAN"]
  203 -> 19 [style=solid label="MBOOLEAN"]
  203 -> 20 [style=solid label="CVBOOLEAN"]
  203 -> 21 [style=solid label="CMBOOLEAN"]
  203 -> 22 [style=solid label="NEWLINE"]
  203 -> 23 [style=solid label="PRINT"]
  203 -> 24 [style=solid label="IF"]
  203 -> 25 [style=solid label="FORR"]
  203 -> 26 [style=solid label="MOVE"]
  203 -> 27 [style=solid label="RIGHT"]
  203 -> 28 [style=solid label="LEFT"]
  203 -> 29 [style=solid label="ROBEX"]
  203 -> 30 [style=solid label="WALL"]
  203 -> 31 [style=solid label="'-'"]
  203 -> 32 [style=solid label="'!'"]
  203 -> 33 [style=solid label="'('"]
  203 -> 34 [style=solid label="'['"]
  203 -> 35 [style=solid label="'{'"]
  203 -> 232 [style=dashed label="stmts"]
  203 -> 37 [style=dashed label="stmt"]
  203 -> 38 [style=dashed label="robotactions"]
  203 -> 39 [style=dashed label="robotmove"]
  203 -> 40 [style=dashed label="robotright"]
  203 -> 41 [style=dashed label="robotleft"]
  203 -> 42 [style=dashed label="robotwall"]
  203 -> 43 [style=dashed label="robotexit"]
  203 -> 44 [style=dashed label="iff"]
  203 -> 45 [style=dashed label="forr"]
  203 -> 46 [style=dashed label="function_head"]
  203 -> 47 [style=dashed label="function"]
  203 -> 48 [style=dashed label="matrix"]
  203 -> 49 [style=dashed label="vector"]
  203 -> 50 [style=dashed label="vmdeclaration"]
  203 -> 51 [style=dashed label="declaration"]
  203 -> 52 [style=dashed label="assignment"]
  203 -> 53 [style=dashed label="print"]
  203 -> 54 [style=dashed label="expr"]
  203 -> 55 [style=dashed label="type"]
  203 -> 56 [style=dashed label="const"]
  204 [label="State 204\n\l 39 forr: FORR declaration DOUBLEDOT expr . NEWLINE begfor stmts endfor\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  204 -> 233 [style=solid label="NEWLINE"]
  204 -> 115 [style=solid label="CONJUNCTION"]
  204 -> 116 [style=solid label="'<'"]
  204 -> 117 [style=solid label="'>'"]
  204 -> 118 [style=solid label="'+'"]
  204 -> 119 [style=solid label="'-'"]
  204 -> 120 [style=solid label="'/'"]
  205 [label="State 205\n\l 25 robotmove: MOVE '(' expr ')' .\l"]
  205 -> "205R25" [style=solid]
 "205R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  206 [label="State 206\n\l 41 return_func: return_func ',' type . VAR\l"]
  206 -> 234 [style=solid label="VAR"]
  207 [label="State 207\n\l 54 function_head: '[' return_func ']' DECLARE . FUNC VAR '(' args_func ')'\l"]
  207 -> 235 [style=solid label="FUNC"]
  208 [label="State 208\n\l 79 vector: MVARIABLE '(' '[' . ']' ',' expr ')'\l"]
  208 -> 236 [style=solid label="']'"]
  209 [label="State 209\n\l 74 listexprs: listexprs ',' vector .  [error, ',', '}']\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l"]
  209 -> 106 [style=solid label="ELEMMULT"]
  209 -> 108 [style=solid label="LEFTSHIFT"]
  209 -> 109 [style=solid label="RIGHTSHIFT"]
  209 -> "209R74" [style=solid]
 "209R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  210 [label="State 210\n\l 73 listexprs: vector ',' vector .  [error, ',', '}']\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l"]
  210 -> 106 [style=solid label="ELEMMULT"]
  210 -> 108 [style=solid label="LEFTSHIFT"]
  210 -> 109 [style=solid label="RIGHTSHIFT"]
  210 -> "210R73" [style=solid]
 "210R73" [label="R73", fillcolor=3, shape=diamond, style=filled]
  211 [label="State 211\n\l 88 exprs: exprs ',' expr .  [error, ',', '}']\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  211 -> 115 [style=solid label="CONJUNCTION"]
  211 -> 116 [style=solid label="'<'"]
  211 -> 117 [style=solid label="'>'"]
  211 -> 118 [style=solid label="'+'"]
  211 -> 119 [style=solid label="'-'"]
  211 -> 120 [style=solid label="'/'"]
  211 -> "211R88" [style=solid]
 "211R88" [label="R88", fillcolor=3, shape=diamond, style=filled]
  212 [label="State 212\n\l 87 exprs: expr ',' expr .  [error, ',', '}']\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  212 -> 115 [style=solid label="CONJUNCTION"]
  212 -> 116 [style=solid label="'<'"]
  212 -> 117 [style=solid label="'>'"]
  212 -> 118 [style=solid label="'+'"]
  212 -> 119 [style=solid label="'-'"]
  212 -> 120 [style=solid label="'/'"]
  212 -> "212R87" [style=solid]
 "212R87" [label="R87", fillcolor=3, shape=diamond, style=filled]
  213 [label="State 213\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . robotactions NEWLINE\l 21     | . '(' stmts ')'\l 22     | . error NEWLINE\l 23 robotactions: . robotright\l 24             | . robotleft\l 25 robotmove: . MOVE '(' expr ')'\l 26 robotright: . RIGHT\l 27 robotleft: . LEFT\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 30 iff: . IF expr NEWLINE begif stmts endif\l 39 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 54 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 55              | . error\l 56 function: . function_head B NEWLINE stmts E\l 56         | function_head B NEWLINE stmts . E\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 90 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 91              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 92              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 93              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 94              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 95              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 96              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 97              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 98 declaration: . type VAR DECLARE expr\l 99            | . type VAR DECLARE vector\l100            | . type VAR DECLARE matrix\l101 assignment: . VARIABLE ASSIGN expr\l102           | . VVARIABLE ASSIGN vector\l103           | . MVARIABLE ASSIGN matrix\l104 print: . PRINT '(' expr ')'\l105      | . PRINT '(' VVARIABLE ')'\l106      | . PRINT '(' MVARIABLE ')'\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l124 type: . INT\l125     | . CINT\l126     | . VINT\l127     | . MINT\l128     | . CVINT\l129     | . CMINT\l130     | . BOOLEAN\l131     | . CBOOLEAN\l132     | . VBOOLEAN\l133     | . MBOOLEAN\l134     | . CVBOOLEAN\l135     | . CMBOOLEAN\l136 const: . INTEGER\l137      | . BOOL\l"]
  213 -> 92 [style=dotted]
  213 -> 5 [style=solid label="BOOL"]
  213 -> 6 [style=solid label="INTEGER"]
  213 -> 7 [style=solid label="VARIABLE"]
  213 -> 8 [style=solid label="VVARIABLE"]
  213 -> 9 [style=solid label="MVARIABLE"]
  213 -> 10 [style=solid label="CINT"]
  213 -> 11 [style=solid label="VINT"]
  213 -> 12 [style=solid label="MINT"]
  213 -> 13 [style=solid label="INT"]
  213 -> 14 [style=solid label="CVINT"]
  213 -> 15 [style=solid label="CMINT"]
  213 -> 16 [style=solid label="BOOLEAN"]
  213 -> 17 [style=solid label="CBOOLEAN"]
  213 -> 18 [style=solid label="VBOOLEAN"]
  213 -> 19 [style=solid label="MBOOLEAN"]
  213 -> 20 [style=solid label="CVBOOLEAN"]
  213 -> 21 [style=solid label="CMBOOLEAN"]
  213 -> 22 [style=solid label="NEWLINE"]
  213 -> 23 [style=solid label="PRINT"]
  213 -> 24 [style=solid label="IF"]
  213 -> 25 [style=solid label="FORR"]
  213 -> 237 [style=solid label="E"]
  213 -> 26 [style=solid label="MOVE"]
  213 -> 27 [style=solid label="RIGHT"]
  213 -> 28 [style=solid label="LEFT"]
  213 -> 29 [style=solid label="ROBEX"]
  213 -> 30 [style=solid label="WALL"]
  213 -> 31 [style=solid label="'-'"]
  213 -> 32 [style=solid label="'!'"]
  213 -> 33 [style=solid label="'('"]
  213 -> 34 [style=solid label="'['"]
  213 -> 35 [style=solid label="'{'"]
  213 -> 93 [style=dashed label="stmt"]
  213 -> 38 [style=dashed label="robotactions"]
  213 -> 39 [style=dashed label="robotmove"]
  213 -> 40 [style=dashed label="robotright"]
  213 -> 41 [style=dashed label="robotleft"]
  213 -> 42 [style=dashed label="robotwall"]
  213 -> 43 [style=dashed label="robotexit"]
  213 -> 44 [style=dashed label="iff"]
  213 -> 45 [style=dashed label="forr"]
  213 -> 46 [style=dashed label="function_head"]
  213 -> 47 [style=dashed label="function"]
  213 -> 48 [style=dashed label="matrix"]
  213 -> 49 [style=dashed label="vector"]
  213 -> 50 [style=dashed label="vmdeclaration"]
  213 -> 51 [style=dashed label="declaration"]
  213 -> 52 [style=dashed label="assignment"]
  213 -> 53 [style=dashed label="print"]
  213 -> 54 [style=dashed label="expr"]
  213 -> 55 [style=dashed label="type"]
  213 -> 56 [style=dashed label="const"]
  214 [label="State 214\n\l 62 matrix: matrix . '*' matrix\l 63       | matrix . ELEMMULT matrix\l 64       | matrix . '\\''\l 65       | matrix . RIGHTSHIFT\l 66       | matrix . LEFTSHIFT\l 68       | matrix . ELEMMULT vector\l 69       | matrix . ELEMMULT expr\l100 declaration: type VAR DECLARE matrix .  [NEWLINE, DOUBLEDOT]\l"]
  214 -> 100 [style=solid label="ELEMMULT"]
  214 -> 101 [style=solid label="'\\''"]
  214 -> 102 [style=solid label="LEFTSHIFT"]
  214 -> 103 [style=solid label="RIGHTSHIFT"]
  214 -> 104 [style=solid label="'*'"]
  214 -> "214R100" [style=solid]
 "214R100" [label="R100", fillcolor=3, shape=diamond, style=filled]
  215 [label="State 215\n\l 67 matrix: vector . '\\''\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l 99 declaration: type VAR DECLARE vector .  [NEWLINE, DOUBLEDOT]\l"]
  215 -> 106 [style=solid label="ELEMMULT"]
  215 -> 107 [style=solid label="'\\''"]
  215 -> 108 [style=solid label="LEFTSHIFT"]
  215 -> 109 [style=solid label="RIGHTSHIFT"]
  215 -> "215R99" [style=solid]
 "215R99" [label="R99", fillcolor=3, shape=diamond, style=filled]
  216 [label="State 216\n\l 98 declaration: type VAR DECLARE expr .  [NEWLINE, DOUBLEDOT]\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  216 -> 115 [style=solid label="CONJUNCTION"]
  216 -> 116 [style=solid label="'<'"]
  216 -> 117 [style=solid label="'>'"]
  216 -> 118 [style=solid label="'+'"]
  216 -> 119 [style=solid label="'-'"]
  216 -> 120 [style=solid label="'/'"]
  216 -> "216R98" [style=solid]
 "216R98" [label="R98", fillcolor=3, shape=diamond, style=filled]
  217 [label="State 217\n\l 77 vector: VVARIABLE '(' vector ',' . '[' ']' ')'\l"]
  217 -> 238 [style=solid label="'['"]
  218 [label="State 218\n\l121 expr: VVARIABLE '(' expr ')' .\l"]
  218 -> "218R121" [style=solid]
 "218R121" [label="R121", fillcolor=3, shape=diamond, style=filled]
  219 [label="State 219\n\l 59 matrix: MVARIABLE '(' '[' ']' . ',' vector ')'\l 79 vector: MVARIABLE '(' '[' ']' . ',' expr ')'\l"]
  219 -> 239 [style=solid label="','"]
  220 [label="State 220\n\l 60 matrix: MVARIABLE '(' matrix ')' .\l"]
  220 -> "220R60" [style=solid]
 "220R60" [label="R60", fillcolor=3, shape=diamond, style=filled]
  221 [label="State 221\n\l 58 matrix: MVARIABLE '(' vector ',' . '[' ']' ')'\l"]
  221 -> 240 [style=solid label="'['"]
  222 [label="State 222\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 78 vector: MVARIABLE '(' expr ',' . '[' ']' ')'\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l122     | MVARIABLE '(' expr ',' . expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  222 -> 72 [style=dotted]
  222 -> 5 [style=solid label="BOOL"]
  222 -> 6 [style=solid label="INTEGER"]
  222 -> 58 [style=solid label="VARIABLE"]
  222 -> 73 [style=solid label="VVARIABLE"]
  222 -> 74 [style=solid label="MVARIABLE"]
  222 -> 26 [style=solid label="MOVE"]
  222 -> 29 [style=solid label="ROBEX"]
  222 -> 30 [style=solid label="WALL"]
  222 -> 31 [style=solid label="'-'"]
  222 -> 32 [style=solid label="'!'"]
  222 -> 62 [style=solid label="'('"]
  222 -> 241 [style=solid label="'['"]
  222 -> 39 [style=dashed label="robotmove"]
  222 -> 42 [style=dashed label="robotwall"]
  222 -> 43 [style=dashed label="robotexit"]
  222 -> 242 [style=dashed label="expr"]
  222 -> 56 [style=dashed label="const"]
  223 [label="State 223\n\l 78 vector: MVARIABLE '(' expr . ',' '[' ']' ')'\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  223 -> 115 [style=solid label="CONJUNCTION"]
  223 -> 243 [style=solid label="','"]
  223 -> 116 [style=solid label="'<'"]
  223 -> 117 [style=solid label="'>'"]
  223 -> 118 [style=solid label="'+'"]
  223 -> 119 [style=solid label="'-'"]
  223 -> 120 [style=solid label="'/'"]
  224 [label="State 224\n\l 77 vector: VVARIABLE '(' vector ',' '[' . ']' ')'\l 91 vmdeclaration: VVARIABLE '(' vector ',' '[' . ']' ')' ASSIGN vector\l"]
  224 -> 244 [style=solid label="']'"]
  225 [label="State 225\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 90 vmdeclaration: VVARIABLE '(' expr ')' ASSIGN . expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  225 -> 72 [style=dotted]
  225 -> 5 [style=solid label="BOOL"]
  225 -> 6 [style=solid label="INTEGER"]
  225 -> 58 [style=solid label="VARIABLE"]
  225 -> 73 [style=solid label="VVARIABLE"]
  225 -> 74 [style=solid label="MVARIABLE"]
  225 -> 26 [style=solid label="MOVE"]
  225 -> 29 [style=solid label="ROBEX"]
  225 -> 30 [style=solid label="WALL"]
  225 -> 31 [style=solid label="'-'"]
  225 -> 32 [style=solid label="'!'"]
  225 -> 62 [style=solid label="'('"]
  225 -> 39 [style=dashed label="robotmove"]
  225 -> 42 [style=dashed label="robotwall"]
  225 -> 43 [style=dashed label="robotexit"]
  225 -> 245 [style=dashed label="expr"]
  225 -> 56 [style=dashed label="const"]
  226 [label="State 226\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 59 matrix: MVARIABLE '(' '[' ']' ',' . vector ')'\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 79       | MVARIABLE '(' '[' ']' ',' . expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 94 vmdeclaration: MVARIABLE '(' '[' ']' ',' . expr ')' ASSIGN vector\l 96              | MVARIABLE '(' '[' ']' ',' . vector ')' ASSIGN matrix\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  226 -> 85 [style=dotted]
  226 -> 5 [style=solid label="BOOL"]
  226 -> 6 [style=solid label="INTEGER"]
  226 -> 58 [style=solid label="VARIABLE"]
  226 -> 59 [style=solid label="VVARIABLE"]
  226 -> 86 [style=solid label="MVARIABLE"]
  226 -> 26 [style=solid label="MOVE"]
  226 -> 29 [style=solid label="ROBEX"]
  226 -> 30 [style=solid label="WALL"]
  226 -> 31 [style=solid label="'-'"]
  226 -> 32 [style=solid label="'!'"]
  226 -> 62 [style=solid label="'('"]
  226 -> 87 [style=solid label="'{'"]
  226 -> 39 [style=dashed label="robotmove"]
  226 -> 42 [style=dashed label="robotwall"]
  226 -> 43 [style=dashed label="robotexit"]
  226 -> 246 [style=dashed label="vector"]
  226 -> 247 [style=dashed label="expr"]
  226 -> 56 [style=dashed label="const"]
  227 [label="State 227\n\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 97 vmdeclaration: MVARIABLE '(' matrix ')' ASSIGN . matrix\l"]
  227 -> 132 [style=dotted]
  227 -> 127 [style=solid label="VVARIABLE"]
  227 -> 133 [style=solid label="MVARIABLE"]
  227 -> 35 [style=solid label="'{'"]
  227 -> 248 [style=dashed label="matrix"]
  227 -> 135 [style=dashed label="vector"]
  228 [label="State 228\n\l 58 matrix: MVARIABLE '(' vector ',' '[' . ']' ')'\l 95 vmdeclaration: MVARIABLE '(' vector ',' '[' . ']' ')' ASSIGN matrix\l"]
  228 -> 249 [style=solid label="']'"]
  229 [label="State 229\n\l 78 vector: MVARIABLE '(' expr ',' '[' . ']' ')'\l 93 vmdeclaration: MVARIABLE '(' expr ',' '[' . ']' ')' ASSIGN vector\l"]
  229 -> 250 [style=solid label="']'"]
  230 [label="State 230\n\l 92 vmdeclaration: MVARIABLE '(' expr ',' expr . ')' ASSIGN expr\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l122     | MVARIABLE '(' expr ',' expr . ')'\l"]
  230 -> 115 [style=solid label="CONJUNCTION"]
  230 -> 116 [style=solid label="'<'"]
  230 -> 117 [style=solid label="'>'"]
  230 -> 118 [style=solid label="'+'"]
  230 -> 119 [style=solid label="'-'"]
  230 -> 120 [style=solid label="'/'"]
  230 -> 251 [style=solid label="')'"]
  231 [label="State 231\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l122     | MVARIABLE '(' expr ',' . expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  231 -> 72 [style=dotted]
  231 -> 5 [style=solid label="BOOL"]
  231 -> 6 [style=solid label="INTEGER"]
  231 -> 58 [style=solid label="VARIABLE"]
  231 -> 73 [style=solid label="VVARIABLE"]
  231 -> 74 [style=solid label="MVARIABLE"]
  231 -> 26 [style=solid label="MOVE"]
  231 -> 29 [style=solid label="ROBEX"]
  231 -> 30 [style=solid label="WALL"]
  231 -> 31 [style=solid label="'-'"]
  231 -> 32 [style=solid label="'!'"]
  231 -> 62 [style=solid label="'('"]
  231 -> 39 [style=dashed label="robotmove"]
  231 -> 42 [style=dashed label="robotwall"]
  231 -> 43 [style=dashed label="robotexit"]
  231 -> 242 [style=dashed label="expr"]
  231 -> 56 [style=dashed label="const"]
  232 [label="State 232\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . robotactions NEWLINE\l 21     | . '(' stmts ')'\l 22     | . error NEWLINE\l 23 robotactions: . robotright\l 24             | . robotleft\l 25 robotmove: . MOVE '(' expr ')'\l 26 robotright: . RIGHT\l 27 robotleft: . LEFT\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 30 iff: . IF expr NEWLINE begif stmts endif\l 30    | IF expr NEWLINE begif stmts . endif\l 33 endif: . E\l 34      | . ENDIF\l 39 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 54 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 55              | . error\l 56 function: . function_head B NEWLINE stmts E\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 90 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 91              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 92              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 93              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 94              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 95              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 96              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 97              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 98 declaration: . type VAR DECLARE expr\l 99            | . type VAR DECLARE vector\l100            | . type VAR DECLARE matrix\l101 assignment: . VARIABLE ASSIGN expr\l102           | . VVARIABLE ASSIGN vector\l103           | . MVARIABLE ASSIGN matrix\l104 print: . PRINT '(' expr ')'\l105      | . PRINT '(' VVARIABLE ')'\l106      | . PRINT '(' MVARIABLE ')'\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l124 type: . INT\l125     | . CINT\l126     | . VINT\l127     | . MINT\l128     | . CVINT\l129     | . CMINT\l130     | . BOOLEAN\l131     | . CBOOLEAN\l132     | . VBOOLEAN\l133     | . MBOOLEAN\l134     | . CVBOOLEAN\l135     | . CMBOOLEAN\l136 const: . INTEGER\l137      | . BOOL\l"]
  232 -> 92 [style=dotted]
  232 -> 5 [style=solid label="BOOL"]
  232 -> 6 [style=solid label="INTEGER"]
  232 -> 7 [style=solid label="VARIABLE"]
  232 -> 8 [style=solid label="VVARIABLE"]
  232 -> 9 [style=solid label="MVARIABLE"]
  232 -> 10 [style=solid label="CINT"]
  232 -> 11 [style=solid label="VINT"]
  232 -> 12 [style=solid label="MINT"]
  232 -> 13 [style=solid label="INT"]
  232 -> 14 [style=solid label="CVINT"]
  232 -> 15 [style=solid label="CMINT"]
  232 -> 16 [style=solid label="BOOLEAN"]
  232 -> 17 [style=solid label="CBOOLEAN"]
  232 -> 18 [style=solid label="VBOOLEAN"]
  232 -> 19 [style=solid label="MBOOLEAN"]
  232 -> 20 [style=solid label="CVBOOLEAN"]
  232 -> 21 [style=solid label="CMBOOLEAN"]
  232 -> 22 [style=solid label="NEWLINE"]
  232 -> 23 [style=solid label="PRINT"]
  232 -> 24 [style=solid label="IF"]
  232 -> 25 [style=solid label="FORR"]
  232 -> 252 [style=solid label="E"]
  232 -> 26 [style=solid label="MOVE"]
  232 -> 27 [style=solid label="RIGHT"]
  232 -> 28 [style=solid label="LEFT"]
  232 -> 29 [style=solid label="ROBEX"]
  232 -> 30 [style=solid label="WALL"]
  232 -> 253 [style=solid label="ENDIF"]
  232 -> 31 [style=solid label="'-'"]
  232 -> 32 [style=solid label="'!'"]
  232 -> 33 [style=solid label="'('"]
  232 -> 34 [style=solid label="'['"]
  232 -> 35 [style=solid label="'{'"]
  232 -> 93 [style=dashed label="stmt"]
  232 -> 38 [style=dashed label="robotactions"]
  232 -> 39 [style=dashed label="robotmove"]
  232 -> 40 [style=dashed label="robotright"]
  232 -> 41 [style=dashed label="robotleft"]
  232 -> 42 [style=dashed label="robotwall"]
  232 -> 43 [style=dashed label="robotexit"]
  232 -> 44 [style=dashed label="iff"]
  232 -> 254 [style=dashed label="endif"]
  232 -> 45 [style=dashed label="forr"]
  232 -> 46 [style=dashed label="function_head"]
  232 -> 47 [style=dashed label="function"]
  232 -> 48 [style=dashed label="matrix"]
  232 -> 49 [style=dashed label="vector"]
  232 -> 50 [style=dashed label="vmdeclaration"]
  232 -> 51 [style=dashed label="declaration"]
  232 -> 52 [style=dashed label="assignment"]
  232 -> 53 [style=dashed label="print"]
  232 -> 54 [style=dashed label="expr"]
  232 -> 55 [style=dashed label="type"]
  232 -> 56 [style=dashed label="const"]
  233 [label="State 233\n\l 35 begfor: . B\l 36       | . BEGFOR\l 39 forr: FORR declaration DOUBLEDOT expr NEWLINE . begfor stmts endfor\l"]
  233 -> 255 [style=solid label="B"]
  233 -> 256 [style=solid label="BEGFOR"]
  233 -> 257 [style=dashed label="begfor"]
  234 [label="State 234\n\l 41 return_func: return_func ',' type VAR .\l"]
  234 -> "234R41" [style=solid]
 "234R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  235 [label="State 235\n\l 54 function_head: '[' return_func ']' DECLARE FUNC . VAR '(' args_func ')'\l"]
  235 -> 258 [style=solid label="VAR"]
  236 [label="State 236\n\l 79 vector: MVARIABLE '(' '[' ']' . ',' expr ')'\l"]
  236 -> 259 [style=solid label="','"]
  237 [label="State 237\n\l 56 function: function_head B NEWLINE stmts E .\l"]
  237 -> "237R56" [style=solid]
 "237R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  238 [label="State 238\n\l 77 vector: VVARIABLE '(' vector ',' '[' . ']' ')'\l"]
  238 -> 260 [style=solid label="']'"]
  239 [label="State 239\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 59 matrix: MVARIABLE '(' '[' ']' ',' . vector ')'\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 79       | MVARIABLE '(' '[' ']' ',' . expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  239 -> 85 [style=dotted]
  239 -> 5 [style=solid label="BOOL"]
  239 -> 6 [style=solid label="INTEGER"]
  239 -> 58 [style=solid label="VARIABLE"]
  239 -> 59 [style=solid label="VVARIABLE"]
  239 -> 86 [style=solid label="MVARIABLE"]
  239 -> 26 [style=solid label="MOVE"]
  239 -> 29 [style=solid label="ROBEX"]
  239 -> 30 [style=solid label="WALL"]
  239 -> 31 [style=solid label="'-'"]
  239 -> 32 [style=solid label="'!'"]
  239 -> 62 [style=solid label="'('"]
  239 -> 87 [style=solid label="'{'"]
  239 -> 39 [style=dashed label="robotmove"]
  239 -> 42 [style=dashed label="robotwall"]
  239 -> 43 [style=dashed label="robotexit"]
  239 -> 261 [style=dashed label="vector"]
  239 -> 262 [style=dashed label="expr"]
  239 -> 56 [style=dashed label="const"]
  240 [label="State 240\n\l 58 matrix: MVARIABLE '(' vector ',' '[' . ']' ')'\l"]
  240 -> 263 [style=solid label="']'"]
  241 [label="State 241\n\l 78 vector: MVARIABLE '(' expr ',' '[' . ']' ')'\l"]
  241 -> 264 [style=solid label="']'"]
  242 [label="State 242\n\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l122     | MVARIABLE '(' expr ',' expr . ')'\l"]
  242 -> 115 [style=solid label="CONJUNCTION"]
  242 -> 116 [style=solid label="'<'"]
  242 -> 117 [style=solid label="'>'"]
  242 -> 118 [style=solid label="'+'"]
  242 -> 119 [style=solid label="'-'"]
  242 -> 120 [style=solid label="'/'"]
  242 -> 265 [style=solid label="')'"]
  243 [label="State 243\n\l 78 vector: MVARIABLE '(' expr ',' . '[' ']' ')'\l"]
  243 -> 241 [style=solid label="'['"]
  244 [label="State 244\n\l 77 vector: VVARIABLE '(' vector ',' '[' ']' . ')'\l 91 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' . ')' ASSIGN vector\l"]
  244 -> 266 [style=solid label="')'"]
  245 [label="State 245\n\l 90 vmdeclaration: VVARIABLE '(' expr ')' ASSIGN expr .  [NEWLINE]\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  245 -> 115 [style=solid label="CONJUNCTION"]
  245 -> 116 [style=solid label="'<'"]
  245 -> 117 [style=solid label="'>'"]
  245 -> 118 [style=solid label="'+'"]
  245 -> 119 [style=solid label="'-'"]
  245 -> 120 [style=solid label="'/'"]
  245 -> "245R90" [style=solid]
 "245R90" [label="R90", fillcolor=3, shape=diamond, style=filled]
  246 [label="State 246\n\l 59 matrix: MVARIABLE '(' '[' ']' ',' vector . ')'\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l 96 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector . ')' ASSIGN matrix\l"]
  246 -> 106 [style=solid label="ELEMMULT"]
  246 -> 108 [style=solid label="LEFTSHIFT"]
  246 -> 109 [style=solid label="RIGHTSHIFT"]
  246 -> 267 [style=solid label="')'"]
  247 [label="State 247\n\l 79 vector: MVARIABLE '(' '[' ']' ',' expr . ')'\l 94 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr . ')' ASSIGN vector\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  247 -> 115 [style=solid label="CONJUNCTION"]
  247 -> 116 [style=solid label="'<'"]
  247 -> 117 [style=solid label="'>'"]
  247 -> 118 [style=solid label="'+'"]
  247 -> 119 [style=solid label="'-'"]
  247 -> 120 [style=solid label="'/'"]
  247 -> 268 [style=solid label="')'"]
  248 [label="State 248\n\l 62 matrix: matrix . '*' matrix\l 63       | matrix . ELEMMULT matrix\l 64       | matrix . '\\''\l 65       | matrix . RIGHTSHIFT\l 66       | matrix . LEFTSHIFT\l 68       | matrix . ELEMMULT vector\l 69       | matrix . ELEMMULT expr\l 97 vmdeclaration: MVARIABLE '(' matrix ')' ASSIGN matrix .  [NEWLINE]\l"]
  248 -> 100 [style=solid label="ELEMMULT"]
  248 -> 101 [style=solid label="'\\''"]
  248 -> 102 [style=solid label="LEFTSHIFT"]
  248 -> 103 [style=solid label="RIGHTSHIFT"]
  248 -> 104 [style=solid label="'*'"]
  248 -> "248R97" [style=solid]
 "248R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  249 [label="State 249\n\l 58 matrix: MVARIABLE '(' vector ',' '[' ']' . ')'\l 95 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' . ')' ASSIGN matrix\l"]
  249 -> 269 [style=solid label="')'"]
  250 [label="State 250\n\l 78 vector: MVARIABLE '(' expr ',' '[' ']' . ')'\l 93 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' . ')' ASSIGN vector\l"]
  250 -> 270 [style=solid label="')'"]
  251 [label="State 251\n\l 92 vmdeclaration: MVARIABLE '(' expr ',' expr ')' . ASSIGN expr\l122 expr: MVARIABLE '(' expr ',' expr ')' .  [NEWLINE, CONJUNCTION, '<', '>', '+', '-', '/', ')']\l"]
  251 -> 271 [style=solid label="ASSIGN"]
  251 -> "251R122" [style=solid]
 "251R122" [label="R122", fillcolor=3, shape=diamond, style=filled]
  252 [label="State 252\n\l 33 endif: E .\l"]
  252 -> "252R33" [style=solid]
 "252R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  253 [label="State 253\n\l 34 endif: ENDIF .\l"]
  253 -> "253R34" [style=solid]
 "253R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  254 [label="State 254\n\l 30 iff: IF expr NEWLINE begif stmts endif .\l"]
  254 -> "254R30" [style=solid]
 "254R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  255 [label="State 255\n\l 35 begfor: B .\l"]
  255 -> "255R35" [style=solid]
 "255R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  256 [label="State 256\n\l 36 begfor: BEGFOR .\l"]
  256 -> "256R36" [style=solid]
 "256R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  257 [label="State 257\n\l  5 stmts: . stmt\l  6      | . stmts stmt\l  7      | . stmts error\l  8      | . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . robotactions NEWLINE\l 21     | . '(' stmts ')'\l 22     | . error NEWLINE\l 23 robotactions: . robotright\l 24             | . robotleft\l 25 robotmove: . MOVE '(' expr ')'\l 26 robotright: . RIGHT\l 27 robotleft: . LEFT\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 30 iff: . IF expr NEWLINE begif stmts endif\l 39 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 39     | FORR declaration DOUBLEDOT expr NEWLINE begfor . stmts endfor\l 54 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 55              | . error\l 56 function: . function_head B NEWLINE stmts E\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 90 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 91              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 92              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 93              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 94              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 95              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 96              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 97              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 98 declaration: . type VAR DECLARE expr\l 99            | . type VAR DECLARE vector\l100            | . type VAR DECLARE matrix\l101 assignment: . VARIABLE ASSIGN expr\l102           | . VVARIABLE ASSIGN vector\l103           | . MVARIABLE ASSIGN matrix\l104 print: . PRINT '(' expr ')'\l105      | . PRINT '(' VVARIABLE ')'\l106      | . PRINT '(' MVARIABLE ')'\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l124 type: . INT\l125     | . CINT\l126     | . VINT\l127     | . MINT\l128     | . CVINT\l129     | . CMINT\l130     | . BOOLEAN\l131     | . CBOOLEAN\l132     | . VBOOLEAN\l133     | . MBOOLEAN\l134     | . CVBOOLEAN\l135     | . CMBOOLEAN\l136 const: . INTEGER\l137      | . BOOL\l"]
  257 -> 80 [style=dotted]
  257 -> 5 [style=solid label="BOOL"]
  257 -> 6 [style=solid label="INTEGER"]
  257 -> 7 [style=solid label="VARIABLE"]
  257 -> 8 [style=solid label="VVARIABLE"]
  257 -> 9 [style=solid label="MVARIABLE"]
  257 -> 10 [style=solid label="CINT"]
  257 -> 11 [style=solid label="VINT"]
  257 -> 12 [style=solid label="MINT"]
  257 -> 13 [style=solid label="INT"]
  257 -> 14 [style=solid label="CVINT"]
  257 -> 15 [style=solid label="CMINT"]
  257 -> 16 [style=solid label="BOOLEAN"]
  257 -> 17 [style=solid label="CBOOLEAN"]
  257 -> 18 [style=solid label="VBOOLEAN"]
  257 -> 19 [style=solid label="MBOOLEAN"]
  257 -> 20 [style=solid label="CVBOOLEAN"]
  257 -> 21 [style=solid label="CMBOOLEAN"]
  257 -> 22 [style=solid label="NEWLINE"]
  257 -> 23 [style=solid label="PRINT"]
  257 -> 24 [style=solid label="IF"]
  257 -> 25 [style=solid label="FORR"]
  257 -> 26 [style=solid label="MOVE"]
  257 -> 27 [style=solid label="RIGHT"]
  257 -> 28 [style=solid label="LEFT"]
  257 -> 29 [style=solid label="ROBEX"]
  257 -> 30 [style=solid label="WALL"]
  257 -> 31 [style=solid label="'-'"]
  257 -> 32 [style=solid label="'!'"]
  257 -> 33 [style=solid label="'('"]
  257 -> 34 [style=solid label="'['"]
  257 -> 35 [style=solid label="'{'"]
  257 -> 272 [style=dashed label="stmts"]
  257 -> 37 [style=dashed label="stmt"]
  257 -> 38 [style=dashed label="robotactions"]
  257 -> 39 [style=dashed label="robotmove"]
  257 -> 40 [style=dashed label="robotright"]
  257 -> 41 [style=dashed label="robotleft"]
  257 -> 42 [style=dashed label="robotwall"]
  257 -> 43 [style=dashed label="robotexit"]
  257 -> 44 [style=dashed label="iff"]
  257 -> 45 [style=dashed label="forr"]
  257 -> 46 [style=dashed label="function_head"]
  257 -> 47 [style=dashed label="function"]
  257 -> 48 [style=dashed label="matrix"]
  257 -> 49 [style=dashed label="vector"]
  257 -> 50 [style=dashed label="vmdeclaration"]
  257 -> 51 [style=dashed label="declaration"]
  257 -> 52 [style=dashed label="assignment"]
  257 -> 53 [style=dashed label="print"]
  257 -> 54 [style=dashed label="expr"]
  257 -> 55 [style=dashed label="type"]
  257 -> 56 [style=dashed label="const"]
  258 [label="State 258\n\l 54 function_head: '[' return_func ']' DECLARE FUNC VAR . '(' args_func ')'\l"]
  258 -> 273 [style=solid label="'('"]
  259 [label="State 259\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 79 vector: MVARIABLE '(' '[' ']' ',' . expr ')'\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  259 -> 72 [style=dotted]
  259 -> 5 [style=solid label="BOOL"]
  259 -> 6 [style=solid label="INTEGER"]
  259 -> 58 [style=solid label="VARIABLE"]
  259 -> 73 [style=solid label="VVARIABLE"]
  259 -> 74 [style=solid label="MVARIABLE"]
  259 -> 26 [style=solid label="MOVE"]
  259 -> 29 [style=solid label="ROBEX"]
  259 -> 30 [style=solid label="WALL"]
  259 -> 31 [style=solid label="'-'"]
  259 -> 32 [style=solid label="'!'"]
  259 -> 62 [style=solid label="'('"]
  259 -> 39 [style=dashed label="robotmove"]
  259 -> 42 [style=dashed label="robotwall"]
  259 -> 43 [style=dashed label="robotexit"]
  259 -> 262 [style=dashed label="expr"]
  259 -> 56 [style=dashed label="const"]
  260 [label="State 260\n\l 77 vector: VVARIABLE '(' vector ',' '[' ']' . ')'\l"]
  260 -> 274 [style=solid label="')'"]
  261 [label="State 261\n\l 59 matrix: MVARIABLE '(' '[' ']' ',' vector . ')'\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l"]
  261 -> 106 [style=solid label="ELEMMULT"]
  261 -> 108 [style=solid label="LEFTSHIFT"]
  261 -> 109 [style=solid label="RIGHTSHIFT"]
  261 -> 275 [style=solid label="')'"]
  262 [label="State 262\n\l 79 vector: MVARIABLE '(' '[' ']' ',' expr . ')'\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  262 -> 115 [style=solid label="CONJUNCTION"]
  262 -> 116 [style=solid label="'<'"]
  262 -> 117 [style=solid label="'>'"]
  262 -> 118 [style=solid label="'+'"]
  262 -> 119 [style=solid label="'-'"]
  262 -> 120 [style=solid label="'/'"]
  262 -> 276 [style=solid label="')'"]
  263 [label="State 263\n\l 58 matrix: MVARIABLE '(' vector ',' '[' ']' . ')'\l"]
  263 -> 277 [style=solid label="')'"]
  264 [label="State 264\n\l 78 vector: MVARIABLE '(' expr ',' '[' ']' . ')'\l"]
  264 -> 278 [style=solid label="')'"]
  265 [label="State 265\n\l122 expr: MVARIABLE '(' expr ',' expr ')' .\l"]
  265 -> "265R122" [style=solid]
 "265R122" [label="R122", fillcolor=3, shape=diamond, style=filled]
  266 [label="State 266\n\l 77 vector: VVARIABLE '(' vector ',' '[' ']' ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l 91 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' ')' . ASSIGN vector\l"]
  266 -> 279 [style=solid label="ASSIGN"]
  266 -> "266R77" [style=solid]
 "266R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  267 [label="State 267\n\l 59 matrix: MVARIABLE '(' '[' ']' ',' vector ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l 96 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector ')' . ASSIGN matrix\l"]
  267 -> 280 [style=solid label="ASSIGN"]
  267 -> "267R59" [style=solid]
 "267R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
  268 [label="State 268\n\l 79 vector: MVARIABLE '(' '[' ']' ',' expr ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l 94 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr ')' . ASSIGN vector\l"]
  268 -> 281 [style=solid label="ASSIGN"]
  268 -> "268R79" [style=solid]
 "268R79" [label="R79", fillcolor=3, shape=diamond, style=filled]
  269 [label="State 269\n\l 58 matrix: MVARIABLE '(' vector ',' '[' ']' ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT, '*']\l 95 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' ')' . ASSIGN matrix\l"]
  269 -> 282 [style=solid label="ASSIGN"]
  269 -> "269R58" [style=solid]
 "269R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  270 [label="State 270\n\l 78 vector: MVARIABLE '(' expr ',' '[' ']' ')' .  [NEWLINE, ELEMMULT, '\\'', LEFTSHIFT, RIGHTSHIFT]\l 93 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' ')' . ASSIGN vector\l"]
  270 -> 283 [style=solid label="ASSIGN"]
  270 -> "270R78" [style=solid]
 "270R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
  271 [label="State 271\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 92 vmdeclaration: MVARIABLE '(' expr ',' expr ')' ASSIGN . expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  271 -> 72 [style=dotted]
  271 -> 5 [style=solid label="BOOL"]
  271 -> 6 [style=solid label="INTEGER"]
  271 -> 58 [style=solid label="VARIABLE"]
  271 -> 73 [style=solid label="VVARIABLE"]
  271 -> 74 [style=solid label="MVARIABLE"]
  271 -> 26 [style=solid label="MOVE"]
  271 -> 29 [style=solid label="ROBEX"]
  271 -> 30 [style=solid label="WALL"]
  271 -> 31 [style=solid label="'-'"]
  271 -> 32 [style=solid label="'!'"]
  271 -> 62 [style=solid label="'('"]
  271 -> 39 [style=dashed label="robotmove"]
  271 -> 42 [style=dashed label="robotwall"]
  271 -> 43 [style=dashed label="robotexit"]
  271 -> 284 [style=dashed label="expr"]
  271 -> 56 [style=dashed label="const"]
  272 [label="State 272\n\l  6 stmts: stmts . stmt\l  7      | stmts . error\l  9 stmt: . NEWLINE\l 10     | . expr NEWLINE\l 11     | . vector NEWLINE\l 12     | . matrix NEWLINE\l 13     | . print NEWLINE\l 14     | . vmdeclaration NEWLINE\l 15     | . declaration NEWLINE\l 16     | . assignment NEWLINE\l 17     | . iff NEWLINE\l 18     | . forr NEWLINE\l 19     | . function NEWLINE\l 20     | . robotactions NEWLINE\l 21     | . '(' stmts ')'\l 22     | . error NEWLINE\l 23 robotactions: . robotright\l 24             | . robotleft\l 25 robotmove: . MOVE '(' expr ')'\l 26 robotright: . RIGHT\l 27 robotleft: . LEFT\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 30 iff: . IF expr NEWLINE begif stmts endif\l 37 endfor: . E\l 38       | . ENDFOR\l 39 forr: . FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor\l 39     | FORR declaration DOUBLEDOT expr NEWLINE begfor stmts . endfor\l 54 function_head: . '[' return_func ']' DECLARE FUNC VAR '(' args_func ')'\l 55              | . error\l 56 function: . function_head B NEWLINE stmts E\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 90 vmdeclaration: . VVARIABLE '(' expr ')' ASSIGN expr\l 91              | . VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector\l 92              | . MVARIABLE '(' expr ',' expr ')' ASSIGN expr\l 93              | . MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector\l 94              | . MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector\l 95              | . MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix\l 96              | . MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix\l 97              | . MVARIABLE '(' matrix ')' ASSIGN matrix\l 98 declaration: . type VAR DECLARE expr\l 99            | . type VAR DECLARE vector\l100            | . type VAR DECLARE matrix\l101 assignment: . VARIABLE ASSIGN expr\l102           | . VVARIABLE ASSIGN vector\l103           | . MVARIABLE ASSIGN matrix\l104 print: . PRINT '(' expr ')'\l105      | . PRINT '(' VVARIABLE ')'\l106      | . PRINT '(' MVARIABLE ')'\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l124 type: . INT\l125     | . CINT\l126     | . VINT\l127     | . MINT\l128     | . CVINT\l129     | . CMINT\l130     | . BOOLEAN\l131     | . CBOOLEAN\l132     | . VBOOLEAN\l133     | . MBOOLEAN\l134     | . CVBOOLEAN\l135     | . CMBOOLEAN\l136 const: . INTEGER\l137      | . BOOL\l"]
  272 -> 92 [style=dotted]
  272 -> 5 [style=solid label="BOOL"]
  272 -> 6 [style=solid label="INTEGER"]
  272 -> 7 [style=solid label="VARIABLE"]
  272 -> 8 [style=solid label="VVARIABLE"]
  272 -> 9 [style=solid label="MVARIABLE"]
  272 -> 10 [style=solid label="CINT"]
  272 -> 11 [style=solid label="VINT"]
  272 -> 12 [style=solid label="MINT"]
  272 -> 13 [style=solid label="INT"]
  272 -> 14 [style=solid label="CVINT"]
  272 -> 15 [style=solid label="CMINT"]
  272 -> 16 [style=solid label="BOOLEAN"]
  272 -> 17 [style=solid label="CBOOLEAN"]
  272 -> 18 [style=solid label="VBOOLEAN"]
  272 -> 19 [style=solid label="MBOOLEAN"]
  272 -> 20 [style=solid label="CVBOOLEAN"]
  272 -> 21 [style=solid label="CMBOOLEAN"]
  272 -> 22 [style=solid label="NEWLINE"]
  272 -> 23 [style=solid label="PRINT"]
  272 -> 24 [style=solid label="IF"]
  272 -> 25 [style=solid label="FORR"]
  272 -> 285 [style=solid label="E"]
  272 -> 26 [style=solid label="MOVE"]
  272 -> 27 [style=solid label="RIGHT"]
  272 -> 28 [style=solid label="LEFT"]
  272 -> 29 [style=solid label="ROBEX"]
  272 -> 30 [style=solid label="WALL"]
  272 -> 286 [style=solid label="ENDFOR"]
  272 -> 31 [style=solid label="'-'"]
  272 -> 32 [style=solid label="'!'"]
  272 -> 33 [style=solid label="'('"]
  272 -> 34 [style=solid label="'['"]
  272 -> 35 [style=solid label="'{'"]
  272 -> 93 [style=dashed label="stmt"]
  272 -> 38 [style=dashed label="robotactions"]
  272 -> 39 [style=dashed label="robotmove"]
  272 -> 40 [style=dashed label="robotright"]
  272 -> 41 [style=dashed label="robotleft"]
  272 -> 42 [style=dashed label="robotwall"]
  272 -> 43 [style=dashed label="robotexit"]
  272 -> 44 [style=dashed label="iff"]
  272 -> 287 [style=dashed label="endfor"]
  272 -> 45 [style=dashed label="forr"]
  272 -> 46 [style=dashed label="function_head"]
  272 -> 47 [style=dashed label="function"]
  272 -> 48 [style=dashed label="matrix"]
  272 -> 49 [style=dashed label="vector"]
  272 -> 50 [style=dashed label="vmdeclaration"]
  272 -> 51 [style=dashed label="declaration"]
  272 -> 52 [style=dashed label="assignment"]
  272 -> 53 [style=dashed label="print"]
  272 -> 54 [style=dashed label="expr"]
  272 -> 55 [style=dashed label="type"]
  272 -> 56 [style=dashed label="const"]
  273 [label="State 273\n\l 43 args_func: . '[' type VAR\l 44          | . '[' type VAR DECLARE expr\l 45          | . '[' type VAR DECLARE vector\l 46          | . '[' type VAR DECLARE matrix\l 47          | . args_func ',' type VAR\l 48          | . args_func ',' type VAR DECLARE expr\l 49          | . args_func ',' type VAR DECLARE vector\l 50          | . args_func ',' type VAR DECLARE matrix\l 51          | . args_func ']'\l 52          | . args_func error\l 53          | . error\l 54 function_head: '[' return_func ']' DECLARE FUNC VAR '(' . args_func ')'\l"]
  273 -> 288 [style=dotted]
  273 -> 289 [style=solid label="'['"]
  273 -> 290 [style=dashed label="args_func"]
  274 [label="State 274\n\l 77 vector: VVARIABLE '(' vector ',' '[' ']' ')' .\l"]
  274 -> "274R77" [style=solid]
 "274R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  275 [label="State 275\n\l 59 matrix: MVARIABLE '(' '[' ']' ',' vector ')' .\l"]
  275 -> "275R59" [style=solid]
 "275R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
  276 [label="State 276\n\l 79 vector: MVARIABLE '(' '[' ']' ',' expr ')' .\l"]
  276 -> "276R79" [style=solid]
 "276R79" [label="R79", fillcolor=3, shape=diamond, style=filled]
  277 [label="State 277\n\l 58 matrix: MVARIABLE '(' vector ',' '[' ']' ')' .\l"]
  277 -> "277R58" [style=solid]
 "277R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  278 [label="State 278\n\l 78 vector: MVARIABLE '(' expr ',' '[' ']' ')' .\l"]
  278 -> "278R78" [style=solid]
 "278R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
  279 [label="State 279\n\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 91 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN . vector\l"]
  279 -> 126 [style=dotted]
  279 -> 127 [style=solid label="VVARIABLE"]
  279 -> 128 [style=solid label="MVARIABLE"]
  279 -> 87 [style=solid label="'{'"]
  279 -> 291 [style=dashed label="vector"]
  280 [label="State 280\n\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 96 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN . matrix\l"]
  280 -> 132 [style=dotted]
  280 -> 127 [style=solid label="VVARIABLE"]
  280 -> 133 [style=solid label="MVARIABLE"]
  280 -> 35 [style=solid label="'{'"]
  280 -> 292 [style=dashed label="matrix"]
  280 -> 135 [style=dashed label="vector"]
  281 [label="State 281\n\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 94 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN . vector\l"]
  281 -> 126 [style=dotted]
  281 -> 127 [style=solid label="VVARIABLE"]
  281 -> 128 [style=solid label="MVARIABLE"]
  281 -> 87 [style=solid label="'{'"]
  281 -> 293 [style=dashed label="vector"]
  282 [label="State 282\n\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 95 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN . matrix\l"]
  282 -> 132 [style=dotted]
  282 -> 127 [style=solid label="VVARIABLE"]
  282 -> 133 [style=solid label="MVARIABLE"]
  282 -> 35 [style=solid label="'{'"]
  282 -> 294 [style=dashed label="matrix"]
  282 -> 135 [style=dashed label="vector"]
  283 [label="State 283\n\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l 93 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN . vector\l"]
  283 -> 126 [style=dotted]
  283 -> 127 [style=solid label="VVARIABLE"]
  283 -> 128 [style=solid label="MVARIABLE"]
  283 -> 87 [style=solid label="'{'"]
  283 -> 295 [style=dashed label="vector"]
  284 [label="State 284\n\l 92 vmdeclaration: MVARIABLE '(' expr ',' expr ')' ASSIGN expr .  [NEWLINE]\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  284 -> 115 [style=solid label="CONJUNCTION"]
  284 -> 116 [style=solid label="'<'"]
  284 -> 117 [style=solid label="'>'"]
  284 -> 118 [style=solid label="'+'"]
  284 -> 119 [style=solid label="'-'"]
  284 -> 120 [style=solid label="'/'"]
  284 -> "284R92" [style=solid]
 "284R92" [label="R92", fillcolor=3, shape=diamond, style=filled]
  285 [label="State 285\n\l 37 endfor: E .\l"]
  285 -> "285R37" [style=solid]
 "285R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  286 [label="State 286\n\l 38 endfor: ENDFOR .\l"]
  286 -> "286R38" [style=solid]
 "286R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  287 [label="State 287\n\l 39 forr: FORR declaration DOUBLEDOT expr NEWLINE begfor stmts endfor .\l"]
  287 -> "287R39" [style=solid]
 "287R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  288 [label="State 288\n\l 53 args_func: error .\l"]
  288 -> "288R53" [style=solid]
 "288R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
  289 [label="State 289\n\l 43 args_func: '[' . type VAR\l 44          | '[' . type VAR DECLARE expr\l 45          | '[' . type VAR DECLARE vector\l 46          | '[' . type VAR DECLARE matrix\l124 type: . INT\l125     | . CINT\l126     | . VINT\l127     | . MINT\l128     | . CVINT\l129     | . CMINT\l130     | . BOOLEAN\l131     | . CBOOLEAN\l132     | . VBOOLEAN\l133     | . MBOOLEAN\l134     | . CVBOOLEAN\l135     | . CMBOOLEAN\l"]
  289 -> 10 [style=solid label="CINT"]
  289 -> 11 [style=solid label="VINT"]
  289 -> 12 [style=solid label="MINT"]
  289 -> 13 [style=solid label="INT"]
  289 -> 14 [style=solid label="CVINT"]
  289 -> 15 [style=solid label="CMINT"]
  289 -> 16 [style=solid label="BOOLEAN"]
  289 -> 17 [style=solid label="CBOOLEAN"]
  289 -> 18 [style=solid label="VBOOLEAN"]
  289 -> 19 [style=solid label="MBOOLEAN"]
  289 -> 20 [style=solid label="CVBOOLEAN"]
  289 -> 21 [style=solid label="CMBOOLEAN"]
  289 -> 296 [style=dashed label="type"]
  290 [label="State 290\n\l 47 args_func: args_func . ',' type VAR\l 48          | args_func . ',' type VAR DECLARE expr\l 49          | args_func . ',' type VAR DECLARE vector\l 50          | args_func . ',' type VAR DECLARE matrix\l 51          | args_func . ']'\l 52          | args_func . error\l 54 function_head: '[' return_func ']' DECLARE FUNC VAR '(' args_func . ')'\l"]
  290 -> 297 [style=dotted]
  290 -> 298 [style=solid label="','"]
  290 -> 299 [style=solid label="')'"]
  290 -> 300 [style=solid label="']'"]
  291 [label="State 291\n\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l 91 vmdeclaration: VVARIABLE '(' vector ',' '[' ']' ')' ASSIGN vector .  [NEWLINE]\l"]
  291 -> 106 [style=solid label="ELEMMULT"]
  291 -> 108 [style=solid label="LEFTSHIFT"]
  291 -> 109 [style=solid label="RIGHTSHIFT"]
  291 -> "291R91" [style=solid]
 "291R91" [label="R91", fillcolor=3, shape=diamond, style=filled]
  292 [label="State 292\n\l 62 matrix: matrix . '*' matrix\l 63       | matrix . ELEMMULT matrix\l 64       | matrix . '\\''\l 65       | matrix . RIGHTSHIFT\l 66       | matrix . LEFTSHIFT\l 68       | matrix . ELEMMULT vector\l 69       | matrix . ELEMMULT expr\l 96 vmdeclaration: MVARIABLE '(' '[' ']' ',' vector ')' ASSIGN matrix .  [NEWLINE]\l"]
  292 -> 100 [style=solid label="ELEMMULT"]
  292 -> 101 [style=solid label="'\\''"]
  292 -> 102 [style=solid label="LEFTSHIFT"]
  292 -> 103 [style=solid label="RIGHTSHIFT"]
  292 -> 104 [style=solid label="'*'"]
  292 -> "292R96" [style=solid]
 "292R96" [label="R96", fillcolor=3, shape=diamond, style=filled]
  293 [label="State 293\n\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l 94 vmdeclaration: MVARIABLE '(' '[' ']' ',' expr ')' ASSIGN vector .  [NEWLINE]\l"]
  293 -> 106 [style=solid label="ELEMMULT"]
  293 -> 108 [style=solid label="LEFTSHIFT"]
  293 -> 109 [style=solid label="RIGHTSHIFT"]
  293 -> "293R94" [style=solid]
 "293R94" [label="R94", fillcolor=3, shape=diamond, style=filled]
  294 [label="State 294\n\l 62 matrix: matrix . '*' matrix\l 63       | matrix . ELEMMULT matrix\l 64       | matrix . '\\''\l 65       | matrix . RIGHTSHIFT\l 66       | matrix . LEFTSHIFT\l 68       | matrix . ELEMMULT vector\l 69       | matrix . ELEMMULT expr\l 95 vmdeclaration: MVARIABLE '(' vector ',' '[' ']' ')' ASSIGN matrix .  [NEWLINE]\l"]
  294 -> 100 [style=solid label="ELEMMULT"]
  294 -> 101 [style=solid label="'\\''"]
  294 -> 102 [style=solid label="LEFTSHIFT"]
  294 -> 103 [style=solid label="RIGHTSHIFT"]
  294 -> 104 [style=solid label="'*'"]
  294 -> "294R95" [style=solid]
 "294R95" [label="R95", fillcolor=3, shape=diamond, style=filled]
  295 [label="State 295\n\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l 93 vmdeclaration: MVARIABLE '(' expr ',' '[' ']' ')' ASSIGN vector .  [NEWLINE]\l"]
  295 -> 106 [style=solid label="ELEMMULT"]
  295 -> 108 [style=solid label="LEFTSHIFT"]
  295 -> 109 [style=solid label="RIGHTSHIFT"]
  295 -> "295R93" [style=solid]
 "295R93" [label="R93", fillcolor=3, shape=diamond, style=filled]
  296 [label="State 296\n\l 43 args_func: '[' type . VAR\l 44          | '[' type . VAR DECLARE expr\l 45          | '[' type . VAR DECLARE vector\l 46          | '[' type . VAR DECLARE matrix\l"]
  296 -> 301 [style=solid label="VAR"]
  297 [label="State 297\n\l 52 args_func: args_func error .\l"]
  297 -> "297R52" [style=solid]
 "297R52" [label="R52", fillcolor=3, shape=diamond, style=filled]
  298 [label="State 298\n\l 47 args_func: args_func ',' . type VAR\l 48          | args_func ',' . type VAR DECLARE expr\l 49          | args_func ',' . type VAR DECLARE vector\l 50          | args_func ',' . type VAR DECLARE matrix\l124 type: . INT\l125     | . CINT\l126     | . VINT\l127     | . MINT\l128     | . CVINT\l129     | . CMINT\l130     | . BOOLEAN\l131     | . CBOOLEAN\l132     | . VBOOLEAN\l133     | . MBOOLEAN\l134     | . CVBOOLEAN\l135     | . CMBOOLEAN\l"]
  298 -> 10 [style=solid label="CINT"]
  298 -> 11 [style=solid label="VINT"]
  298 -> 12 [style=solid label="MINT"]
  298 -> 13 [style=solid label="INT"]
  298 -> 14 [style=solid label="CVINT"]
  298 -> 15 [style=solid label="CMINT"]
  298 -> 16 [style=solid label="BOOLEAN"]
  298 -> 17 [style=solid label="CBOOLEAN"]
  298 -> 18 [style=solid label="VBOOLEAN"]
  298 -> 19 [style=solid label="MBOOLEAN"]
  298 -> 20 [style=solid label="CVBOOLEAN"]
  298 -> 21 [style=solid label="CMBOOLEAN"]
  298 -> 302 [style=dashed label="type"]
  299 [label="State 299\n\l 54 function_head: '[' return_func ']' DECLARE FUNC VAR '(' args_func ')' .\l"]
  299 -> "299R54" [style=solid]
 "299R54" [label="R54", fillcolor=3, shape=diamond, style=filled]
  300 [label="State 300\n\l 51 args_func: args_func ']' .\l"]
  300 -> "300R51" [style=solid]
 "300R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
  301 [label="State 301\n\l 43 args_func: '[' type VAR .  [error, ',', ')', ']']\l 44          | '[' type VAR . DECLARE expr\l 45          | '[' type VAR . DECLARE vector\l 46          | '[' type VAR . DECLARE matrix\l"]
  301 -> 303 [style=solid label="DECLARE"]
  301 -> "301R43" [style=solid]
 "301R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  302 [label="State 302\n\l 47 args_func: args_func ',' type . VAR\l 48          | args_func ',' type . VAR DECLARE expr\l 49          | args_func ',' type . VAR DECLARE vector\l 50          | args_func ',' type . VAR DECLARE matrix\l"]
  302 -> 304 [style=solid label="VAR"]
  303 [label="State 303\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 44 args_func: '[' type VAR DECLARE . expr\l 45          | '[' type VAR DECLARE . vector\l 46          | '[' type VAR DECLARE . matrix\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  303 -> 57 [style=dotted]
  303 -> 5 [style=solid label="BOOL"]
  303 -> 6 [style=solid label="INTEGER"]
  303 -> 58 [style=solid label="VARIABLE"]
  303 -> 59 [style=solid label="VVARIABLE"]
  303 -> 60 [style=solid label="MVARIABLE"]
  303 -> 26 [style=solid label="MOVE"]
  303 -> 29 [style=solid label="ROBEX"]
  303 -> 30 [style=solid label="WALL"]
  303 -> 31 [style=solid label="'-'"]
  303 -> 32 [style=solid label="'!'"]
  303 -> 62 [style=solid label="'('"]
  303 -> 35 [style=solid label="'{'"]
  303 -> 39 [style=dashed label="robotmove"]
  303 -> 42 [style=dashed label="robotwall"]
  303 -> 43 [style=dashed label="robotexit"]
  303 -> 305 [style=dashed label="matrix"]
  303 -> 306 [style=dashed label="vector"]
  303 -> 307 [style=dashed label="expr"]
  303 -> 56 [style=dashed label="const"]
  304 [label="State 304\n\l 47 args_func: args_func ',' type VAR .  [error, ',', ')', ']']\l 48          | args_func ',' type VAR . DECLARE expr\l 49          | args_func ',' type VAR . DECLARE vector\l 50          | args_func ',' type VAR . DECLARE matrix\l"]
  304 -> 308 [style=solid label="DECLARE"]
  304 -> "304R47" [style=solid]
 "304R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  305 [label="State 305\n\l 46 args_func: '[' type VAR DECLARE matrix .  [error, ',', ')', ']']\l 62 matrix: matrix . '*' matrix\l 63       | matrix . ELEMMULT matrix\l 64       | matrix . '\\''\l 65       | matrix . RIGHTSHIFT\l 66       | matrix . LEFTSHIFT\l 68       | matrix . ELEMMULT vector\l 69       | matrix . ELEMMULT expr\l"]
  305 -> 100 [style=solid label="ELEMMULT"]
  305 -> 101 [style=solid label="'\\''"]
  305 -> 102 [style=solid label="LEFTSHIFT"]
  305 -> 103 [style=solid label="RIGHTSHIFT"]
  305 -> 104 [style=solid label="'*'"]
  305 -> "305R46" [style=solid]
 "305R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
  306 [label="State 306\n\l 45 args_func: '[' type VAR DECLARE vector .  [error, ',', ')', ']']\l 67 matrix: vector . '\\''\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l"]
  306 -> 106 [style=solid label="ELEMMULT"]
  306 -> 107 [style=solid label="'\\''"]
  306 -> 108 [style=solid label="LEFTSHIFT"]
  306 -> 109 [style=solid label="RIGHTSHIFT"]
  306 -> "306R45" [style=solid]
 "306R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
  307 [label="State 307\n\l 44 args_func: '[' type VAR DECLARE expr .  [error, ',', ')', ']']\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  307 -> 115 [style=solid label="CONJUNCTION"]
  307 -> 116 [style=solid label="'<'"]
  307 -> 117 [style=solid label="'>'"]
  307 -> 118 [style=solid label="'+'"]
  307 -> 119 [style=solid label="'-'"]
  307 -> 120 [style=solid label="'/'"]
  307 -> "307R44" [style=solid]
 "307R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  308 [label="State 308\n\l 25 robotmove: . MOVE '(' expr ')'\l 28 robotwall: . WALL\l 29 robotexit: . ROBEX\l 48 args_func: args_func ',' type VAR DECLARE . expr\l 49          | args_func ',' type VAR DECLARE . vector\l 50          | args_func ',' type VAR DECLARE . matrix\l 57 matrix: . '{' listexprs '}'\l 58       | . MVARIABLE '(' vector ',' '[' ']' ')'\l 59       | . MVARIABLE '(' '[' ']' ',' vector ')'\l 60       | . MVARIABLE '(' matrix ')'\l 61       | . MVARIABLE\l 62       | . matrix '*' matrix\l 63       | . matrix ELEMMULT matrix\l 64       | . matrix '\\''\l 65       | . matrix RIGHTSHIFT\l 66       | . matrix LEFTSHIFT\l 67       | . vector '\\''\l 68       | . matrix ELEMMULT vector\l 69       | . matrix ELEMMULT expr\l 70       | . error matrix\l 71       | . error vector\l 72       | . error expr\l 76 vector: . '{' exprs '}'\l 77       | . VVARIABLE '(' vector ',' '[' ']' ')'\l 78       | . MVARIABLE '(' expr ',' '[' ']' ')'\l 79       | . MVARIABLE '(' '[' ']' ',' expr ')'\l 80       | . VVARIABLE\l 81       | . vector ELEMMULT vector\l 82       | . vector RIGHTSHIFT\l 83       | . vector LEFTSHIFT\l 84       | . vector ELEMMULT expr\l 85       | . error vector\l 86       | . error expr\l107 expr: . const\l108     | . robotexit\l109     | . robotmove\l110     | . robotwall\l111     | . VARIABLE\l112     | . '-' expr\l113     | . expr '+' expr\l114     | . expr '-' expr\l115     | . expr '/' expr\l116     | . expr '<' expr\l117     | . expr '>' expr\l118     | . '!' expr\l119     | . expr CONJUNCTION expr\l120     | . '(' expr ')'\l121     | . VVARIABLE '(' expr ')'\l122     | . MVARIABLE '(' expr ',' expr ')'\l123     | . error expr\l136 const: . INTEGER\l137      | . BOOL\l"]
  308 -> 57 [style=dotted]
  308 -> 5 [style=solid label="BOOL"]
  308 -> 6 [style=solid label="INTEGER"]
  308 -> 58 [style=solid label="VARIABLE"]
  308 -> 59 [style=solid label="VVARIABLE"]
  308 -> 60 [style=solid label="MVARIABLE"]
  308 -> 26 [style=solid label="MOVE"]
  308 -> 29 [style=solid label="ROBEX"]
  308 -> 30 [style=solid label="WALL"]
  308 -> 31 [style=solid label="'-'"]
  308 -> 32 [style=solid label="'!'"]
  308 -> 62 [style=solid label="'('"]
  308 -> 35 [style=solid label="'{'"]
  308 -> 39 [style=dashed label="robotmove"]
  308 -> 42 [style=dashed label="robotwall"]
  308 -> 43 [style=dashed label="robotexit"]
  308 -> 309 [style=dashed label="matrix"]
  308 -> 310 [style=dashed label="vector"]
  308 -> 311 [style=dashed label="expr"]
  308 -> 56 [style=dashed label="const"]
  309 [label="State 309\n\l 50 args_func: args_func ',' type VAR DECLARE matrix .  [error, ',', ')', ']']\l 62 matrix: matrix . '*' matrix\l 63       | matrix . ELEMMULT matrix\l 64       | matrix . '\\''\l 65       | matrix . RIGHTSHIFT\l 66       | matrix . LEFTSHIFT\l 68       | matrix . ELEMMULT vector\l 69       | matrix . ELEMMULT expr\l"]
  309 -> 100 [style=solid label="ELEMMULT"]
  309 -> 101 [style=solid label="'\\''"]
  309 -> 102 [style=solid label="LEFTSHIFT"]
  309 -> 103 [style=solid label="RIGHTSHIFT"]
  309 -> 104 [style=solid label="'*'"]
  309 -> "309R50" [style=solid]
 "309R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
  310 [label="State 310\n\l 49 args_func: args_func ',' type VAR DECLARE vector .  [error, ',', ')', ']']\l 67 matrix: vector . '\\''\l 81 vector: vector . ELEMMULT vector\l 82       | vector . RIGHTSHIFT\l 83       | vector . LEFTSHIFT\l 84       | vector . ELEMMULT expr\l"]
  310 -> 106 [style=solid label="ELEMMULT"]
  310 -> 107 [style=solid label="'\\''"]
  310 -> 108 [style=solid label="LEFTSHIFT"]
  310 -> 109 [style=solid label="RIGHTSHIFT"]
  310 -> "310R49" [style=solid]
 "310R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
  311 [label="State 311\n\l 48 args_func: args_func ',' type VAR DECLARE expr .  [error, ',', ')', ']']\l113 expr: expr . '+' expr\l114     | expr . '-' expr\l115     | expr . '/' expr\l116     | expr . '<' expr\l117     | expr . '>' expr\l119     | expr . CONJUNCTION expr\l"]
  311 -> 115 [style=solid label="CONJUNCTION"]
  311 -> 116 [style=solid label="'<'"]
  311 -> 117 [style=solid label="'>'"]
  311 -> 118 [style=solid label="'+'"]
  311 -> 119 [style=solid label="'-'"]
  311 -> 120 [style=solid label="'/'"]
  311 -> "311R48" [style=solid]
 "311R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
}
